{
	"info": {
		"_postman_id": "de0560f5-465d-4677-8e1e-d903b8792a6b",
		"name": "STIGMan API Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Collections Tests - data file driven",
			"item": [
				{
					"name": "Optional params and edge cases",
					"item": [
						{
							"name": "collections - get - with name string",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1c779910-601e-441b-958e-f8834ecd19e8",
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"if (user == \"wf10\") {\r",
											"    pm.test(\"Status should be is 403 for user wf10\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"}\r",
											"\r",
											"\r",
											"let allowedCollections, disallowedCollections, validStigs, invalidStigs, validAssets, invalidAssets;\r",
											"\r",
											"console.log(\"building valid assignments lists\");\r",
											"\r",
											"allowedCollections = JSON.parse(pm.environment.get((\"collections.valid\")));\r",
											"console.log(\"user is \" + user);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Response JSON is an array\", function () {\r",
											"    pm.expect(jsonData).to.be.an('array');\r",
											"});\r",
											"\r",
											"let collectionIds = [];\r",
											"let names = [];\r",
											"let stigIds = [];\r",
											"pm.test(\"Each item in response has proper properties\", function () {\r",
											"    jsonData.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property('collectionId');\r",
											"        collectionIds.push(item.collectionId);\r",
											"        // console.log (item.assets);\r",
											"        // let assets = [];\r",
											"        // assets = item.assets;\r",
											"        // console.log (assets);\r",
											"            pm.expect(item).to.have.property('name');\r",
											"            names.push(item.name);\r",
											"\r",
											"    });\r",
											"\r",
											"    //     pm.expect(collectionIds).to.include.members(allowedCollections);\r",
											"});\r",
											"\r",
											"console.log(\"collectionIds = \" + collectionIds);\r",
											"\r",
											"pm.test(\"Response contains authorized collectionIds for this user\", function () {\r",
											"    jsonData.forEach(function (item) {\r",
											"        console.log(\"checking collectionId: \" + item.collectionId);\r",
											"        pm.expect(parseInt(item.collectionId)).to.be.oneOf(allowedCollections);\r",
											"    });\r",
											"});\r",
											"\r",
											"let collectionMatchString = pm.environment.get(\"collectionMatchString\");\r",
											"\r",
											"console.log(\"collection string = \" + collectionMatchString);\r",
											"var regex = new RegExp(collectionMatchString);\r",
											"\r",
											"pm.test(\"Response contains authorized collection names for this user\", function () {\r",
											"    names.forEach(function (name) {\r",
											"        console.log(\"checking name: \" + name);\r",
											"        pm.expect(name).to.match(regex);\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/collections?name={{collectionMatchString}}&elevate={{elevated}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections"
									],
									"query": [
										{
											"key": "name",
											"value": "{{collectionMatchString}}",
											"description": "Matches a string anywhere in the object name"
										},
										{
											"key": "workflow",
											"value": "<string>",
											"description": "Match Collections having a specific workflow.",
											"disabled": true
										},
										{
											"key": "elevate",
											"value": "{{elevated}}",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)"
										}
									]
								}
							},
							"response": [
								{
									"name": "CollectionProjected response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/collections?name=<string>&workflow=<string>&elevate=<boolean>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections"
											],
											"query": [
												{
													"key": "name",
													"value": "<string>"
												},
												{
													"key": "workflow",
													"value": "<string>"
												},
												{
													"key": "elevate",
													"value": "<boolean>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n {\n  \"collectionId\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"workflow\": \"<string>\",\n  \"metadata\": \"<object>\"\n },\n {\n  \"collectionId\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"workflow\": \"<string>\",\n  \"metadata\": \"<object>\"\n }\n]"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/collections?name=<string>&workflow=<string>&elevate=<boolean>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections"
											],
											"query": [
												{
													"key": "name",
													"value": "<string>"
												},
												{
													"key": "workflow",
													"value": "<string>"
												},
												{
													"key": "elevate",
													"value": "<boolean>"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "collections/{collectionId} - patch scrap collection with BAD USER",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7e919517-9862-4acf-9d22-14ea725130dd",
										"exec": [
											"\r",
											"pm.test(\"Status should be is 403 for request with invalid parameter\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Collection Z Patched\",\n  \"workflow\": \"continuous\",\n  \"metadata\": {\n  \"pocName\": \"poc2Patched\",\n  \"pocEmail\": \"pocEmail@email.com\",\n  \"pocPhone\": \"12342\",\n  \"reqRar\": true\n  },\n  \"grants\": [\n    {\n      \"userId\":\"2\",\n      \"accessLevel\": 4\n    \n    }\n  ]\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/collections/:collectionId?projection=assets&projection=stigs&elevate={{elevated}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":collectionId"
									],
									"query": [
										{
											"key": "projection",
											"value": "assets",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "stigs",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "elevate",
											"value": "{{elevated}}"
										}
									],
									"variable": [
										{
											"id": "24bb2968-695d-4b54-9a09-9a8908ee084a",
											"key": "collectionId",
											"value": "{{testCollectionScrap}}",
											"type": "string",
											"description": "(Required) A path parameter that indentifies a Collection"
										}
									]
								}
							},
							"response": [
								{
									"name": "CollectionProjected response",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"collectionId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"emassId\": \"<string>\",\n    \"pocName\": \"<string>\",\n    \"pocEmail\": \"<string>\",\n    \"pocPhone\": \"<string>\",\n    \"reqRar\": \"<boolean>\",\n    \"macCl\": \"<string>\",\n    \"assetIds\": [\n        \"<integer>\",\n        \"<integer>\"\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId?projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId"
											],
											"query": [
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "collectionId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"collectionId\": \"<integer>\",\n \"name\": \"<string>\",\n \"emassId\": \"<string>\",\n \"pocName\": \"<string>\",\n \"pocEmail\": \"<string>\",\n \"pocPhone\": \"<string>\",\n \"reqRar\": \"<boolean>\",\n \"macCl\": \"<string>\",\n \"assets\": [\n  {\n   \"assetId\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"dept\": \"<string>\"\n  },\n  {\n   \"assetId\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"dept\": \"<string>\"\n  }\n ],\n \"stigs\": [\n  {\n   \"benchmarkId\": \"<string>\",\n   \"title\": \"<string>\",\n   \"lastRevisionStr\": \"<string>\",\n   \"lastRevisionDate\": \"<string>\"\n  },\n  {\n   \"benchmarkId\": \"<string>\",\n   \"title\": \"<string>\",\n   \"lastRevisionStr\": \"<string>\",\n   \"lastRevisionDate\": \"<string>\"\n  }\n ]\n}"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"collectionId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"emassId\": \"<string>\",\n    \"pocName\": \"<string>\",\n    \"pocEmail\": \"<string>\",\n    \"pocPhone\": \"<string>\",\n    \"reqRar\": \"<boolean>\",\n    \"macCl\": \"<string>\",\n    \"assetIds\": [\n        \"<integer>\",\n        \"<integer>\"\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId?projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId"
											],
											"query": [
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "collectionId"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "collections/{collectionId} - patch with BAD PACKAGE",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c7b16906-4354-4ecd-8335-1fee77e7dc7d",
										"exec": [
											"\r",
											"pm.test(\"Status should be is 403 for request with invalid parameter\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"testCollectionPatched\",\n  \"workflow\": \"continuous\",\n  \"metadata\": {\n  \"pocName\": \"poc2Patched\",\n  \"pocEmail\": \"pocEmail@email.com\",\n  \"pocPhone\": \"12342\",\n  \"reqRar\": true\n  },\n  \"grants\": [\n    \n  ]\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/collections/:collectionId?projection=assets&projection=stigs&elevate={{elevated}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":collectionId"
									],
									"query": [
										{
											"key": "projection",
											"value": "assets",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "stigs",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "elevate",
											"value": "{{elevated}}"
										}
									],
									"variable": [
										{
											"id": "9b8b8620-11d7-43fc-b77a-51edb881a620",
											"key": "collectionId",
											"value": "2",
											"type": "string",
											"description": "(Required) A path parameter that indentifies a Collection"
										}
									]
								}
							},
							"response": [
								{
									"name": "CollectionProjected response",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"collectionId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"emassId\": \"<string>\",\n    \"pocName\": \"<string>\",\n    \"pocEmail\": \"<string>\",\n    \"pocPhone\": \"<string>\",\n    \"reqRar\": \"<boolean>\",\n    \"macCl\": \"<string>\",\n    \"assetIds\": [\n        \"<integer>\",\n        \"<integer>\"\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId?projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId"
											],
											"query": [
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "collectionId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"collectionId\": \"<integer>\",\n \"name\": \"<string>\",\n \"emassId\": \"<string>\",\n \"pocName\": \"<string>\",\n \"pocEmail\": \"<string>\",\n \"pocPhone\": \"<string>\",\n \"reqRar\": \"<boolean>\",\n \"macCl\": \"<string>\",\n \"assets\": [\n  {\n   \"assetId\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"dept\": \"<string>\"\n  },\n  {\n   \"assetId\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"dept\": \"<string>\"\n  }\n ],\n \"stigs\": [\n  {\n   \"benchmarkId\": \"<string>\",\n   \"title\": \"<string>\",\n   \"lastRevisionStr\": \"<string>\",\n   \"lastRevisionDate\": \"<string>\"\n  },\n  {\n   \"benchmarkId\": \"<string>\",\n   \"title\": \"<string>\",\n   \"lastRevisionStr\": \"<string>\",\n   \"lastRevisionDate\": \"<string>\"\n  }\n ]\n}"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"collectionId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"emassId\": \"<string>\",\n    \"pocName\": \"<string>\",\n    \"pocEmail\": \"<string>\",\n    \"pocPhone\": \"<string>\",\n    \"reqRar\": \"<boolean>\",\n    \"macCl\": \"<string>\",\n    \"assetIds\": [\n        \"<integer>\",\n        \"<integer>\"\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId?projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId"
											],
											"query": [
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "collectionId"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "collections/{collectionId} - patch in lvl 4 grant",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f15fc332-bb8d-4cdc-b24b-52e7d2a9c063",
										"exec": [
											"\r",
											"pm.test(\"Status should be is 403 for request with invalid parameter\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"testCollectionPatched\",\n  \"workflow\": \"continuous\",\n  \"metadata\": {\n  \"pocName\": \"poc2Patched\",\n  \"pocEmail\": \"pocEmail@email.com\",\n  \"pocPhone\": \"12342\",\n  \"reqRar\": true\n  },\n  \"grants\": [\n  {\n    \"userId\": \"1\",\n    \"accessLevel\": 3\n  }\n  ]\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/collections/:collectionId?projection=assets&projection=stigs&elevate=false&projection=grants",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":collectionId"
									],
									"query": [
										{
											"key": "projection",
											"value": "assets",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "stigs",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "elevate",
											"value": "false"
										},
										{
											"key": "projection",
											"value": "grants"
										}
									],
									"variable": [
										{
											"key": "collectionId",
											"value": "1",
											"type": "string",
											"description": "(Required) A path parameter that indentifies a Collection"
										}
									]
								}
							},
							"response": [
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"collectionId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"emassId\": \"<string>\",\n    \"pocName\": \"<string>\",\n    \"pocEmail\": \"<string>\",\n    \"pocPhone\": \"<string>\",\n    \"reqRar\": \"<boolean>\",\n    \"macCl\": \"<string>\",\n    \"assetIds\": [\n        \"<integer>\",\n        \"<integer>\"\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId?projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId"
											],
											"query": [
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "collectionId"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
								},
								{
									"name": "CollectionProjected response",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"collectionId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"emassId\": \"<string>\",\n    \"pocName\": \"<string>\",\n    \"pocEmail\": \"<string>\",\n    \"pocPhone\": \"<string>\",\n    \"reqRar\": \"<boolean>\",\n    \"macCl\": \"<string>\",\n    \"assetIds\": [\n        \"<integer>\",\n        \"<integer>\"\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId?projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId"
											],
											"query": [
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "collectionId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"collectionId\": \"<integer>\",\n \"name\": \"<string>\",\n \"emassId\": \"<string>\",\n \"pocName\": \"<string>\",\n \"pocEmail\": \"<string>\",\n \"pocPhone\": \"<string>\",\n \"reqRar\": \"<boolean>\",\n \"macCl\": \"<string>\",\n \"assets\": [\n  {\n   \"assetId\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"dept\": \"<string>\"\n  },\n  {\n   \"assetId\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"dept\": \"<string>\"\n  }\n ],\n \"stigs\": [\n  {\n   \"benchmarkId\": \"<string>\",\n   \"title\": \"<string>\",\n   \"lastRevisionStr\": \"<string>\",\n   \"lastRevisionDate\": \"<string>\"\n  },\n  {\n   \"benchmarkId\": \"<string>\",\n   \"title\": \"<string>\",\n   \"lastRevisionStr\": \"<string>\",\n   \"lastRevisionDate\": \"<string>\"\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "Collection - delete ELEVATED (pkg cleanup request)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ce1253f1-aae7-43da-be10-d167c154737a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{token.admin}}",
											"type": "string"
										},
										{
											"key": "tokenType",
											"value": "bearer",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/collections/:collectionId?projection=assets&projection=stigs&elevate=true&projection=grants",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":collectionId"
									],
									"query": [
										{
											"key": "projection",
											"value": "assets",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "stigs",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "elevate",
											"value": "true"
										},
										{
											"key": "projection",
											"value": "grants"
										}
									],
									"variable": [
										{
											"id": "ff3de131-31f9-41be-abc3-d485d252c3e6",
											"key": "collectionId",
											"value": "{{createdCollection}}",
											"type": "string"
										}
									]
								}
							},
							"response": [
								{
									"name": "CollectionProjected response",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId?projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId"
											],
											"query": [
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "collectionId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"collectionId\": \"<integer>\",\n \"name\": \"<string>\",\n \"emassId\": \"<string>\",\n \"pocName\": \"<string>\",\n \"pocEmail\": \"<string>\",\n \"pocPhone\": \"<string>\",\n \"reqRar\": \"<boolean>\",\n \"macCl\": \"<string>\",\n \"assets\": [\n  {\n   \"assetId\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"dept\": \"<string>\"\n  },\n  {\n   \"assetId\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"dept\": \"<string>\"\n  }\n ],\n \"stigs\": [\n  {\n   \"benchmarkId\": \"<string>\",\n   \"title\": \"<string>\",\n   \"lastRevisionStr\": \"<string>\",\n   \"lastRevisionDate\": \"<string>\"\n  },\n  {\n   \"benchmarkId\": \"<string>\",\n   \"title\": \"<string>\",\n   \"lastRevisionStr\": \"<string>\",\n   \"lastRevisionDate\": \"<string>\"\n  }\n ]\n}"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId?projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId"
											],
											"query": [
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "collectionId"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Collections - get -",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f2a1322f-72ac-4c31-95d8-3b7883d0e807",
								"exec": [
									"let user = pm.environment.get(\"user\");\r",
									"console.log(\"user: \" + user);\r",
									"if (user == \"wf10\") {\r",
									"    pm.test(\"Status should be is 403 for user wf10\", function () {\r",
									"        pm.response.to.have.status(403);\r",
									"    });\r",
									"    return;\r",
									"}\r",
									"else {\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"}\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
									"    user = \"elevated\";\r",
									"}\r",
									"\r",
									"\r",
									"let allowedCollections, disallowedCollections, validStigs, invalidStigs, validAssets, invalidAssets;\r",
									"\r",
									"console.log(\"building valid assignments lists\");\r",
									"\r",
									"allowedCollections = JSON.parse(pm.environment.get((\"collections.valid\")));\r",
									"console.log(\"user is \" + user);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Response JSON is an array\", function () {\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"});\r",
									"\r",
									"let collectionIds = [];\r",
									"let names = [];\r",
									"let stigIds = [];\r",
									"pm.test(\"Each item in response has proper properties\", function () {\r",
									"    jsonData.forEach(function (item) {\r",
									"        pm.expect(item).to.have.property('collectionId');\r",
									"        collectionIds.push(item.collectionId);\r",
									"        // console.log (item.assets);\r",
									"        // let assets = [];\r",
									"        // assets = item.assets;\r",
									"        // console.log (assets);\r",
									"            pm.expect(item).to.have.property('name');\r",
									"            names.push(item.name);\r",
									"\r",
									"    });\r",
									"\r",
									"    //     pm.expect(collectionIds).to.include.members(allowedCollections);\r",
									"});\r",
									"\r",
									"console.log(\"collectionIds = \" + collectionIds);\r",
									"\r",
									"pm.test(\"Response contains authorized collectionIds for this user\", function () {\r",
									"    jsonData.forEach(function (item) {\r",
									"        console.log(\"checking collectionId: \" + item.collectionId);\r",
									"        pm.expect(parseInt(item.collectionId)).to.be.oneOf(allowedCollections);\r",
									"    });\r",
									"});\r",
									"\r",
									"let collectionMatchString = pm.environment.get(\"collectionMatchString\");\r",
									"\r",
									"console.log(\"collection string = \" + collectionMatchString);\r",
									"var regex = new RegExp(collectionMatchString);\r",
									"\r",
									"pm.test(\"Response contains authorized collection names for this user\", function () {\r",
									"    names.forEach(function (name) {\r",
									"        console.log(\"checking name: \" + name);\r",
									"        pm.expect(name).to.match(regex);\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1dbfbeff-0190-4ffd-b734-4373398178e2",
								"exec": [
									"// pm.environment.set(\"user\", \"admin\");",
									"// var user = pm.environment.get(\"user\");",
									"// let token = pm.environment.get(\"token.\" + user)",
									"// pm.environment.set(\"token\", token);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/collections?elevate={{elevated}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"collections"
							],
							"query": [
								{
									"key": "elevate",
									"value": "{{elevated}}"
								},
								{
									"key": "workflow",
									"value": "{{workflow}}",
									"disabled": true
								},
								{
									"key": "name",
									"value": "{{collectionSearchString}}",
									"disabled": true
								}
							]
						}
					},
					"response": [
						{
							"name": "unexpected error",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/collections?elevate=<boolean>&projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections"
									],
									"query": [
										{
											"key": "elevate",
											"value": "<boolean>"
										},
										{
											"key": "projection",
											"value": "<string>"
										},
										{
											"key": "projection",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
						},
						{
							"name": "Collections - no params",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/collections",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Date",
									"value": "Wed, 15 Apr 2020 02:52:21 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"collectionId\": 21,\n        \"name\": \"Code 60 Collection\",\n        \"emassId\": \"none\",\n        \"pocName\": \"W. E. Coyote\",\n        \"pocEmail\": \"coyote@navy.mil\",\n        \"pocPhone\": \"555-1212\",\n        \"reqRar\": false\n    },\n    {\n        \"collectionId\": 1,\n        \"name\": \"STAR Collection\",\n        \"emassId\": \"none\",\n        \"pocName\": \"Bob\",\n        \"pocEmail\": \"bob@navy.mil\",\n        \"pocPhone\": \"555-1212\",\n        \"reqRar\": false\n    },\n    {\n        \"collectionId\": 62,\n        \"name\": \"Twine\",\n        \"emassId\": null,\n        \"pocName\": null,\n        \"pocEmail\": null,\n        \"pocPhone\": null,\n        \"reqRar\": false\n    }\n]"
						},
						{
							"name": "Collections - Admin- no params",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/collections",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Cache-control",
									"value": "no-store"
								},
								{
									"key": "Date",
									"value": "Tue, 28 Apr 2020 20:27:24 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"collectionId\": 21,\n        \"name\": \"Code 60 Collection\",\n        \"emassId\": \"none\",\n        \"pocName\": \"W. E. Coyote\",\n        \"pocEmail\": \"coyote@navy.mil\",\n        \"pocPhone\": \"555-1212\",\n        \"reqRar\": false\n    },\n    {\n        \"collectionId\": 1,\n        \"name\": \"STAR Collection\",\n        \"emassId\": \"none\",\n        \"pocName\": \"Bob\",\n        \"pocEmail\": \"bob@navy.mil\",\n        \"pocPhone\": \"555-1212\",\n        \"reqRar\": false\n    },\n    {\n        \"collectionId\": 62,\n        \"name\": \"Twine\",\n        \"emassId\": null,\n        \"pocName\": null,\n        \"pocEmail\": null,\n        \"pocPhone\": null,\n        \"reqRar\": false\n    }\n]"
						},
						{
							"name": "Return a list of Collections accessible to the requester",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/collections?elevate=<boolean>&projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections"
									],
									"query": [
										{
											"key": "elevate",
											"value": "<boolean>",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)"
										},
										{
											"key": "projection",
											"value": "<string>",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "<string>",
											"description": "Additional properties to include in the response.\n"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Date",
									"value": "Tue, 14 Apr 2020 20:14:16 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"collectionId\": 21,\n        \"name\": \"Code 60 Collection\",\n        \"emassId\": \"none\",\n        \"pocName\": \"W. E. Coyote\",\n        \"pocEmail\": \"coyote@navy.mil\",\n        \"pocPhone\": \"555-1212\",\n        \"reqRar\": false\n    },\n    {\n        \"collectionId\": 1,\n        \"name\": \"STAR Collection\",\n        \"emassId\": \"none\",\n        \"pocName\": \"Bob\",\n        \"pocEmail\": \"bob@navy.mil\",\n        \"pocPhone\": \"555-1212\",\n        \"reqRar\": false\n    },\n    {\n        \"collectionId\": 62,\n        \"name\": \"Twine\",\n        \"emassId\": null,\n        \"pocName\": null,\n        \"pocEmail\": null,\n        \"pocPhone\": null,\n        \"reqRar\": false\n    }\n]"
						},
						{
							"name": "CollectionProjected response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/collections?elevate=<boolean>&projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections"
									],
									"query": [
										{
											"key": "elevate",
											"value": "<boolean>"
										},
										{
											"key": "projection",
											"value": "<string>"
										},
										{
											"key": "projection",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"collectionId\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"emassId\": \"<string>\",\n  \"pocName\": \"<string>\",\n  \"pocEmail\": \"<string>\",\n  \"pocPhone\": \"<string>\",\n  \"reqRar\": \"<boolean>\",\n  \"assets\": [\n   {\n    \"assetId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"dept\": \"<string>\"\n   },\n   {\n    \"assetId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"dept\": \"<string>\"\n   }\n  ],\n  \"stigs\": [\n   {\n    \"benchmarkId\": \"<string>\",\n    \"title\": \"<string>\",\n    \"lastRevisionStr\": \"<string>\",\n    \"lastRevisionDate\": \"<string>\"\n   },\n   {\n    \"benchmarkId\": \"<string>\",\n    \"title\": \"<string>\",\n    \"lastRevisionStr\": \"<string>\",\n    \"lastRevisionDate\": \"<string>\"\n   }\n  ]\n },\n {\n  \"collectionId\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"emassId\": \"<string>\",\n  \"pocName\": \"<string>\",\n  \"pocEmail\": \"<string>\",\n  \"pocPhone\": \"<string>\",\n  \"reqRar\": \"<boolean>\",\n  \"assets\": [\n   {\n    \"assetId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"dept\": \"<string>\"\n   },\n   {\n    \"assetId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"dept\": \"<string>\"\n   }\n  ],\n  \"stigs\": [\n   {\n    \"benchmarkId\": \"<string>\",\n    \"title\": \"<string>\",\n    \"lastRevisionStr\": \"<string>\",\n    \"lastRevisionDate\": \"<string>\"\n   },\n   {\n    \"benchmarkId\": \"<string>\",\n    \"title\": \"<string>\",\n    \"lastRevisionStr\": \"<string>\",\n    \"lastRevisionDate\": \"<string>\"\n   }\n  ]\n }\n]"
						}
					]
				},
				{
					"name": "collections/{collectionId} - get",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8f410caf-218e-42b1-898a-776bf40359c7",
								"exec": [
									"let user = pm.environment.get(\"user\");",
									"console.log(\"user: \" + user);",
									"if (user == \"collectionCreator\") {",
									"    pm.test(\"Status should be is 403 for user wf10\", function () {",
									"        pm.response.to.have.status(403);",
									"    });",
									"    return;",
									"}",
									"else {",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"}",
									"",
									"let jsonData = pm.response.json();",
									"",
									"let elevated = pm.environment.get(\"elevated\");",
									"console.log(\"user: \" + user);",
									"if (pm.request.url.getQueryString().match(/elevate=true/)) {",
									"    user = \"elevated\";",
									"}",
									"",
									"",
									"// var stuff = pm.request.auth;",
									"// console.log(stuff);",
									"// var stuff = pm.request;",
									"// console.log(stuff);",
									"",
									"//console.log(jsonData);",
									"// pm.test(\"Your test name (fail)\", function () {",
									"//     pm.expect(jsonData.value).to.eql(100);",
									"// });",
									"",
									"// pm.test(\"environment: stig-manager localhost collections\", function () {",
									"//     pm.expect(pm.environment.get(\"env\")).to.equal(\"stig-manager localhost collections\");",
									"// });",
									"",
									"console.log(jsonData);",
									"// console.log(pm.environment.get(\"env\"));",
									"",
									"pm.test(\"Response JSON is an object\", function () {",
									"    pm.expect(jsonData).to.be.an('object');",
									"});",
									"",
									"// let testCollection = JSON.parse(pm.environment.get((\"testCollection\")));",
									"// pm.test(\"Response JSON is an object with collectionId\", function () {",
									"//     pm.expect(jsonData).to.have.deep.property('collectionId', testCollection);",
									"// });",
									"",
									"let allowedCollections, disallowedCollections, validStigs, invalidStigs, validAssets, invalidAssets;",
									"console.log(\"assignments\");",
									"validStigs = JSON.parse(pm.environment.get(\"stigs.valid\"));",
									"// validAssets = JSON.parse(pm.environment.get(\"assets.valid\"));",
									"console.log(\"user is \" + user);",
									"",
									"",
									"let collectionIds = [];",
									"let assetIds = [];",
									"let assetNames = [];",
									"let stigIds = [];",
									"pm.test(\"Each item in response has collectionId\", function () {",
									"    pm.expect(jsonData).to.have.property('collectionId');",
									"    collectionIds.push(jsonData.collectionId);",
									"    jsonData.assets.forEach(function (asset) {",
									"        pm.expect(asset).to.have.property('assetId');",
									"        assetIds.push(asset.assetId);",
									"        pm.expect(asset).to.have.property('name');",
									"        assetNames.push(asset.name);",
									"    });",
									"    jsonData.stigs.forEach(function (stig) {",
									"        pm.expect(stig).to.have.property('benchmarkId');",
									"        stigIds.push(stig.benchmarkId);",
									"    });",
									"    // pm.expect(collectionIds).to.include.oneOf(allowedCollections);",
									"});",
									"",
									"console.log(\"collectionIds = \" + collectionIds);",
									"",
									"// pm.test(\"Response contains VALID collectionIds for this user\", function () {",
									"//     // jsonData.forEach( function (item) {",
									"//     // console.log(\"checking collectionId: \" + item.collectionId);",
									"//     pm.expect(jsonData.collectionId).to.be.oneOf(allowedCollections);",
									"//     // });",
									"// });",
									"",
									"",
									"",
									"",
									"let assetMatchString = pm.environment.get(\"assetMatchString\");",
									"",
									"console.log(\"asset string = \" + assetMatchString);",
									"var regex = new RegExp(assetMatchString);",
									"",
									"pm.test(\"Response contains authorized asset names for this user\", function () {",
									"    assetNames.forEach(function (name) {",
									"        console.log(\"checking name: \" + name);",
									"        pm.expect(name).to.match(regex);",
									"    });",
									"});",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"// pm.test(\"Response does NOT contain INvalid collectionIds for this user\", function () {",
									"//     // jsonData.forEach( function (item) {",
									"//     // console.log(\"checking collectionId: \" + item.collectionId);",
									"//     pm.expect(jsonData.collectionId).to.not.be.oneOf(disallowedCollections);",
									"//     // });",
									"// });",
									"",
									"",
									"// if (user == \"wf60\" || user == \"officer60\") {",
									"//     pm.test(\"Response contains valid projection data (assets)\", function () {",
									"//         assetIds.forEach(function (assetId) {",
									"//             pm.expect(assetId).to.be.oneOf(validAssets);",
									"//             console.log(\"checking assetId: \" + assetId);",
									"//         });",
									"//     });",
									"",
									"//     pm.test(\"Response contains valid projection data (stigs)\", function () {",
									"//         stigIds.forEach(function (stigId) {",
									"//             pm.expect(stigId).to.be.oneOf(validStigs);",
									"//             console.log(\"checking stigId: \" + stigId);",
									"//         });",
									"//     });",
									"// }",
									"",
									"// if (user == \"wf60\" || user == \"officer60\") {",
									"//     pm.test(\"checking collection assets returned\", function () {",
									"//         jsonData.assets.forEach(function (item) {",
									"//             console.log(\"checking assetId: \" + item.assetId);",
									"//             pm.expect(item.assetId).to.be.oneOf(validAssets);",
									"//         });",
									"//         // pm.expect(jsonData.assets).to.deep.include({collectionId:21});",
									"//     });",
									"",
									"// }",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/collections/:collectionId?projection=assets&projection=stigs&elevate={{elevated}}&projection=grants",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"collections",
								":collectionId"
							],
							"query": [
								{
									"key": "projection",
									"value": "assets"
								},
								{
									"key": "projection",
									"value": "stigs"
								},
								{
									"key": "elevate",
									"value": "{{elevated}}"
								},
								{
									"key": "projection",
									"value": "grants"
								},
								{
									"key": "elevate",
									"value": "false",
									"disabled": true
								}
							],
							"variable": [
								{
									"id": "89728a72-4862-4650-8a54-5027fc9aceeb",
									"key": "collectionId",
									"value": "{{testCollection}}",
									"type": "string"
								}
							]
						}
					},
					"response": [
						{
							"name": "CollectionProjected response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/collections/:collectionId?elevate=<boolean>&projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":collectionId"
									],
									"query": [
										{
											"key": "elevate",
											"value": "<boolean>"
										},
										{
											"key": "projection",
											"value": "<string>"
										},
										{
											"key": "projection",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "collectionId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"collectionId\": \"<integer>\",\n \"name\": \"<string>\",\n \"emassId\": \"<string>\",\n \"pocName\": \"<string>\",\n \"pocEmail\": \"<string>\",\n \"pocPhone\": \"<string>\",\n \"reqRar\": \"<boolean>\",\n \"macCl\": \"<string>\",\n \"assets\": [\n  {\n   \"assetId\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"dept\": \"<string>\"\n  },\n  {\n   \"assetId\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"dept\": \"<string>\"\n  }\n ],\n \"stigs\": [\n  {\n   \"benchmarkId\": \"<string>\",\n   \"title\": \"<string>\",\n   \"lastRevisionStr\": \"<string>\",\n   \"lastRevisionDate\": \"<string>\"\n  },\n  {\n   \"benchmarkId\": \"<string>\",\n   \"title\": \"<string>\",\n   \"lastRevisionStr\": \"<string>\",\n   \"lastRevisionDate\": \"<string>\"\n  }\n ]\n}"
						},
						{
							"name": "unexpected error",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/collections/:collectionId?elevate=<boolean>&projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":collectionId"
									],
									"query": [
										{
											"key": "elevate",
											"value": "<boolean>"
										},
										{
											"key": "projection",
											"value": "<string>"
										},
										{
											"key": "projection",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "collectionId"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "Collections - post",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "be51df80-b25a-4caf-8682-eac3389883cf",
								"exec": [
									"let user = pm.environment.get(\"user\");",
									"console.log(\"user: \" + user);",
									"if (user == \"wf10\") {",
									"    pm.test(\"Status should be is 403 for user wf10\", function () {",
									"        pm.response.to.have.status(403);",
									"    });",
									"    return;",
									"}",
									"",
									"if (pm.request.url.getQueryString().match(/elevate=true/)) {",
									"    user = \"elevated\";",
									"    console.log(\"user is elevated\");",
									"",
									"}",
									"",
									"",
									"var stuff = pm.request.auth;",
									"var stuff = pm.request;",
									"",
									"if (user == 'elevated' || user == 'collectionCreator') {",
									"    pm.test(\"User is elevated or collectionCreator. Status code is 201\", function () {",
									"        pm.response.to.have.status(201);",
									"    });",
									"}",
									"else {",
									"    pm.test(\"User is not collectionCreator or elevated. Expected status code is 403\", function () {",
									"        pm.response.to.have.status(403);",
									"    });",
									"    return;",
									"}",
									"",
									"if (pm.response.code == 500) {",
									"    console.log(\"Server returned 500\")",
									"    return;",
									"}",
									"",
									"var jsonData = pm.response.json();",
									"",
									"",
									"",
									"pm.test(\"Response JSON is an object\", function () {",
									"    pm.expect(jsonData).to.be.an('object');",
									"});",
									"",
									"let createdCollection = jsonData.collectionId;",
									"if (createdCollection === undefined) {",
									"    console.log(\"Did not create collection. Setting to dummy value: \" + createdCollection)",
									"    pm.environment.set(\"createdCollection\", 2);",
									"    return;",
									"}",
									"console.log(\"created collection: \" + createdCollection)",
									"pm.environment.set(\"createdCollection\", createdCollection);",
									"",
									"pm.test(`Created Collection: ${createdCollection}`, function () {",
									"    pm.expect(createdCollection).to.be.an('string');",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"z_collectionTestCreate-1\",\r\n  \"description\": \"post test collection\",\r\n  \"workflow\": \"continuous\",\r\n  \"metadata\": {\r\n  \"pocName\": \"poc2\",\r\n  \"pocEmail\": \"pocEmail@email.com\",\r\n  \"pocPhone\": \"12342\",\r\n  \"reqRar\": true\r\n  },\r\n  \"grants\": [\r\n      {\r\n    \"userId\": \"1\",\r\n    \"accessLevel\": 4\r\n  },\r\n  {\r\n    \"userId\": \"82\",\r\n    \"accessLevel\": 4\r\n  }\r\n  ]\r\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/collections?projection=assets&projection=stigs&elevate={{elevated}}&projection=grants",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"collections"
							],
							"query": [
								{
									"key": "projection",
									"value": "assets"
								},
								{
									"key": "projection",
									"value": "stigs"
								},
								{
									"key": "elevate",
									"value": "{{elevated}}"
								},
								{
									"key": "projection",
									"value": "grants"
								}
							]
						}
					},
					"response": [
						{
							"name": "unexpected error",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"collectionId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"emassId\": \"<string>\",\n    \"pocName\": \"<string>\",\n    \"pocEmail\": \"<string>\",\n    \"pocPhone\": \"<string>\",\n    \"reqRar\": \"<boolean>\",\n    \"macCl\": \"<string>\",\n    \"assetIds\": [\n        \"<integer>\",\n        \"<integer>\"\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/collections?projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections"
									],
									"query": [
										{
											"key": "projection",
											"value": "<string>"
										},
										{
											"key": "projection",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
						},
						{
							"name": "CollectionProjected response",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"collectionId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"emassId\": \"<string>\",\n    \"pocName\": \"<string>\",\n    \"pocEmail\": \"<string>\",\n    \"pocPhone\": \"<string>\",\n    \"reqRar\": \"<boolean>\",\n    \"macCl\": \"<string>\",\n    \"assetIds\": [\n        \"<integer>\",\n        \"<integer>\"\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/collections?projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections"
									],
									"query": [
										{
											"key": "projection",
											"value": "<string>"
										},
										{
											"key": "projection",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"collectionId\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"emassId\": \"<string>\",\n  \"pocName\": \"<string>\",\n  \"pocEmail\": \"<string>\",\n  \"pocPhone\": \"<string>\",\n  \"reqRar\": \"<boolean>\",\n  \"macCl\": \"<string>\",\n  \"assets\": [\n   {\n    \"assetId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"dept\": \"<string>\"\n   },\n   {\n    \"assetId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"dept\": \"<string>\"\n   }\n  ],\n  \"stigs\": [\n   {\n    \"benchmarkId\": \"<string>\",\n    \"title\": \"<string>\",\n    \"lastRevisionStr\": \"<string>\",\n    \"lastRevisionDate\": \"<string>\"\n   },\n   {\n    \"benchmarkId\": \"<string>\",\n    \"title\": \"<string>\",\n    \"lastRevisionStr\": \"<string>\",\n    \"lastRevisionDate\": \"<string>\"\n   }\n  ]\n },\n {\n  \"collectionId\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"emassId\": \"<string>\",\n  \"pocName\": \"<string>\",\n  \"pocEmail\": \"<string>\",\n  \"pocPhone\": \"<string>\",\n  \"reqRar\": \"<boolean>\",\n  \"macCl\": \"<string>\",\n  \"assets\": [\n   {\n    \"assetId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"dept\": \"<string>\"\n   },\n   {\n    \"assetId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"dept\": \"<string>\"\n   }\n  ],\n  \"stigs\": [\n   {\n    \"benchmarkId\": \"<string>\",\n    \"title\": \"<string>\",\n    \"lastRevisionStr\": \"<string>\",\n    \"lastRevisionDate\": \"<string>\"\n   },\n   {\n    \"benchmarkId\": \"<string>\",\n    \"title\": \"<string>\",\n    \"lastRevisionStr\": \"<string>\",\n    \"lastRevisionDate\": \"<string>\"\n   }\n  ]\n }\n]"
						}
					]
				},
				{
					"name": "Collection - delete - uses lvl4 grant from created collection or elevation",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0474bece-77ac-4a61-aeef-e2569b550180",
								"exec": [
									"",
									"let user = pm.environment.get(\"user\");",
									"console.log(\"user: \" + user);",
									"",
									"",
									"if (pm.request.url.getQueryString().match(/elevate=true/)) {",
									"    user = \"elevated\";",
									"}",
									"",
									"",
									"if (user == \"elevated\" || user == \"collectionCreator\") {",
									"     pm.test(\"Status code should be 200 for pacakgeCreator or elevated. collectionCreator sets self as lvl4 for created collections\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"        ",
									"}",
									"else{",
									"    pm.test(\"Status code should be 403\", function () {",
									"        pm.response.to.have.status(403);",
									"    });",
									"    console.log(`Status code: ${pm.response.code}. Either previous test did not create the collection, the collection has already been deleted, or this user is not authorized to delete this collection.`);",
									"    return;",
									"}",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"console.log(jsonData);",
									"// console.log(pm.environment.get(\"env\"));",
									"",
									"pm.test(\"Response is an array with one JSON object\", function () {",
									"    pm.expect(jsonData).to.be.an('object');",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/collections/:collectionId?projection=assets&projection=stigs&elevate={{elevated}}&projection=grants",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"collections",
								":collectionId"
							],
							"query": [
								{
									"key": "projection",
									"value": "assets",
									"description": "Additional properties to include in the response.\n"
								},
								{
									"key": "projection",
									"value": "stigs",
									"description": "Additional properties to include in the response.\n"
								},
								{
									"key": "elevate",
									"value": "{{elevated}}"
								},
								{
									"key": "projection",
									"value": "grants"
								}
							],
							"variable": [
								{
									"id": "ee2d18ba-15a3-4b19-8c20-310657a47a3d",
									"key": "collectionId",
									"value": "{{createdCollection}}",
									"type": "string"
								}
							]
						}
					},
					"response": [
						{
							"name": "CollectionProjected response",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/collections/:collectionId?projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":collectionId"
									],
									"query": [
										{
											"key": "projection",
											"value": "<string>"
										},
										{
											"key": "projection",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "collectionId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"collectionId\": \"<integer>\",\n \"name\": \"<string>\",\n \"emassId\": \"<string>\",\n \"pocName\": \"<string>\",\n \"pocEmail\": \"<string>\",\n \"pocPhone\": \"<string>\",\n \"reqRar\": \"<boolean>\",\n \"macCl\": \"<string>\",\n \"assets\": [\n  {\n   \"assetId\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"dept\": \"<string>\"\n  },\n  {\n   \"assetId\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"dept\": \"<string>\"\n  }\n ],\n \"stigs\": [\n  {\n   \"benchmarkId\": \"<string>\",\n   \"title\": \"<string>\",\n   \"lastRevisionStr\": \"<string>\",\n   \"lastRevisionDate\": \"<string>\"\n  },\n  {\n   \"benchmarkId\": \"<string>\",\n   \"title\": \"<string>\",\n   \"lastRevisionStr\": \"<string>\",\n   \"lastRevisionDate\": \"<string>\"\n  }\n ]\n}"
						},
						{
							"name": "unexpected error",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/collections/:collectionId?projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":collectionId"
									],
									"query": [
										{
											"key": "projection",
											"value": "<string>"
										},
										{
											"key": "projection",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "collectionId"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "collections/{collectionId} - patch",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "74a695a9-b668-4254-a39c-4e14e192b7eb",
								"exec": [
									"let user = pm.environment.get(\"user\");\r",
									"console.log(\"user: \" + user);\r",
									"if (user == \"wf10\") {\r",
									"    pm.test(\"Status should be is 403 for user wf10\", function () {\r",
									"        pm.response.to.have.status(403);\r",
									"    });\r",
									"    return;\r",
									"}\r",
									"\r",
									"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
									"    user = \"elevated\";\r",
									"    console.log(\"user is elevated\");\r",
									"\r",
									"}\r",
									"\r",
									"if (user == 'elevated' || user == 'lvl3' || user == \"lvl4\") {\r",
									"    pm.test(\"User is elevated or Staff. Status code should be 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"}\r",
									"else {\r",
									"    pm.test(\"User is not Staff or elevated. Expected status code is 403\", function () {\r",
									"        pm.response.to.have.status(403);\r",
									"    });\r",
									"    return;\r",
									"}\r",
									"\r",
									"if (pm.response.code == 500) {\r",
									"    console.log(\"Server returned 500\")\r",
									"    return;\r",
									"}\r",
									"\r",
									"let createdCollection = pm.environment.get(\"createdCollection\");\r",
									"if (createdCollection === undefined) {\r",
									"    return;\r",
									"}\r",
									"\r",
									"if (pm.response.code == 204) {\r",
									"    console.log(\"Server returned 204 No Content\")\r",
									"    return;\r",
									"}\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"//console.log(jsonData);\r",
									"// pm.test(\"Your test name (fail)\", function () {\r",
									"//     pm.expect(jsonData.value).to.eql(100);\r",
									"// });\r",
									"\r",
									"\r",
									"pm.test(\"Response JSON is an object\", function () {\r",
									"    pm.expect(jsonData).to.be.an('object');\r",
									"});\r",
									"\r",
									"let patchedCollection = jsonData.collectionId;\r",
									"// console.log(\"created collection: \" + createdCollection)\r",
									"// pm.environment.set(\"createdCollection\", createdCollection);\r",
									"\r",
									"pm.test(`Patched Collection: ${patchedCollection}`, function () {\r",
									"    pm.expect(patchedCollection).to.be.an('string');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Collection X\",\n  \"workflow\": \"continuous\",\n  \"metadata\": {\n  \"pocName\": \"poc2Patched\",\n  \"pocEmail\": \"pocEmail@email.com\",\n  \"pocPhone\": \"12342\",\n  \"reqRar\": true\n  },\n    \"grants\": [\n        {\n          \"userId\": \"85\",\n          \"accessLevel\": 1\n        },\n        {\n                \"userId\": \"21\",\n            \"accessLevel\": 2\n        },\n        {\n                \"userId\": \"44\",\n            \"accessLevel\": 3\n        },\n        {\n                \"userId\": \"45\",\n            \"accessLevel\": 4\n        }\n    ]\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/collections/:collectionId?projection=assets&projection=stigs&elevate={{elevated}}&projection=grants",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"collections",
								":collectionId"
							],
							"query": [
								{
									"key": "projection",
									"value": "assets"
								},
								{
									"key": "projection",
									"value": "stigs"
								},
								{
									"key": "elevate",
									"value": "{{elevated}}"
								},
								{
									"key": "projection",
									"value": "grants"
								}
							],
							"variable": [
								{
									"id": "04196ed1-7239-4957-b55e-844bd78ba147",
									"key": "collectionId",
									"value": "{{testCollection}}",
									"type": "string"
								}
							]
						}
					},
					"response": [
						{
							"name": "unexpected error",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"collectionId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"emassId\": \"<string>\",\n    \"pocName\": \"<string>\",\n    \"pocEmail\": \"<string>\",\n    \"pocPhone\": \"<string>\",\n    \"reqRar\": \"<boolean>\",\n    \"macCl\": \"<string>\",\n    \"assetIds\": [\n        \"<integer>\",\n        \"<integer>\"\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/collections/:collectionId?projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":collectionId"
									],
									"query": [
										{
											"key": "projection",
											"value": "<string>"
										},
										{
											"key": "projection",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "collectionId"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
						},
						{
							"name": "CollectionProjected response",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"collectionId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"emassId\": \"<string>\",\n    \"pocName\": \"<string>\",\n    \"pocEmail\": \"<string>\",\n    \"pocPhone\": \"<string>\",\n    \"reqRar\": \"<boolean>\",\n    \"macCl\": \"<string>\",\n    \"assetIds\": [\n        \"<integer>\",\n        \"<integer>\"\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/collections/:collectionId?projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":collectionId"
									],
									"query": [
										{
											"key": "projection",
											"value": "<string>"
										},
										{
											"key": "projection",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "collectionId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"collectionId\": \"<integer>\",\n \"name\": \"<string>\",\n \"emassId\": \"<string>\",\n \"pocName\": \"<string>\",\n \"pocEmail\": \"<string>\",\n \"pocPhone\": \"<string>\",\n \"reqRar\": \"<boolean>\",\n \"macCl\": \"<string>\",\n \"assets\": [\n  {\n   \"assetId\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"dept\": \"<string>\"\n  },\n  {\n   \"assetId\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"dept\": \"<string>\"\n  }\n ],\n \"stigs\": [\n  {\n   \"benchmarkId\": \"<string>\",\n   \"title\": \"<string>\",\n   \"lastRevisionStr\": \"<string>\",\n   \"lastRevisionDate\": \"<string>\"\n  },\n  {\n   \"benchmarkId\": \"<string>\",\n   \"title\": \"<string>\",\n   \"lastRevisionStr\": \"<string>\",\n   \"lastRevisionDate\": \"<string>\"\n  }\n ]\n}"
						}
					]
				},
				{
					"name": "collections/{collectionId} - put",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5c55d88a-45e2-4ec4-aa95-c69203dc6a7f",
								"exec": [
									"let user = pm.environment.get(\"user\");\r",
									"console.log(\"user: \" + user);\r",
									"if (user == \"wf10\") {\r",
									"    pm.test(\"Status should be is 403 for user wf10\", function () {\r",
									"        pm.response.to.have.status(403);\r",
									"    });\r",
									"    return;\r",
									"}\r",
									"\r",
									"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
									"    user = \"elevated\";\r",
									"    console.log(\"user is elevated\");\r",
									"\r",
									"}\r",
									"\r",
									"if (user == 'elevated' || user == 'lvl3' || user == 'lvl4') {\r",
									"    pm.test(\"User is elevated. Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"}\r",
									"else {\r",
									"    pm.test(\"User is not Staff or elevated. Expected status code is 403\", function () {\r",
									"        pm.response.to.have.status(403);\r",
									"    });\r",
									"    return;\r",
									"}\r",
									"\r",
									"if (pm.response.code == 500) {\r",
									"    console.log(\"Server returned 500\")\r",
									"    return;\r",
									"}\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"//console.log(jsonData);\r",
									"// pm.test(\"Your test name (fail)\", function () {\r",
									"//     pm.expect(jsonData.value).to.eql(100);\r",
									"// });\r",
									"\r",
									"\r",
									"pm.test(\"Response JSON is an object\", function () {\r",
									"    pm.expect(jsonData).to.be.an('object');\r",
									"});\r",
									"\r",
									"let putCollection = jsonData.collectionId;\r",
									"// console.log(\"created collection: \" + createdCollection)\r",
									"// pm.environment.set(\"createdCollection\", createdCollection);\r",
									"\r",
									"pm.test(`PUT Collection: ${putCollection}`, function () {\r",
									"    pm.expect(putCollection).to.be.an('string');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Collection X\",\r\n  \"description\": \"Collection X description\",\r\n  \"workflow\": \"continuous\",\r\n  \"metadata\": {\r\n  \"pocName\": \"poc2Put\",\r\n  \"pocEmail\": \"pocEmailPut@email.com\",\r\n  \"pocPhone\": \"12342\",\r\n  \"reqRar\": true\r\n  },\r\n    \"grants\": [\r\n        {\r\n          \"userId\": \"85\",\r\n          \"accessLevel\": 1\r\n        },\r\n        {\r\n                \"userId\": \"21\",\r\n            \"accessLevel\": 2\r\n        },\r\n        {\r\n                \"userId\": \"44\",\r\n            \"accessLevel\": 3\r\n        },\r\n        {\r\n                \"userId\": \"45\",\r\n            \"accessLevel\": 4\r\n        }\r\n    ]\r\n}\r\n",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/collections/:collectionId?projection=assets&projection=stigs&elevate={{elevated}}&projection=grants",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"collections",
								":collectionId"
							],
							"query": [
								{
									"key": "projection",
									"value": "assets",
									"description": "Additional properties to include in the response.\n"
								},
								{
									"key": "projection",
									"value": "stigs",
									"description": "Additional properties to include in the response.\n"
								},
								{
									"key": "elevate",
									"value": "{{elevated}}"
								},
								{
									"key": "projection",
									"value": "grants"
								}
							],
							"variable": [
								{
									"id": "19a5ef82-806b-47d7-870e-4457d60351da",
									"key": "collectionId",
									"value": "{{testCollection}}",
									"type": "string",
									"description": "(Required) A path parameter that indentifies a Collection"
								}
							]
						}
					},
					"response": [
						{
							"name": "unexpected error",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"collectionId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"emassId\": \"<string>\",\n    \"pocName\": \"<string>\",\n    \"pocEmail\": \"<string>\",\n    \"pocPhone\": \"<string>\",\n    \"reqRar\": \"<boolean>\",\n    \"macCl\": \"<string>\",\n    \"assetIds\": [\n        \"<integer>\",\n        \"<integer>\"\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/collections/:collectionId?projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":collectionId"
									],
									"query": [
										{
											"key": "projection",
											"value": "<string>"
										},
										{
											"key": "projection",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "collectionId"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
						},
						{
							"name": "CollectionProjected response",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"collectionId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"emassId\": \"<string>\",\n    \"pocName\": \"<string>\",\n    \"pocEmail\": \"<string>\",\n    \"pocPhone\": \"<string>\",\n    \"reqRar\": \"<boolean>\",\n    \"macCl\": \"<string>\",\n    \"assetIds\": [\n        \"<integer>\",\n        \"<integer>\"\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/collections/:collectionId?projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":collectionId"
									],
									"query": [
										{
											"key": "projection",
											"value": "<string>"
										},
										{
											"key": "projection",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "collectionId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"collectionId\": \"<integer>\",\n \"name\": \"<string>\",\n \"emassId\": \"<string>\",\n \"pocName\": \"<string>\",\n \"pocEmail\": \"<string>\",\n \"pocPhone\": \"<string>\",\n \"reqRar\": \"<boolean>\",\n \"macCl\": \"<string>\",\n \"assets\": [\n  {\n   \"assetId\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"dept\": \"<string>\"\n  },\n  {\n   \"assetId\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"dept\": \"<string>\"\n  }\n ],\n \"stigs\": [\n  {\n   \"benchmarkId\": \"<string>\",\n   \"title\": \"<string>\",\n   \"lastRevisionStr\": \"<string>\",\n   \"lastRevisionDate\": \"<string>\"\n  },\n  {\n   \"benchmarkId\": \"<string>\",\n   \"title\": \"<string>\",\n   \"lastRevisionStr\": \"<string>\",\n   \"lastRevisionDate\": \"<string>\"\n  }\n ]\n}"
						}
					]
				},
				{
					"name": "collections/collectionId/checklist LATEST - get",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "495373b8-687b-4180-a461-2b4fc0388c5f",
								"exec": [
									"let user = pm.environment.get(\"user\");\r",
									"console.log(\"user: \" + user);\r",
									"if (user == \"wf10\") {\r",
									"    pm.test(\"Status should be is 403 for user wf10\", function () {\r",
									"        pm.response.to.have.status(403);\r",
									"    });\r",
									"    return;\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
									"    user = \"elevated\";\r",
									"}\r",
									"\r",
									"pm.test(\"Check for an array of checklist items.\", function () {\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"    console.log(\"jsonData:\" + jsonData);\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/collections/{{testCollection}}/checklists/{{testBenchmark}}/latest",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"collections",
								"{{testCollection}}",
								"checklists",
								"{{testBenchmark}}",
								"latest"
							]
						},
						"description": "Returns checklist for specified collection/benchmark/rev"
					},
					"response": []
				},
				{
					"name": "collections/collectionId/checklist revisionStr - get",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e476ef63-0e5e-479d-9a58-1d76e6c3636b",
								"exec": [
									"let user = pm.environment.get(\"user\");\r",
									"console.log(\"user: \" + user);\r",
									"if (user == \"wf10\") {\r",
									"    pm.test(\"Status should be is 403 for user wf10\", function () {\r",
									"        pm.response.to.have.status(403);\r",
									"    });\r",
									"    return;\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
									"    user = \"elevated\";\r",
									"}\r",
									"\r",
									"pm.test(\"Check for an array of checklist items.\", function () {\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"    console.log(\"jsonData:\" + jsonData);\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/collections/{{testCollection}}/checklists/{{testBenchmark}}/{{testRev}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"collections",
								"{{testCollection}}",
								"checklists",
								"{{testBenchmark}}",
								"{{testRev}}"
							]
						},
						"description": "Returns checklist for specified collection/benchmark/rev"
					},
					"response": []
				},
				{
					"name": "Return the Findings for the specified Collection",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bc100933-d3dc-4e1b-9b7c-d59f9c637e76",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/collections/:collectionId/findings?acceptedOnly=false&projection=assets&projection=groups&projection=stigs&projection=ccis&projection=poamRarSummary&aggregator=ruleId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"collections",
								":collectionId",
								"findings"
							],
							"query": [
								{
									"key": "acceptedOnly",
									"value": "false"
								},
								{
									"key": "benchmarkId",
									"value": "<string>",
									"description": "A query parameter that indentifies a STIG",
									"disabled": true
								},
								{
									"key": "assetId",
									"value": "<string>",
									"description": "A query parameter that indentifies an Asset",
									"disabled": true
								},
								{
									"key": "projection",
									"value": "assets",
									"description": "Optional properties to return"
								},
								{
									"key": "projection",
									"value": "groups"
								},
								{
									"key": "projection",
									"value": "rules",
									"disabled": true
								},
								{
									"key": "projection",
									"value": "stigs"
								},
								{
									"key": "projection",
									"value": "ccis"
								},
								{
									"key": "projection",
									"value": "poamRarSummary"
								},
								{
									"key": "aggregator",
									"value": "ruleId"
								}
							],
							"variable": [
								{
									"id": "129acdbb-d6fc-4f52-82e7-8edd97d82806",
									"key": "collectionId",
									"value": "{{testCollection}}",
									"type": "string",
									"description": "(Required) A path parameter that indentifies a Collection"
								}
							]
						}
					},
					"response": [
						{
							"name": "CollectionFinding response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/collections/:collectionId/findings?acceptedOnly=false&benchmarkId=<string>&assetId=<string>&projection=<string>,<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":collectionId",
										"findings"
									],
									"query": [
										{
											"key": "acceptedOnly",
											"value": "false"
										},
										{
											"key": "benchmarkId",
											"value": "<string>"
										},
										{
											"key": "assetId",
											"value": "<string>"
										},
										{
											"key": "projection",
											"value": "<string>,<string>"
										}
									],
									"variable": [
										{
											"key": "collectionId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"ruleId\": \"<string>\",\n  \"ruleTitle\": \"<string>\",\n  \"groupId\": \"<string>\",\n  \"groupTitle\": \"<string>\",\n  \"severity\": \"<string>\",\n  \"ccis\": [\n   {\n    \"cci\": \"<string>\",\n    \"emassAp\": \"<string>\",\n    \"controls\": [\n     {\n      \"indexDisa\": \"<string>\",\n      \"textRefNist\": \"<string>\",\n      \"parentControl\": \"<string>\"\n     },\n     {\n      \"indexDisa\": \"<string>\",\n      \"textRefNist\": \"<string>\",\n      \"parentControl\": \"<string>\"\n     }\n    ]\n   },\n   {\n    \"cci\": \"<string>\",\n    \"emassAp\": \"<string>\",\n    \"controls\": [\n     {\n      \"indexDisa\": \"<string>\",\n      \"textRefNist\": \"<string>\",\n      \"parentControl\": \"<string>\"\n     },\n     {\n      \"indexDisa\": \"<string>\",\n      \"textRefNist\": \"<string>\",\n      \"parentControl\": \"<string>\"\n     }\n    ]\n   }\n  ],\n  \"benchmarkIds\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"assets\": [\n   {\n    \"assetId\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   {\n    \"assetId\": \"<string>\",\n    \"name\": \"<string>\"\n   }\n  ]\n },\n {\n  \"ruleId\": \"<string>\",\n  \"ruleTitle\": \"<string>\",\n  \"groupId\": \"<string>\",\n  \"groupTitle\": \"<string>\",\n  \"severity\": \"<string>\",\n  \"ccis\": [\n   {\n    \"cci\": \"<string>\",\n    \"emassAp\": \"<string>\",\n    \"controls\": [\n     {\n      \"indexDisa\": \"<string>\",\n      \"textRefNist\": \"<string>\",\n      \"parentControl\": \"<string>\"\n     },\n     {\n      \"indexDisa\": \"<string>\",\n      \"textRefNist\": \"<string>\",\n      \"parentControl\": \"<string>\"\n     }\n    ]\n   },\n   {\n    \"cci\": \"<string>\",\n    \"emassAp\": \"<string>\",\n    \"controls\": [\n     {\n      \"indexDisa\": \"<string>\",\n      \"textRefNist\": \"<string>\",\n      \"parentControl\": \"<string>\"\n     },\n     {\n      \"indexDisa\": \"<string>\",\n      \"textRefNist\": \"<string>\",\n      \"parentControl\": \"<string>\"\n     }\n    ]\n   }\n  ],\n  \"benchmarkIds\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"assets\": [\n   {\n    \"assetId\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   {\n    \"assetId\": \"<string>\",\n    \"name\": \"<string>\"\n   }\n  ]\n }\n]"
						},
						{
							"name": "unexpected error",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/collections/:collectionId/findings?acceptedOnly=false&benchmarkId=<string>&assetId=<string>&projection=<string>,<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":collectionId",
										"findings"
									],
									"query": [
										{
											"key": "acceptedOnly",
											"value": "false"
										},
										{
											"key": "benchmarkId",
											"value": "<string>"
										},
										{
											"key": "assetId",
											"value": "<string>"
										},
										{
											"key": "projection",
											"value": "<string>,<string>"
										}
									],
									"variable": [
										{
											"key": "collectionId"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "Return the STIGs mapped in the specified Collection",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1a446f24-6fa2-4b84-bf07-dfe50f993ba1",
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/collections/:collectionId/stigs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"collections",
								":collectionId",
								"stigs"
							],
							"variable": [
								{
									"id": "194898a1-678a-49ab-82fb-8eef6e8272fb",
									"key": "collectionId",
									"value": "{{testCollection}}",
									"type": "string",
									"description": "(Required) A path parameter that indentifies a Collection"
								}
							]
						}
					},
					"response": [
						{
							"name": "CollectionFinding response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/collections/:collectionId/stigs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":collectionId",
										"stigs"
									],
									"variable": [
										{
											"key": "collectionId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"benchmarkId\": \"<string>\",\n  \"lastRevisionStr\": \"<string>\",\n  \"lastRevisionDate\": \"<string>\",\n  \"title\": \"<string>\"\n },\n {\n  \"benchmarkId\": \"<string>\",\n  \"lastRevisionStr\": \"<string>\",\n  \"lastRevisionDate\": \"<string>\",\n  \"title\": \"<string>\"\n }\n]"
						},
						{
							"name": "unexpected error",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/collections/:collectionId/stigs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":collectionId",
										"stigs"
									],
									"variable": [
										{
											"key": "collectionId"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "82a00a3a-2b6b-40f8-8e61-54d2f4e0189b",
						"type": "text/javascript",
						"exec": [
							"// // pm.environment.set(\"curUser\", \"staff\");",
							"",
							"// let user = pm.iterationData.get(\"user\");",
							"// let elevate = pm.iterationData.get(\"elevate\");",
							"// console.log(`user: ${user} elevate: ${elevate}`);",
							"",
							"",
							"",
							"// if (user === undefined) {",
							"//     elevate = true;",
							"//     pm.environment.set(\"elevated\", elevate);",
							"//     user = \"admin\";",
							"//     pm.environment.set(\"user\", user);",
							"//     console.log(`setting environment variables elevated to ${elevate}, user to ${user}`);",
							"// }",
							"",
							"",
							"// let token = pm.environment.get(\"token.\" + user)",
							"// pm.environment.set(\"token\", token);",
							"// pm.environment.set(\"user\", user);",
							"// pm.environment.set(\"elevated\", elevate);",
							"// console.log(`User: ${user} elevated: ${elevate} Bearer: ${token}`);",
							"",
							"// pm.environment.set(\"collections.valid\", pm.iterationData.get(\"collections.valid\"));",
							"// pm.environment.set(\"collections.invalid\", pm.iterationData.get(\"collections.invalid\"));",
							"// pm.environment.set(\"assets.valid\", pm.iterationData.get(\"assets.valid\"));",
							"// pm.environment.set(\"assets.invalid\", pm.iterationData.get(\"assets.invalid\"));",
							"// pm.environment.set(\"stigs.valid\", pm.iterationData.get(\"stigs.valid\"));",
							"// pm.environment.set(\"stigs.invalid\", pm.iterationData.get(\"stigs.invalid\"));",
							"// pm.environment.set(\"testCollection\", pm.iterationData.get(\"testCollection\"));",
							"// pm.environment.set(\"testBenchmark\", pm.iterationData.get(\"testBenchmark\"));",
							"// pm.environment.set(\"testRev\", pm.iterationData.get(\"testRev\"));",
							"",
							"",
							"",
							"",
							"",
							"",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "72238c69-e011-4a92-8d64-59cd20399530",
						"type": "text/javascript",
						"exec": [
							"// // var user = pm.environment.get(\"user\");",
							"// // var elevated = pm.environment.get(\"elevated\");",
							"",
							"// // pm.test(`Collections Tests with user: ${user} elevated: ${elevated} `, function () {",
							"// //     pm.expect(pm.environment.get(\"user\")).to.equal(user);",
							"// // });",
							"",
							"",
							"// let user = pm.environment.get(\"user\");",
							"// let elevated = pm.environment.get(\"elevated\");",
							"",
							"// pm.test(`user: ${user}, elevated: ${elevated}`, function () {",
							"//     pm.expect(1).to.equal(1);",
							"// });",
							"",
							"// let env = pm.environment.get(\"env\");",
							"// pm.test(`environment: ${env}`, function () {",
							"//     pm.expect(env).to.equal(\"stig-manager localhost collections\");",
							"// });",
							"",
							"",
							"",
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Assets Tests - data file driven",
			"item": [
				{
					"name": "Assets - get - parameter combos",
					"item": [
						{
							"name": "Assets - get - pkgId Param",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "400b7d86-63df-42c9-b8d6-10d9008a7408",
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"if (user == \"wf10\") {\r",
											"    pm.test(\"Status should be 403 for user wf10, elevated\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"if ((user == \"lvl1\" || user == \"collectionCreator\") && pm.request.url.getQueryString().match(/elevate=false/) && pm.request.url.getQueryString().match(/projection=stigGrants/)) {\r",
											"    pm.test(\"Status should be 403 for user wf60, with stigGrant projection, not elevated\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;     \r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"}\r",
											"\r",
											"// console.log(\"url: \" + pm.request.url.getQueryString().match(/elevate=true/));\r",
											"\r",
											"var stuff = pm.request.auth;\r",
											"var stuff = pm.request.url.query;\r",
											"\r",
											"\r",
											"\r",
											"let allowedCollections, disallowedCollections, validStigs, invalidStigs, validAssets, invalidAssets;\r",
											"console.log(\"assignments\");\r",
											"allowedCollections = JSON.parse(pm.environment.get((\"collections.valid\")));\r",
											"// disallowedCollections = JSON.parse(pm.environment.get(\"collections.invalid\"));\r",
											"// validStigs = JSON.parse(pm.environment.get(\"stigs.valid\"));\r",
											"// invalidStigs = JSON.parse(pm.environment.get(\"stigs.invalid\"));\r",
											"validAssets = JSON.parse(pm.environment.get(\"assets.valid\"));\r",
											"// invalidAssets = JSON.parse(pm.environment.get(\"assets.invalid\"));\r",
											"\r",
											"let assetsForCollectionQuery,assetsForBenchmarkQuery,assetsForDeptQuery;\r",
											" assetsForCollectionQuery = JSON.parse(pm.environment.get(\"testCollection.assets\"));\r",
											" assetsForBenchmarkQuery = JSON.parse(pm.environment.get(\"assets.benchmarkQuery.response\"));\r",
											"//  assetsForDeptQuery = JSON.parse(pm.environment.get(\"assets.deptQuery.response\"));\r",
											"\r",
											"\r",
											"console.log(\"user is \" + user);\r",
											"\r",
											"\r",
											"\r",
											"// console.log(jsonData);\r",
											"// console.log(pm.environment.get(\"env\"));\r",
											"\r",
											"pm.test(\"Response JSON is an array\", function () {\r",
											"    pm.expect(jsonData).to.be.an('array');\r",
											"});\r",
											"\r",
											"let collectionIds = [];\r",
											"let assetIds = [];\r",
											"let assetNames = [];\r",
											"let stigIds = [];\r",
											"let stigGrants = [];\r",
											"let adminStats = [];\r",
											"pm.test(\"Each item in response has proper properties\", function () {\r",
											"    jsonData.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property('assetId');\r",
											"        assetIds.push(item.assetId);\r",
											"        pm.expect(item).to.have.property('name');\r",
											"        assetNames.push(item.name);\r",
											"        // console.log (item.assets);\r",
											"        // let assets = [];\r",
											"        // assets = item.assets;\r",
											"        // console.log (assets);\r",
											"\r",
											"        item.stigs.forEach(function (stig) {\r",
											"            pm.expect(stig).to.have.property('benchmarkId');\r",
											"            stigIds.push(stig.benchmarkId);\r",
											"        });\r",
											"        if (user == \"wf60\"){\r",
											"            pm.expect(item).to.not.have.property('stigGrants');\r",
											"        }\r",
											"        else{    \r",
											"            item.stigGrants.forEach(function (stigGrant) {\r",
											"                pm.expect(stigGrant).to.have.property('benchmarkId');\r",
											"                stigIds.push(stigGrant.benchmarkId);\r",
											"            });\r",
											"        }\r",
											"\r",
											"        pm.expect(item.adminStats).to.have.property('stigCount');\r",
											"        pm.expect(item.adminStats).to.have.property('stigAssignedCount');         \r",
											"    });\r",
											"\r",
											"    //     pm.expect(collectionIds).to.include.members(allowedCollections);\r",
											"});\r",
											"\r",
											"// console.log(\"collectionIds = \" + collectionIds);\r",
											"\r",
											"let collectionQuery, benchmarkQuery, deptQuery = 0;\r",
											"\r",
											"pm.test(\"Response contains correct assets for this user\", function () {\r",
											"\r",
											"    if (pm.request.url.getQueryString().match(/collectionId=/)) {\r",
											"        collectionQuery = 1;\r",
											"        assetIds.forEach(function (asset) {\r",
											"            console.log(\"checking collection query assetId: \" + asset);\r",
											"            pm.expect(parseInt(asset)).to.be.oneOf(assetsForCollectionQuery);\r",
											"        });\r",
											"    }\r",
											"    if (pm.request.url.getQueryString().match(/benchmarkId=/)) {\r",
											"        benchmarkQuery = 1;\r",
											"        assetIds.forEach(function (asset) {\r",
											"            console.log(\"checking benchmark query assetId: \" + asset);\r",
											"            pm.expect(parseInt(asset)).to.be.oneOf(assetsForBenchmarkQuery);\r",
											"        });        \r",
											"    }\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains authorized collectionIds for this user\", function () {\r",
											"    collectionIds.forEach(function (item) {\r",
											"        console.log(\"checking collectionId: \" + item);\r",
											"        pm.expect(item).to.be.oneOf(allowedCollections);\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response contains authorized collectionIds for this user\", function () {\r",
											"    collectionIds.forEach(function (item) {\r",
											"        console.log(\"checking collectionId: \" + item);\r",
											"        pm.expect(item).to.be.oneOf(allowedCollections);\r",
											"    });\r",
											"});\r",
											"\r",
											"let assetMatchString = pm.environment.get(\"assetMatchString\");\r",
											"\r",
											"console.log(\"asset string = \" + assetMatchString);\r",
											"var regex = new RegExp(assetMatchString);\r",
											"\r",
											"pm.test(\"Response contains authorized collection names for this user\", function () {\r",
											"    assetNames.forEach(function (name) {\r",
											"        console.log(\"checking name: \" + name);\r",
											"        pm.expect(name).to.match(regex);\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											"// pm.test(\"Response does NOT contain unAuthorized collectionIds for this user\", function () {\r",
											"//     collectionIds.forEach(function (item) {\r",
											"//         pm.expect(item).to.not.be.oneOf(disallowedCollections);\r",
											"//     });\r",
											"// });\r",
											"\r",
											"\r",
											"// if (user == \"wf60\" || user == \"officer60\") {\r",
											"//     pm.test(\"Response contains authorized projection data (assets)\", function () {\r",
											"//         assetIds.forEach(function (assetId) {\r",
											"//             pm.expect(assetId).to.be.oneOf(validAssets);\r",
											"//             console.log(\"checking assetId: \" + assetId);\r",
											"//         });\r",
											"//     });\r",
											"\r",
											"//     pm.test(\"Response contains authorized projection data (stigs)\", function () {\r",
											"//         stigIds.forEach(function (stigId) {\r",
											"//             pm.expect(stigId).to.be.oneOf(validStigs);\r",
											"//             console.log(\"checking stigId: \" + stigId);\r",
											"//         });\r",
											"//     });\r",
											"// }\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/assets?elevate={{elevated}}&collectionId={{assets.queryPkg}}&projection=stigs&projection=stigGrants&projection=adminStats",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"assets"
									],
									"query": [
										{
											"key": "elevate",
											"value": "{{elevated}}",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)"
										},
										{
											"key": "collectionId",
											"value": "{{assets.queryPkg}}",
											"description": "Selects Assets mapped to a Collection"
										},
										{
											"key": "benchmarkId",
											"value": "{{testBenchmark}}",
											"description": "Selects Assets mapped to a STIG",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "stigs",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "stigGrants"
										},
										{
											"key": "projection",
											"value": "adminStats"
										}
									]
								}
							},
							"response": [
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/assets?elevate=<boolean>&collectionId=<integer>&benchmarkId=<string>&dept=<string>&projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"assets"
											],
											"query": [
												{
													"key": "elevate",
													"value": "<boolean>"
												},
												{
													"key": "collectionId",
													"value": "<integer>"
												},
												{
													"key": "benchmarkId",
													"value": "<string>"
												},
												{
													"key": "dept",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
								},
								{
									"name": "AssetProjected response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/assets?elevate=<boolean>&collectionId=<integer>&benchmarkId=<string>&dept=<string>&projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"assets"
											],
											"query": [
												{
													"key": "elevate",
													"value": "<boolean>"
												},
												{
													"key": "collectionId",
													"value": "<integer>"
												},
												{
													"key": "benchmarkId",
													"value": "<string>"
												},
												{
													"key": "dept",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n {\n  \"assetId\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"dept\": \"<string>\",\n  \"ip\": \"<string>\",\n  \"nonnetwork\": \"<boolean>\",\n  \"scanexempt\": \"<boolean>\",\n  \"adminStats\": {\n   \"stigCount\": \"<integer>\",\n   \"stigAssignedCount\": \"<integer>\"\n  },\n  \"collections\": [\n   {\n    \"collectionId\": \"<integer>\",\n    \"name\": \"<string>\"\n   },\n   {\n    \"collectionId\": \"<integer>\",\n    \"name\": \"<string>\"\n   }\n  ],\n  \"stigs\": [\n   {\n    \"benchmarkId\": \"<string>\",\n    \"lastRevisionStr\": \"<string>\",\n    \"lastRevisionDate\": \"<string>\",\n    \"title\": \"<string>\"\n   },\n   {\n    \"benchmarkId\": \"<string>\",\n    \"lastRevisionStr\": \"<string>\",\n    \"lastRevisionDate\": \"<string>\",\n    \"title\": \"<string>\"\n   }\n  ],\n  \"stigReviewers\": [\n   {\n    \"benchmarkId\": \"<string>\",\n    \"reviewers\": [\n     {\n      \"userId\": \"<integer>\",\n      \"username\": \"<string>\"\n     },\n     {\n      \"userId\": \"<integer>\",\n      \"username\": \"<string>\"\n     }\n    ]\n   },\n   {\n    \"benchmarkId\": \"<string>\",\n    \"reviewers\": [\n     {\n      \"userId\": \"<integer>\",\n      \"username\": \"<string>\"\n     },\n     {\n      \"userId\": \"<integer>\",\n      \"username\": \"<string>\"\n     }\n    ]\n   }\n  ]\n },\n {\n  \"assetId\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"dept\": \"<string>\",\n  \"ip\": \"<string>\",\n  \"nonnetwork\": \"<boolean>\",\n  \"scanexempt\": \"<boolean>\",\n  \"adminStats\": {\n   \"stigCount\": \"<integer>\",\n   \"stigAssignedCount\": \"<integer>\"\n  },\n  \"collections\": [\n   {\n    \"collectionId\": \"<integer>\",\n    \"name\": \"<string>\"\n   },\n   {\n    \"collectionId\": \"<integer>\",\n    \"name\": \"<string>\"\n   }\n  ],\n  \"stigs\": [\n   {\n    \"benchmarkId\": \"<string>\",\n    \"lastRevisionStr\": \"<string>\",\n    \"lastRevisionDate\": \"<string>\",\n    \"title\": \"<string>\"\n   },\n   {\n    \"benchmarkId\": \"<string>\",\n    \"lastRevisionStr\": \"<string>\",\n    \"lastRevisionDate\": \"<string>\",\n    \"title\": \"<string>\"\n   }\n  ],\n  \"stigReviewers\": [\n   {\n    \"benchmarkId\": \"<string>\",\n    \"reviewers\": [\n     {\n      \"userId\": \"<integer>\",\n      \"username\": \"<string>\"\n     },\n     {\n      \"userId\": \"<integer>\",\n      \"username\": \"<string>\"\n     }\n    ]\n   },\n   {\n    \"benchmarkId\": \"<string>\",\n    \"reviewers\": [\n     {\n      \"userId\": \"<integer>\",\n      \"username\": \"<string>\"\n     },\n     {\n      \"userId\": \"<integer>\",\n      \"username\": \"<string>\"\n     }\n    ]\n   }\n  ]\n }\n]"
								}
							]
						},
						{
							"name": "Assets - get - pkgId, benchmarkId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d01517d0-4f3d-41f8-9b50-5bb8df34f765",
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"if (user == \"wf10\") {\r",
											"    pm.test(\"Status should be 403 for user wf10, elevated\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"if ((user == \"lvl1\" || user == \"collectionCreator\") && pm.request.url.getQueryString().match(/elevate=false/) && pm.request.url.getQueryString().match(/projection=stigGrants/)) {\r",
											"    pm.test(\"Status should be 403 for user wf60, with stigGrant projection, not elevated\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;     \r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"}\r",
											"\r",
											"// console.log(\"url: \" + pm.request.url.getQueryString().match(/elevate=true/));\r",
											"\r",
											"var stuff = pm.request.auth;\r",
											"var stuff = pm.request.url.query;\r",
											"\r",
											"\r",
											"\r",
											"let allowedCollections, disallowedCollections, validStigs, invalidStigs, validAssets, invalidAssets;\r",
											"console.log(\"assignments\");\r",
											"allowedCollections = JSON.parse(pm.environment.get((\"collections.valid\")));\r",
											"// disallowedCollections = JSON.parse(pm.environment.get(\"collections.invalid\"));\r",
											"// validStigs = JSON.parse(pm.environment.get(\"stigs.valid\"));\r",
											"// invalidStigs = JSON.parse(pm.environment.get(\"stigs.invalid\"));\r",
											"validAssets = JSON.parse(pm.environment.get(\"assets.valid\"));\r",
											"// invalidAssets = JSON.parse(pm.environment.get(\"assets.invalid\"));\r",
											"\r",
											"let assetsForCollectionQuery,assetsForBenchmarkQuery,assetsForDeptQuery;\r",
											" assetsForCollectionQuery = JSON.parse(pm.environment.get(\"testCollection.assets\"));\r",
											" assetsForBenchmarkQuery = JSON.parse(pm.environment.get(\"assets.benchmarkQuery.response\"));\r",
											"//  assetsForDeptQuery = JSON.parse(pm.environment.get(\"assets.deptQuery.response\"));\r",
											"\r",
											"\r",
											"console.log(\"user is \" + user);\r",
											"\r",
											"\r",
											"\r",
											"// console.log(jsonData);\r",
											"// console.log(pm.environment.get(\"env\"));\r",
											"\r",
											"pm.test(\"Response JSON is an array\", function () {\r",
											"    pm.expect(jsonData).to.be.an('array');\r",
											"});\r",
											"\r",
											"let collectionIds = [];\r",
											"let assetIds = [];\r",
											"let assetNames = [];\r",
											"let stigIds = [];\r",
											"let stigGrants = [];\r",
											"let adminStats = [];\r",
											"pm.test(\"Each item in response has proper properties\", function () {\r",
											"    jsonData.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property('assetId');\r",
											"        assetIds.push(item.assetId);\r",
											"        pm.expect(item).to.have.property('name');\r",
											"        assetNames.push(item.name);\r",
											"        // console.log (item.assets);\r",
											"        // let assets = [];\r",
											"        // assets = item.assets;\r",
											"        // console.log (assets);\r",
											"\r",
											"        item.stigs.forEach(function (stig) {\r",
											"            pm.expect(stig).to.have.property('benchmarkId');\r",
											"            stigIds.push(stig.benchmarkId);\r",
											"        });\r",
											"        if (user == \"wf60\"){\r",
											"            pm.expect(item).to.not.have.property('stigGrants');\r",
											"        }\r",
											"        else{    \r",
											"            item.stigGrants.forEach(function (stigGrant) {\r",
											"                pm.expect(stigGrant).to.have.property('benchmarkId');\r",
											"                stigIds.push(stigGrant.benchmarkId);\r",
											"            });\r",
											"        }\r",
											"\r",
											"        pm.expect(item.adminStats).to.have.property('stigCount');\r",
											"        pm.expect(item.adminStats).to.have.property('stigAssignedCount');         \r",
											"    });\r",
											"\r",
											"    //     pm.expect(collectionIds).to.include.members(allowedCollections);\r",
											"});\r",
											"\r",
											"// console.log(\"collectionIds = \" + collectionIds);\r",
											"\r",
											"let collectionQuery, benchmarkQuery, deptQuery = 0;\r",
											"\r",
											"pm.test(\"Response contains correct assets for this user\", function () {\r",
											"\r",
											"    if (pm.request.url.getQueryString().match(/collectionId=/)) {\r",
											"        collectionQuery = 1;\r",
											"        assetIds.forEach(function (asset) {\r",
											"            console.log(\"checking collection query assetId: \" + asset);\r",
											"            pm.expect(parseInt(asset)).to.be.oneOf(assetsForCollectionQuery);\r",
											"        });\r",
											"    }\r",
											"    if (pm.request.url.getQueryString().match(/benchmarkId=/)) {\r",
											"        benchmarkQuery = 1;\r",
											"        assetIds.forEach(function (asset) {\r",
											"            console.log(\"checking benchmark query assetId: \" + asset);\r",
											"            pm.expect(parseInt(asset)).to.be.oneOf(assetsForBenchmarkQuery);\r",
											"        });        \r",
											"    }\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains authorized collectionIds for this user\", function () {\r",
											"    collectionIds.forEach(function (item) {\r",
											"        console.log(\"checking collectionId: \" + item);\r",
											"        pm.expect(item).to.be.oneOf(allowedCollections);\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response contains authorized collectionIds for this user\", function () {\r",
											"    collectionIds.forEach(function (item) {\r",
											"        console.log(\"checking collectionId: \" + item);\r",
											"        pm.expect(item).to.be.oneOf(allowedCollections);\r",
											"    });\r",
											"});\r",
											"\r",
											"let assetMatchString = pm.environment.get(\"assetMatchString\");\r",
											"\r",
											"console.log(\"asset string = \" + assetMatchString);\r",
											"var regex = new RegExp(assetMatchString);\r",
											"\r",
											"pm.test(\"Response contains authorized collection names for this user\", function () {\r",
											"    assetNames.forEach(function (name) {\r",
											"        console.log(\"checking name: \" + name);\r",
											"        pm.expect(name).to.match(regex);\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											"// pm.test(\"Response does NOT contain unAuthorized collectionIds for this user\", function () {\r",
											"//     collectionIds.forEach(function (item) {\r",
											"//         pm.expect(item).to.not.be.oneOf(disallowedCollections);\r",
											"//     });\r",
											"// });\r",
											"\r",
											"\r",
											"// if (user == \"wf60\" || user == \"officer60\") {\r",
											"//     pm.test(\"Response contains authorized projection data (assets)\", function () {\r",
											"//         assetIds.forEach(function (assetId) {\r",
											"//             pm.expect(assetId).to.be.oneOf(validAssets);\r",
											"//             console.log(\"checking assetId: \" + assetId);\r",
											"//         });\r",
											"//     });\r",
											"\r",
											"//     pm.test(\"Response contains authorized projection data (stigs)\", function () {\r",
											"//         stigIds.forEach(function (stigId) {\r",
											"//             pm.expect(stigId).to.be.oneOf(validStigs);\r",
											"//             console.log(\"checking stigId: \" + stigId);\r",
											"//         });\r",
											"//     });\r",
											"// }\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/assets?elevate={{elevated}}&collectionId={{assets.queryPkg}}&benchmarkId={{testBenchmark}}&projection=stigs&projection=stigGrants&projection=adminStats",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"assets"
									],
									"query": [
										{
											"key": "elevate",
											"value": "{{elevated}}",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)"
										},
										{
											"key": "collectionId",
											"value": "{{assets.queryPkg}}",
											"description": "Selects Assets mapped to a Collection"
										},
										{
											"key": "benchmarkId",
											"value": "{{testBenchmark}}",
											"description": "Selects Assets mapped to a STIG"
										},
										{
											"key": "projection",
											"value": "stigs",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "stigGrants"
										},
										{
											"key": "projection",
											"value": "adminStats"
										}
									]
								}
							},
							"response": [
								{
									"name": "AssetProjected response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/assets?elevate=<boolean>&collectionId=<integer>&benchmarkId=<string>&dept=<string>&projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"assets"
											],
											"query": [
												{
													"key": "elevate",
													"value": "<boolean>"
												},
												{
													"key": "collectionId",
													"value": "<integer>"
												},
												{
													"key": "benchmarkId",
													"value": "<string>"
												},
												{
													"key": "dept",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n {\n  \"assetId\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"dept\": \"<string>\",\n  \"ip\": \"<string>\",\n  \"nonnetwork\": \"<boolean>\",\n  \"scanexempt\": \"<boolean>\",\n  \"adminStats\": {\n   \"stigCount\": \"<integer>\",\n   \"stigAssignedCount\": \"<integer>\"\n  },\n  \"collections\": [\n   {\n    \"collectionId\": \"<integer>\",\n    \"name\": \"<string>\"\n   },\n   {\n    \"collectionId\": \"<integer>\",\n    \"name\": \"<string>\"\n   }\n  ],\n  \"stigs\": [\n   {\n    \"benchmarkId\": \"<string>\",\n    \"lastRevisionStr\": \"<string>\",\n    \"lastRevisionDate\": \"<string>\",\n    \"title\": \"<string>\"\n   },\n   {\n    \"benchmarkId\": \"<string>\",\n    \"lastRevisionStr\": \"<string>\",\n    \"lastRevisionDate\": \"<string>\",\n    \"title\": \"<string>\"\n   }\n  ],\n  \"stigReviewers\": [\n   {\n    \"benchmarkId\": \"<string>\",\n    \"reviewers\": [\n     {\n      \"userId\": \"<integer>\",\n      \"username\": \"<string>\"\n     },\n     {\n      \"userId\": \"<integer>\",\n      \"username\": \"<string>\"\n     }\n    ]\n   },\n   {\n    \"benchmarkId\": \"<string>\",\n    \"reviewers\": [\n     {\n      \"userId\": \"<integer>\",\n      \"username\": \"<string>\"\n     },\n     {\n      \"userId\": \"<integer>\",\n      \"username\": \"<string>\"\n     }\n    ]\n   }\n  ]\n },\n {\n  \"assetId\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"dept\": \"<string>\",\n  \"ip\": \"<string>\",\n  \"nonnetwork\": \"<boolean>\",\n  \"scanexempt\": \"<boolean>\",\n  \"adminStats\": {\n   \"stigCount\": \"<integer>\",\n   \"stigAssignedCount\": \"<integer>\"\n  },\n  \"collections\": [\n   {\n    \"collectionId\": \"<integer>\",\n    \"name\": \"<string>\"\n   },\n   {\n    \"collectionId\": \"<integer>\",\n    \"name\": \"<string>\"\n   }\n  ],\n  \"stigs\": [\n   {\n    \"benchmarkId\": \"<string>\",\n    \"lastRevisionStr\": \"<string>\",\n    \"lastRevisionDate\": \"<string>\",\n    \"title\": \"<string>\"\n   },\n   {\n    \"benchmarkId\": \"<string>\",\n    \"lastRevisionStr\": \"<string>\",\n    \"lastRevisionDate\": \"<string>\",\n    \"title\": \"<string>\"\n   }\n  ],\n  \"stigReviewers\": [\n   {\n    \"benchmarkId\": \"<string>\",\n    \"reviewers\": [\n     {\n      \"userId\": \"<integer>\",\n      \"username\": \"<string>\"\n     },\n     {\n      \"userId\": \"<integer>\",\n      \"username\": \"<string>\"\n     }\n    ]\n   },\n   {\n    \"benchmarkId\": \"<string>\",\n    \"reviewers\": [\n     {\n      \"userId\": \"<integer>\",\n      \"username\": \"<string>\"\n     },\n     {\n      \"userId\": \"<integer>\",\n      \"username\": \"<string>\"\n     }\n    ]\n   }\n  ]\n }\n]"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/assets?elevate=<boolean>&collectionId=<integer>&benchmarkId=<string>&dept=<string>&projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"assets"
											],
											"query": [
												{
													"key": "elevate",
													"value": "<boolean>"
												},
												{
													"key": "collectionId",
													"value": "<integer>"
												},
												{
													"key": "benchmarkId",
													"value": "<string>"
												},
												{
													"key": "dept",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Assets - get - pkgId Param no StigReviewers Projection (prohibited for level 1)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b84d2a8f-b256-4b7a-a21c-d74edea8e1cd",
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"if (user == \"wf10\") {\r",
											"    pm.test(\"Status should be 403 for user wf10, elevated\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"if ((user == \"lvl1\" || user == \"collectionCreator\") && pm.request.url.getQueryString().match(/elevate=false/) && pm.request.url.getQueryString().match(/projection=stigGrants/)) {\r",
											"    pm.test(\"Status should be 403 for user wf60, with stigGrant projection, not elevated\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;     \r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"}\r",
											"\r",
											"// console.log(\"url: \" + pm.request.url.getQueryString().match(/elevate=true/));\r",
											"\r",
											"var stuff = pm.request.auth;\r",
											"var stuff = pm.request.url.query;\r",
											"\r",
											"\r",
											"\r",
											"let allowedCollections, disallowedCollections, validStigs, invalidStigs, validAssets, invalidAssets;\r",
											"console.log(\"assignments\");\r",
											"allowedCollections = JSON.parse(pm.environment.get((\"collections.valid\")));\r",
											"// disallowedCollections = JSON.parse(pm.environment.get(\"collections.invalid\"));\r",
											"// validStigs = JSON.parse(pm.environment.get(\"stigs.valid\"));\r",
											"// invalidStigs = JSON.parse(pm.environment.get(\"stigs.invalid\"));\r",
											"validAssets = JSON.parse(pm.environment.get(\"assets.valid\"));\r",
											"// invalidAssets = JSON.parse(pm.environment.get(\"assets.invalid\"));\r",
											"\r",
											"let assetsForCollectionQuery,assetsForBenchmarkQuery,assetsForDeptQuery;\r",
											" assetsForCollectionQuery = JSON.parse(pm.environment.get(\"testCollection.assets\"));\r",
											" assetsForBenchmarkQuery = JSON.parse(pm.environment.get(\"assets.benchmarkQuery.response\"));\r",
											"//  assetsForDeptQuery = JSON.parse(pm.environment.get(\"assets.deptQuery.response\"));\r",
											"\r",
											"\r",
											"console.log(\"user is \" + user);\r",
											"\r",
											"\r",
											"\r",
											"// console.log(jsonData);\r",
											"// console.log(pm.environment.get(\"env\"));\r",
											"\r",
											"pm.test(\"Response JSON is an array\", function () {\r",
											"    pm.expect(jsonData).to.be.an('array');\r",
											"});\r",
											"\r",
											"let collectionIds = [];\r",
											"let assetIds = [];\r",
											"let assetNames = [];\r",
											"let stigIds = [];\r",
											"let stigGrants = [];\r",
											"let adminStats = [];\r",
											"pm.test(\"Each item in response has proper properties\", function () {\r",
											"    jsonData.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property('assetId');\r",
											"        assetIds.push(item.assetId);\r",
											"        pm.expect(item).to.have.property('name');\r",
											"        assetNames.push(item.name);\r",
											"        // console.log (item.assets);\r",
											"        // let assets = [];\r",
											"        // assets = item.assets;\r",
											"        // console.log (assets);\r",
											"\r",
											"        item.stigs.forEach(function (stig) {\r",
											"            pm.expect(stig).to.have.property('benchmarkId');\r",
											"            stigIds.push(stig.benchmarkId);\r",
											"        });\r",
											"\r",
											"\r",
											"        pm.expect(item.adminStats).to.have.property('stigCount');\r",
											"        pm.expect(item.adminStats).to.have.property('stigAssignedCount');         \r",
											"    });\r",
											"\r",
											"    //     pm.expect(collectionIds).to.include.members(allowedCollections);\r",
											"});\r",
											"\r",
											"// console.log(\"collectionIds = \" + collectionIds);\r",
											"\r",
											"let collectionQuery, benchmarkQuery, deptQuery = 0;\r",
											"\r",
											"pm.test(\"Response contains correct assets for this user\", function () {\r",
											"\r",
											"    if (pm.request.url.getQueryString().match(/collectionId=/)) {\r",
											"        collectionQuery = 1;\r",
											"        assetIds.forEach(function (asset) {\r",
											"            console.log(\"checking collection query assetId: \" + asset);\r",
											"            pm.expect(parseInt(asset)).to.be.oneOf(assetsForCollectionQuery);\r",
											"        });\r",
											"    }\r",
											"    if (pm.request.url.getQueryString().match(/benchmarkId=/)) {\r",
											"        benchmarkQuery = 1;\r",
											"        assetIds.forEach(function (asset) {\r",
											"            console.log(\"checking benchmark query assetId: \" + asset);\r",
											"            pm.expect(parseInt(asset)).to.be.oneOf(assetsForBenchmarkQuery);\r",
											"        });        \r",
											"    }\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains authorized collectionIds for this user\", function () {\r",
											"    collectionIds.forEach(function (item) {\r",
											"        console.log(\"checking collectionId: \" + item);\r",
											"        pm.expect(item).to.be.oneOf(allowedCollections);\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response contains authorized collectionIds for this user\", function () {\r",
											"    collectionIds.forEach(function (item) {\r",
											"        console.log(\"checking collectionId: \" + item);\r",
											"        pm.expect(item).to.be.oneOf(allowedCollections);\r",
											"    });\r",
											"});\r",
											"\r",
											"let assetMatchString = pm.environment.get(\"assetMatchString\");\r",
											"\r",
											"console.log(\"asset string = \" + assetMatchString);\r",
											"var regex = new RegExp(assetMatchString);\r",
											"\r",
											"pm.test(\"Response contains authorized collection names for this user\", function () {\r",
											"    assetNames.forEach(function (name) {\r",
											"        console.log(\"checking name: \" + name);\r",
											"        pm.expect(name).to.match(regex);\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											"// pm.test(\"Response does NOT contain unAuthorized collectionIds for this user\", function () {\r",
											"//     collectionIds.forEach(function (item) {\r",
											"//         pm.expect(item).to.not.be.oneOf(disallowedCollections);\r",
											"//     });\r",
											"// });\r",
											"\r",
											"\r",
											"// if (user == \"wf60\" || user == \"officer60\") {\r",
											"//     pm.test(\"Response contains authorized projection data (assets)\", function () {\r",
											"//         assetIds.forEach(function (assetId) {\r",
											"//             pm.expect(assetId).to.be.oneOf(validAssets);\r",
											"//             console.log(\"checking assetId: \" + assetId);\r",
											"//         });\r",
											"//     });\r",
											"\r",
											"//     pm.test(\"Response contains authorized projection data (stigs)\", function () {\r",
											"//         stigIds.forEach(function (stigId) {\r",
											"//             pm.expect(stigId).to.be.oneOf(validStigs);\r",
											"//             console.log(\"checking stigId: \" + stigId);\r",
											"//         });\r",
											"//     });\r",
											"// }\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/assets?elevate={{elevated}}&collectionId={{assets.queryPkg}}&projection=stigs&projection=adminStats",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"assets"
									],
									"query": [
										{
											"key": "elevate",
											"value": "{{elevated}}",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)"
										},
										{
											"key": "collectionId",
											"value": "{{assets.queryPkg}}",
											"description": "Selects Assets mapped to a Collection"
										},
										{
											"key": "projection",
											"value": "stigs",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "adminStats"
										}
									]
								}
							},
							"response": [
								{
									"name": "AssetProjected response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/assets?elevate=<boolean>&collectionId=<integer>&benchmarkId=<string>&dept=<string>&projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"assets"
											],
											"query": [
												{
													"key": "elevate",
													"value": "<boolean>"
												},
												{
													"key": "collectionId",
													"value": "<integer>"
												},
												{
													"key": "benchmarkId",
													"value": "<string>"
												},
												{
													"key": "dept",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n {\n  \"assetId\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"dept\": \"<string>\",\n  \"ip\": \"<string>\",\n  \"nonnetwork\": \"<boolean>\",\n  \"scanexempt\": \"<boolean>\",\n  \"adminStats\": {\n   \"stigCount\": \"<integer>\",\n   \"stigAssignedCount\": \"<integer>\"\n  },\n  \"collections\": [\n   {\n    \"collectionId\": \"<integer>\",\n    \"name\": \"<string>\"\n   },\n   {\n    \"collectionId\": \"<integer>\",\n    \"name\": \"<string>\"\n   }\n  ],\n  \"stigs\": [\n   {\n    \"benchmarkId\": \"<string>\",\n    \"lastRevisionStr\": \"<string>\",\n    \"lastRevisionDate\": \"<string>\",\n    \"title\": \"<string>\"\n   },\n   {\n    \"benchmarkId\": \"<string>\",\n    \"lastRevisionStr\": \"<string>\",\n    \"lastRevisionDate\": \"<string>\",\n    \"title\": \"<string>\"\n   }\n  ],\n  \"stigReviewers\": [\n   {\n    \"benchmarkId\": \"<string>\",\n    \"reviewers\": [\n     {\n      \"userId\": \"<integer>\",\n      \"username\": \"<string>\"\n     },\n     {\n      \"userId\": \"<integer>\",\n      \"username\": \"<string>\"\n     }\n    ]\n   },\n   {\n    \"benchmarkId\": \"<string>\",\n    \"reviewers\": [\n     {\n      \"userId\": \"<integer>\",\n      \"username\": \"<string>\"\n     },\n     {\n      \"userId\": \"<integer>\",\n      \"username\": \"<string>\"\n     }\n    ]\n   }\n  ]\n },\n {\n  \"assetId\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"dept\": \"<string>\",\n  \"ip\": \"<string>\",\n  \"nonnetwork\": \"<boolean>\",\n  \"scanexempt\": \"<boolean>\",\n  \"adminStats\": {\n   \"stigCount\": \"<integer>\",\n   \"stigAssignedCount\": \"<integer>\"\n  },\n  \"collections\": [\n   {\n    \"collectionId\": \"<integer>\",\n    \"name\": \"<string>\"\n   },\n   {\n    \"collectionId\": \"<integer>\",\n    \"name\": \"<string>\"\n   }\n  ],\n  \"stigs\": [\n   {\n    \"benchmarkId\": \"<string>\",\n    \"lastRevisionStr\": \"<string>\",\n    \"lastRevisionDate\": \"<string>\",\n    \"title\": \"<string>\"\n   },\n   {\n    \"benchmarkId\": \"<string>\",\n    \"lastRevisionStr\": \"<string>\",\n    \"lastRevisionDate\": \"<string>\",\n    \"title\": \"<string>\"\n   }\n  ],\n  \"stigReviewers\": [\n   {\n    \"benchmarkId\": \"<string>\",\n    \"reviewers\": [\n     {\n      \"userId\": \"<integer>\",\n      \"username\": \"<string>\"\n     },\n     {\n      \"userId\": \"<integer>\",\n      \"username\": \"<string>\"\n     }\n    ]\n   },\n   {\n    \"benchmarkId\": \"<string>\",\n    \"reviewers\": [\n     {\n      \"userId\": \"<integer>\",\n      \"username\": \"<string>\"\n     },\n     {\n      \"userId\": \"<integer>\",\n      \"username\": \"<string>\"\n     }\n    ]\n   }\n  ]\n }\n]"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/assets?elevate=<boolean>&collectionId=<integer>&benchmarkId=<string>&dept=<string>&projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"assets"
											],
											"query": [
												{
													"key": "elevate",
													"value": "<boolean>"
												},
												{
													"key": "collectionId",
													"value": "<integer>"
												},
												{
													"key": "benchmarkId",
													"value": "<string>"
												},
												{
													"key": "dept",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "{asset Id} ",
					"item": [
						{
							"name": "asset - get - assetId all projections",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cba711da-5760-47b7-9efd-38bb96c91a31",
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"if (user == \"wf10\") {\r",
											"    pm.test(\"Status should be 403 for user wf10, elevated\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"if (user == \"lvl1\" && pm.request.url.getQueryString().match(/elevate=false/) && pm.request.url.getQueryString().match(/projection=stigGrants/)) {\r",
											"        pm.test(\"Status should be 403 for user lvl1 with prohibited stigGrant projection, not elevated\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;     \r",
											"}\r",
											"if (user == \"collectionCreator\" && pm.request.url.getQueryString().match(/elevate=false/) ) {\r",
											"        pm.test(\"Status should be 204 for user collectionCreator, , not elevated. collectionCreator does have access to this asset\", function () {\r",
											"        pm.response.to.have.status(204);\r",
											"    });\r",
											"    return;     \r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"let elevated = pm.environment.get(\"elevated\");\r",
											"console.log(\"user: \" + user);\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"}\r",
											"\r",
											"\r",
											"console.log(jsonData);\r",
											"// console.log(pm.environment.get(\"env\"));\r",
											"\r",
											"pm.test(\"Response JSON is an object\", function () {\r",
											"    pm.expect(jsonData).to.be.an('object');\r",
											"});\r",
											"\r",
											"let testAsset = pm.environment.get((\"assets.queryAsset\"));\r",
											"pm.test(\"Response JSON is an object with requested assetId\", function () {\r",
											"    pm.expect(jsonData.assetId).to.eql(testAsset);\r",
											"});\r",
											"\r",
											"let allowedCollections, disallowedCollections, validStigs, invalidStigs, validAssets, invalidAssets;\r",
											"console.log(\"assignments\");\r",
											"// allowedCollections = JSON.parse(pm.environment.get((\"collections.valid\")));\r",
											"// disallowedCollections = JSON.parse(pm.environment.get(\"collections.invalid\"));\r",
											"validStigs = JSON.parse(pm.environment.get(\"stigs.valid\"));\r",
											"// invalidStigs = JSON.parse(pm.environment.get(\"stigs.invalid\"));\r",
											"// validAssets = JSON.parse(pm.environment.get(\"assets.valid\"));\r",
											"// invalidAssets = JSON.parse(pm.environment.get(\"assets.invalid\"));\r",
											"console.log(\"user is \" + user);\r",
											"\r",
											"\r",
											"let collectionIds = [];\r",
											"let assetIds = [];\r",
											"let stigGrantsStigs = [];\r",
											"let stigs = [];\r",
											"\r",
											"\r",
											"pm.test(\"Each item in response has proper properties\", function () {\r",
											"    // pm.expect(jsonData).to.have.property('collections');\r",
											"    // collectionIds.push(jsonData.collectionId);\r",
											"    pm.expect(jsonData).to.have.property('adminStats');\r",
											"    pm.expect(jsonData).to.have.property('stigs');\r",
											"\r",
											"    // jsonData.collections.forEach(function (collection) {\r",
											"    //     pm.expect(collection).to.have.property('collectionId');\r",
											"    //     collectionIds.push(collection.collectionId);\r",
											"    // });\r",
											"    jsonData.stigs.forEach(function (stig) {\r",
											"        pm.expect(stig).to.have.property('benchmarkId');\r",
											"        stigs.push(stig.benchmarkId);\r",
											"    });\r",
											"    if (user == \"lvl1\" ){\r",
											"        pm.expect(jsonData).to.not.have.property('stigGrants');\r",
											"    }\r",
											"    else {\r",
											"        pm.expect(jsonData).to.have.property('stigGrants');\r",
											"        jsonData.stigGrants.forEach(function (stigGrant) {\r",
											"            pm.expect(stigGrant).to.have.property('benchmarkId');\r",
											"            stigGrantsStigs.push(stigGrant.benchmarkId);\r",
											"        });\r",
											"    }\r",
											"    // pm.expect(collectionIds).to.include.oneOf(allowedCollections);\r",
											"});\r",
											"\r",
											"console.log(\"collectionIds = \" + collectionIds);\r",
											"\r",
											"pm.test(\"Response contains valid projection data (collections)\", function () {\r",
											"    collectionIds.forEach( function (collection) {\r",
											"    console.log(\"checking collectionId: \" + collection);\r",
											"    pm.expect(collection).to.be.oneOf(allowedCollections);\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains valid projection data (stigs)\", function () {\r",
											"    stigs.forEach( function (stig) {\r",
											"    console.log(\"checking stig: \" + stig);\r",
											"    pm.expect(stig).to.be.oneOf(validStigs);\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// let assetMatchString = pm.environment.get(\"assetMatchString\");\r",
											"\r",
											"// console.log(\"asset string = \" + assetMatchString);\r",
											"// var regex = new RegExp(assetMatchString);\r",
											"\r",
											"// pm.test(\"Response contains authorized collection names for this user\", function () {\r",
											"//     names.forEach(function (name) {\r",
											"//         console.log(\"checking name: \" + name);\r",
											"//         pm.expect(name).to.match(regex);\r",
											"//     });\r",
											"// });\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/assets/:assetId?projection=stigGrants&projection=adminStats&elevate={{elevated}}&projection=stigs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"assets",
										":assetId"
									],
									"query": [
										{
											"key": "projection",
											"value": "stigGrants",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "adminStats"
										},
										{
											"key": "elevate",
											"value": "{{elevated}}",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)"
										},
										{
											"key": "projection",
											"value": "stigs"
										}
									],
									"variable": [
										{
											"id": "194ae243-6941-4135-ae32-aed91714607a",
											"key": "assetId",
											"value": "{{assets.queryAsset}}",
											"type": "string",
											"description": "(Required) A path parameter that indentifies an Asset"
										}
									]
								}
							},
							"response": [
								{
									"name": "AssetProjected response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/assets/:assetId?elevate=<boolean>&projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"assets",
												":assetId"
											],
											"query": [
												{
													"key": "elevate",
													"value": "<boolean>"
												},
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "assetId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"assetId\": \"<integer>\",\n \"name\": \"<string>\",\n \"dept\": \"<string>\",\n \"ip\": \"<string>\",\n \"nonnetwork\": \"<boolean>\",\n \"scanexempt\": \"<boolean>\",\n \"adminStats\": {\n  \"stigCount\": \"<integer>\",\n  \"stigAssignedCount\": \"<integer>\"\n },\n \"collections\": [\n  {\n   \"collectionId\": \"<integer>\",\n   \"name\": \"<string>\"\n  },\n  {\n   \"collectionId\": \"<integer>\",\n   \"name\": \"<string>\"\n  }\n ],\n \"stigs\": [\n  {\n   \"benchmarkId\": \"<string>\",\n   \"lastRevisionStr\": \"<string>\",\n   \"lastRevisionDate\": \"<string>\",\n   \"title\": \"<string>\"\n  },\n  {\n   \"benchmarkId\": \"<string>\",\n   \"lastRevisionStr\": \"<string>\",\n   \"lastRevisionDate\": \"<string>\",\n   \"title\": \"<string>\"\n  }\n ],\n \"stigReviewers\": [\n  {\n   \"benchmarkId\": \"<string>\",\n   \"reviewers\": [\n    {\n     \"userId\": \"<integer>\",\n     \"username\": \"<string>\"\n    },\n    {\n     \"userId\": \"<integer>\",\n     \"username\": \"<string>\"\n    }\n   ]\n  },\n  {\n   \"benchmarkId\": \"<string>\",\n   \"reviewers\": [\n    {\n     \"userId\": \"<integer>\",\n     \"username\": \"<string>\"\n    },\n    {\n     \"userId\": \"<integer>\",\n     \"username\": \"<string>\"\n    }\n   ]\n  }\n ]\n}"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/assets/:assetId?elevate=<boolean>&projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"assets",
												":assetId"
											],
											"query": [
												{
													"key": "elevate",
													"value": "<boolean>"
												},
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "assetId"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Create an Asset",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f7361bc2-1534-4ada-894d-3c61e2ac096b",
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"if (user == \"wf10\") {\r",
											"    pm.test(\"Status should be is 403 for user wf10\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"user is elevated\");\r",
											"\r",
											"}\r",
											"\r",
											"var stuff = pm.request.auth;\r",
											"var stuff = pm.request;\r",
											"\r",
											"if (user == 'elevated' || user == 'lvl3' || user == \"lvl4\" ) {\r",
											"    pm.test(\"User is elevated. Status code is 201\", function () {\r",
											"        pm.response.to.have.status(201);\r",
											"    });\r",
											"}\r",
											"else {\r",
											"    pm.test(\"User is not lvl3, 4, or elevated. Expected status code is 403\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"\r",
											"if (pm.response.code == 500) {\r",
											"    console.log(\"Server returned 500\")\r",
											"    return;\r",
											"}\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Response JSON is an object\", function () {\r",
											"    pm.expect(jsonData).to.be.an('object');\r",
											"});\r",
											"\r",
											"let createdAsset = jsonData.assetId;\r",
											"console.log(\"created asset: \" + createdAsset)\r",
											"pm.environment.set(\"createdAsset\", createdAsset);\r",
											"\r",
											"pm.test(`Created Asset: ${createdAsset}`, function () {\r",
											"    pm.expect(createdAsset).to.be.an('string');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"z_testAssetExpectSuccess-X\",\n    \"ip\": \"0.0.0.0\",\n    \"nonnetwork\": false,\n    \"collectionId\": \"21\",\n    \"stigs\": [],\n    \"metadata\": {  \n        \"assetName2\": \"namely\"\n    }\n}\n\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/assets?projection=stigs&projection=stigGrants&projection=adminStats&elevate={{elevated}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"assets"
									],
									"query": [
										{
											"key": "projection",
											"value": "stigs",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "stigGrants"
										},
										{
											"key": "projection",
											"value": "adminStats"
										},
										{
											"key": "elevate",
											"value": "{{elevated}}"
										}
									]
								}
							},
							"response": [
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"assetId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"dept\": \"<string>\",\n    \"ip\": \"<string>\",\n    \"nonnetwork\": \"<boolean>\",\n    \"scanexempt\": \"<boolean>\",\n    \"collectionIds\": [\n        \"<integer>\",\n        \"<integer>\"\n    ],\n    \"benchmarkIds\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"stigReviewers\": [\n        {\n            \"benchmarkId\": \"<string>\",\n            \"userIds\": [\n                \"<integer>\",\n                \"<integer>\"\n            ]\n        },\n        {\n            \"benchmarkId\": \"<string>\",\n            \"userIds\": [\n                \"<integer>\",\n                \"<integer>\"\n            ]\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/assets?projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"assets"
											],
											"query": [
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
								},
								{
									"name": "AssetProjected response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"assetId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"dept\": \"<string>\",\n    \"ip\": \"<string>\",\n    \"nonnetwork\": \"<boolean>\",\n    \"scanexempt\": \"<boolean>\",\n    \"collectionIds\": [\n        \"<integer>\",\n        \"<integer>\"\n    ],\n    \"benchmarkIds\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"stigReviewers\": [\n        {\n            \"benchmarkId\": \"<string>\",\n            \"userIds\": [\n                \"<integer>\",\n                \"<integer>\"\n            ]\n        },\n        {\n            \"benchmarkId\": \"<string>\",\n            \"userIds\": [\n                \"<integer>\",\n                \"<integer>\"\n            ]\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/assets?projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"assets"
											],
											"query": [
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"assetId\": \"<integer>\",\n \"name\": \"<string>\",\n \"dept\": \"<string>\",\n \"ip\": \"<string>\",\n \"nonnetwork\": \"<boolean>\",\n \"scanexempt\": \"<boolean>\",\n \"adminStats\": {\n  \"stigCount\": \"<integer>\",\n  \"stigAssignedCount\": \"<integer>\"\n },\n \"collections\": [\n  {\n   \"collectionId\": \"<integer>\",\n   \"name\": \"<string>\"\n  },\n  {\n   \"collectionId\": \"<integer>\",\n   \"name\": \"<string>\"\n  }\n ],\n \"stigs\": [\n  {\n   \"benchmarkId\": \"<string>\",\n   \"lastRevisionStr\": \"<string>\",\n   \"lastRevisionDate\": \"<string>\",\n   \"title\": \"<string>\"\n  },\n  {\n   \"benchmarkId\": \"<string>\",\n   \"lastRevisionStr\": \"<string>\",\n   \"lastRevisionDate\": \"<string>\",\n   \"title\": \"<string>\"\n  }\n ],\n \"stigReviewers\": [\n  {\n   \"benchmarkId\": \"<string>\",\n   \"reviewers\": [\n    {\n     \"userId\": \"<integer>\",\n     \"username\": \"<string>\"\n    },\n    {\n     \"userId\": \"<integer>\",\n     \"username\": \"<string>\"\n    }\n   ]\n  },\n  {\n   \"benchmarkId\": \"<string>\",\n   \"reviewers\": [\n    {\n     \"userId\": \"<integer>\",\n     \"username\": \"<string>\"\n    },\n    {\n     \"userId\": \"<integer>\",\n     \"username\": \"<string>\"\n    }\n   ]\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "Merge updates to an Asset",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8944016c-8453-4266-962d-75d0c62eae6c",
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"if (user == \"wf10\") {\r",
											"    pm.test(\"Status should be is 403 for user wf10\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"user is elevated\");\r",
											"\r",
											"}\r",
											"\r",
											"var stuff = pm.request.auth;\r",
											"var stuff = pm.request;\r",
											"\r",
											"if (user == 'elevated' || user == 'staff' || user == \"officer60\") {\r",
											"    pm.test(\"User is elevated. Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"else {\r",
											"    pm.test(\"User is not Staff, IAO (w/ proper dept) or elevated. Expected status code is 403\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"\r",
											"if (pm.response.code == 500) {\r",
											"    console.log(\"Server returned 500\")\r",
											"    return;\r",
											"}\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Response JSON is an object\", function () {\r",
											"    pm.expect(jsonData).to.be.an('object');\r",
											"});\r",
											"\r",
											"let createdAsset = jsonData.assetId;\r",
											"\r",
											"\r",
											"pm.test(`Patched Asset: ${createdAsset}`, function () {\r",
											"    pm.expect(createdAsset).to.be.an('string');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"z_testAssetPatched\",\n    \"ip\": \"1.1.1.1\",\n    \"nonnetwork\": true,\n    \"metadata\": {},\n    \"stigs\": [\n       \"DNS_SRG\"\n    ]\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/assets/:assetId?elevate={{elevated}}&projection=stigGrants&projection=stigs&projection=adminStats",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"assets",
										":assetId"
									],
									"query": [
										{
											"key": "elevate",
											"value": "{{elevated}}",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)"
										},
										{
											"key": "projection",
											"value": "stigGrants",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "stigs",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "adminStats"
										}
									],
									"variable": [
										{
											"id": "60dc8f94-cf94-4425-8f16-3785dc0cda01",
											"key": "assetId",
											"value": "{{createdAsset}}",
											"type": "string",
											"description": "(Required) A path parameter that indentifies an Asset"
										}
									]
								}
							},
							"response": [
								{
									"name": "AssetProjected response",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"assetId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"dept\": \"<string>\",\n    \"ip\": \"<string>\",\n    \"nonnetwork\": \"<boolean>\",\n    \"scanexempt\": \"<boolean>\",\n    \"collectionIds\": [\n        \"<integer>\",\n        \"<integer>\"\n    ],\n    \"benchmarkIds\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"stigReviewers\": [\n        {\n            \"benchmarkId\": \"<string>\",\n            \"userIds\": [\n                \"<integer>\",\n                \"<integer>\"\n            ]\n        },\n        {\n            \"benchmarkId\": \"<string>\",\n            \"userIds\": [\n                \"<integer>\",\n                \"<integer>\"\n            ]\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/assets/:assetId?elevate=<boolean>&projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"assets",
												":assetId"
											],
											"query": [
												{
													"key": "elevate",
													"value": "<boolean>"
												},
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "assetId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"assetId\": \"<integer>\",\n \"name\": \"<string>\",\n \"dept\": \"<string>\",\n \"ip\": \"<string>\",\n \"nonnetwork\": \"<boolean>\",\n \"scanexempt\": \"<boolean>\",\n \"adminStats\": {\n  \"stigCount\": \"<integer>\",\n  \"stigAssignedCount\": \"<integer>\"\n },\n \"collections\": [\n  {\n   \"collectionId\": \"<integer>\",\n   \"name\": \"<string>\"\n  },\n  {\n   \"collectionId\": \"<integer>\",\n   \"name\": \"<string>\"\n  }\n ],\n \"stigs\": [\n  {\n   \"benchmarkId\": \"<string>\",\n   \"lastRevisionStr\": \"<string>\",\n   \"lastRevisionDate\": \"<string>\",\n   \"title\": \"<string>\"\n  },\n  {\n   \"benchmarkId\": \"<string>\",\n   \"lastRevisionStr\": \"<string>\",\n   \"lastRevisionDate\": \"<string>\",\n   \"title\": \"<string>\"\n  }\n ],\n \"stigReviewers\": [\n  {\n   \"benchmarkId\": \"<string>\",\n   \"reviewers\": [\n    {\n     \"userId\": \"<integer>\",\n     \"username\": \"<string>\"\n    },\n    {\n     \"userId\": \"<integer>\",\n     \"username\": \"<string>\"\n    }\n   ]\n  },\n  {\n   \"benchmarkId\": \"<string>\",\n   \"reviewers\": [\n    {\n     \"userId\": \"<integer>\",\n     \"username\": \"<string>\"\n    },\n    {\n     \"userId\": \"<integer>\",\n     \"username\": \"<string>\"\n    }\n   ]\n  }\n ]\n}"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"assetId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"dept\": \"<string>\",\n    \"ip\": \"<string>\",\n    \"nonnetwork\": \"<boolean>\",\n    \"scanexempt\": \"<boolean>\",\n    \"collectionIds\": [\n        \"<integer>\",\n        \"<integer>\"\n    ],\n    \"benchmarkIds\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"stigReviewers\": [\n        {\n            \"benchmarkId\": \"<string>\",\n            \"userIds\": [\n                \"<integer>\",\n                \"<integer>\"\n            ]\n        },\n        {\n            \"benchmarkId\": \"<string>\",\n            \"userIds\": [\n                \"<integer>\",\n                \"<integer>\"\n            ]\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/assets/:assetId?elevate=<boolean>&projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"assets",
												":assetId"
											],
											"query": [
												{
													"key": "elevate",
													"value": "<boolean>"
												},
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "assetId"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Replace all properties of an Asset",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dcb255da-072a-409b-93f8-fcb22019609b",
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"if (user == \"wf10\") {\r",
											"    pm.test(\"Status should be is 403 for user wf10\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"user is elevated\");\r",
											"\r",
											"}\r",
											"\r",
											"var stuff = pm.request.auth;\r",
											"var stuff = pm.request;\r",
											"\r",
											"if (user == 'elevated' || user == 'lvl3' || user == \"lvl4\") {\r",
											"    pm.test(\"User is elevated, lvl3, or lvl4. Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"else {\r",
											"    pm.test(\"User is not lvl3, lvl4 or elevated. Expected status code is 403\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"\r",
											"if (pm.response.code == 500) {\r",
											"    console.log(\"Server returned 500\")\r",
											"    return;\r",
											"}\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Response JSON is an object\", function () {\r",
											"    pm.expect(jsonData).to.be.an('object');\r",
											"});\r",
											"\r",
											"let createdAsset = jsonData.assetId;\r",
											"\r",
											"pm.test(`Put Asset: ${createdAsset}`, function () {\r",
											"    pm.expect(createdAsset).to.be.an('string');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"z_testAssetPut\",\n    \"ip\": \"1.1.1.2\",\n    \"nonnetwork\": false,\n    \"collectionId\": \"21\",\n    \"stigs\": [\n        \"DNS_SRG\"\n    ],\n    \"metadata\": {  \n        \"assetName2\": \"namely\"\n    }\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/assets/:assetId?elevate={{elevated}}&projection=stigGrants&projection=stigs&projection=adminStats",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"assets",
										":assetId"
									],
									"query": [
										{
											"key": "elevate",
											"value": "{{elevated}}",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)"
										},
										{
											"key": "projection",
											"value": "stigGrants",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "stigs",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "adminStats"
										}
									],
									"variable": [
										{
											"id": "f451ef46-9c4c-4dde-858b-76b06fead7e3",
											"key": "assetId",
											"value": "{{createdAsset}}",
											"type": "string",
											"description": "(Required) A path parameter that indentifies an Asset"
										}
									]
								}
							},
							"response": [
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"assetId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"dept\": \"<string>\",\n    \"ip\": \"<string>\",\n    \"nonnetwork\": \"<boolean>\",\n    \"scanexempt\": \"<boolean>\",\n    \"collectionIds\": [\n        \"<integer>\",\n        \"<integer>\"\n    ],\n    \"benchmarkIds\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"stigReviewers\": [\n        {\n            \"benchmarkId\": \"<string>\",\n            \"userIds\": [\n                \"<integer>\",\n                \"<integer>\"\n            ]\n        },\n        {\n            \"benchmarkId\": \"<string>\",\n            \"userIds\": [\n                \"<integer>\",\n                \"<integer>\"\n            ]\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/assets/:assetId?elevate=<boolean>&projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"assets",
												":assetId"
											],
											"query": [
												{
													"key": "elevate",
													"value": "<boolean>"
												},
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "assetId"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
								},
								{
									"name": "AssetProjected response",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"assetId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"dept\": \"<string>\",\n    \"ip\": \"<string>\",\n    \"nonnetwork\": \"<boolean>\",\n    \"scanexempt\": \"<boolean>\",\n    \"collectionIds\": [\n        \"<integer>\",\n        \"<integer>\"\n    ],\n    \"benchmarkIds\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"stigReviewers\": [\n        {\n            \"benchmarkId\": \"<string>\",\n            \"userIds\": [\n                \"<integer>\",\n                \"<integer>\"\n            ]\n        },\n        {\n            \"benchmarkId\": \"<string>\",\n            \"userIds\": [\n                \"<integer>\",\n                \"<integer>\"\n            ]\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/assets/:assetId?elevate=<boolean>&projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"assets",
												":assetId"
											],
											"query": [
												{
													"key": "elevate",
													"value": "<boolean>"
												},
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "assetId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"assetId\": \"<integer>\",\n \"name\": \"<string>\",\n \"dept\": \"<string>\",\n \"ip\": \"<string>\",\n \"nonnetwork\": \"<boolean>\",\n \"scanexempt\": \"<boolean>\",\n \"adminStats\": {\n  \"stigCount\": \"<integer>\",\n  \"stigAssignedCount\": \"<integer>\"\n },\n \"collections\": [\n  {\n   \"collectionId\": \"<integer>\",\n   \"name\": \"<string>\"\n  },\n  {\n   \"collectionId\": \"<integer>\",\n   \"name\": \"<string>\"\n  }\n ],\n \"stigs\": [\n  {\n   \"benchmarkId\": \"<string>\",\n   \"lastRevisionStr\": \"<string>\",\n   \"lastRevisionDate\": \"<string>\",\n   \"title\": \"<string>\"\n  },\n  {\n   \"benchmarkId\": \"<string>\",\n   \"lastRevisionStr\": \"<string>\",\n   \"lastRevisionDate\": \"<string>\",\n   \"title\": \"<string>\"\n  }\n ],\n \"stigReviewers\": [\n  {\n   \"benchmarkId\": \"<string>\",\n   \"reviewers\": [\n    {\n     \"userId\": \"<integer>\",\n     \"username\": \"<string>\"\n    },\n    {\n     \"userId\": \"<integer>\",\n     \"username\": \"<string>\"\n    }\n   ]\n  },\n  {\n   \"benchmarkId\": \"<string>\",\n   \"reviewers\": [\n    {\n     \"userId\": \"<integer>\",\n     \"username\": \"<string>\"\n    },\n    {\n     \"userId\": \"<integer>\",\n     \"username\": \"<string>\"\n    }\n   ]\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "Delete an Asset",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9d79a022-b07c-45cb-a67b-8c2b4fe901e7",
										"exec": [
											"\r",
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"if (user == \"wf10\") {\r",
											"    pm.test(\"Status should be is 403 for user wf10\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"}\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"if (user == \"lvl1\" || user == \"lvl2\" || user == \"collectionCreator\" || user == \"globular\" || user == \"admin\") {\r",
											"    pm.test(\"Status code should be 403\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    console.log(`Status code: ${pm.response.code}. Either previous test did not create the collection, the collection has already been deleted, or this user is not authorized to delete this collection.`);\r",
											"    return;\r",
											"}\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"console.log(jsonData);\r",
											"// console.log(pm.environment.get(\"env\"));\r",
											"\r",
											"pm.test(\"Response is a JSON object\", function () {\r",
											"    pm.expect(jsonData).to.be.an('object');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/assets/:assetId?projection=stigs&projection=stigGrants&projection=adminStats&elevate={{elevated}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"assets",
										":assetId"
									],
									"query": [
										{
											"key": "projection",
											"value": "stigs",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "stigGrants",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "adminStats"
										},
										{
											"key": "elevate",
											"value": "{{elevated}}",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)"
										}
									],
									"variable": [
										{
											"id": "4419286c-7ec0-43e6-9585-752c7c7a7d6e",
											"key": "assetId",
											"value": "{{createdAsset}}",
											"type": "string",
											"description": "(Required) A path parameter that indentifies an Asset"
										}
									]
								}
							},
							"response": [
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/assets/:assetId?elevate=<boolean>&projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"assets",
												":assetId"
											],
											"query": [
												{
													"key": "elevate",
													"value": "<boolean>"
												},
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "assetId"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
								},
								{
									"name": "AssetProjected response",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/assets/:assetId?elevate=<boolean>&projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"assets",
												":assetId"
											],
											"query": [
												{
													"key": "elevate",
													"value": "<boolean>"
												},
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "assetId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"assetId\": \"<integer>\",\n \"name\": \"<string>\",\n \"dept\": \"<string>\",\n \"ip\": \"<string>\",\n \"nonnetwork\": \"<boolean>\",\n \"scanexempt\": \"<boolean>\",\n \"adminStats\": {\n  \"stigCount\": \"<integer>\",\n  \"stigAssignedCount\": \"<integer>\"\n },\n \"collections\": [\n  {\n   \"collectionId\": \"<integer>\",\n   \"name\": \"<string>\"\n  },\n  {\n   \"collectionId\": \"<integer>\",\n   \"name\": \"<string>\"\n  }\n ],\n \"stigs\": [\n  {\n   \"benchmarkId\": \"<string>\",\n   \"lastRevisionStr\": \"<string>\",\n   \"lastRevisionDate\": \"<string>\",\n   \"title\": \"<string>\"\n  },\n  {\n   \"benchmarkId\": \"<string>\",\n   \"lastRevisionStr\": \"<string>\",\n   \"lastRevisionDate\": \"<string>\",\n   \"title\": \"<string>\"\n  }\n ],\n \"stigReviewers\": [\n  {\n   \"benchmarkId\": \"<string>\",\n   \"reviewers\": [\n    {\n     \"userId\": \"<integer>\",\n     \"username\": \"<string>\"\n    },\n    {\n     \"userId\": \"<integer>\",\n     \"username\": \"<string>\"\n    }\n   ]\n  },\n  {\n   \"benchmarkId\": \"<string>\",\n   \"reviewers\": [\n    {\n     \"userId\": \"<integer>\",\n     \"username\": \"<string>\"\n    },\n    {\n     \"userId\": \"<integer>\",\n     \"username\": \"<string>\"\n    }\n   ]\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "Delete an Asset CLEANUP",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "80471f1d-2669-4aee-83b4-9277ab6b3655",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{token.admin}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/assets/:assetId?elevate=true&projection=stigReviewers&projection=adminStats",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"assets",
										":assetId"
									],
									"query": [
										{
											"key": "elevate",
											"value": "true",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)"
										},
										{
											"key": "projection",
											"value": "stigReviewers",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "adminStats"
										}
									],
									"variable": [
										{
											"id": "de1d0706-56e6-44b2-b375-4b4edc6dd7e9",
											"key": "assetId",
											"value": "{{createdAsset}}",
											"type": "string",
											"description": "(Required) A path parameter that indentifies an Asset"
										}
									]
								}
							},
							"response": [
								{
									"name": "AssetProjected response",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/assets/:assetId?elevate=<boolean>&projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"assets",
												":assetId"
											],
											"query": [
												{
													"key": "elevate",
													"value": "<boolean>"
												},
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "assetId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"assetId\": \"<integer>\",\n \"name\": \"<string>\",\n \"dept\": \"<string>\",\n \"ip\": \"<string>\",\n \"nonnetwork\": \"<boolean>\",\n \"scanexempt\": \"<boolean>\",\n \"adminStats\": {\n  \"stigCount\": \"<integer>\",\n  \"stigAssignedCount\": \"<integer>\"\n },\n \"collections\": [\n  {\n   \"collectionId\": \"<integer>\",\n   \"name\": \"<string>\"\n  },\n  {\n   \"collectionId\": \"<integer>\",\n   \"name\": \"<string>\"\n  }\n ],\n \"stigs\": [\n  {\n   \"benchmarkId\": \"<string>\",\n   \"lastRevisionStr\": \"<string>\",\n   \"lastRevisionDate\": \"<string>\",\n   \"title\": \"<string>\"\n  },\n  {\n   \"benchmarkId\": \"<string>\",\n   \"lastRevisionStr\": \"<string>\",\n   \"lastRevisionDate\": \"<string>\",\n   \"title\": \"<string>\"\n  }\n ],\n \"stigReviewers\": [\n  {\n   \"benchmarkId\": \"<string>\",\n   \"reviewers\": [\n    {\n     \"userId\": \"<integer>\",\n     \"username\": \"<string>\"\n    },\n    {\n     \"userId\": \"<integer>\",\n     \"username\": \"<string>\"\n    }\n   ]\n  },\n  {\n   \"benchmarkId\": \"<string>\",\n   \"reviewers\": [\n    {\n     \"userId\": \"<integer>\",\n     \"username\": \"<string>\"\n    },\n    {\n     \"userId\": \"<integer>\",\n     \"username\": \"<string>\"\n    }\n   ]\n  }\n ]\n}"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/assets/:assetId?elevate=<boolean>&projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"assets",
												":assetId"
											],
											"query": [
												{
													"key": "elevate",
													"value": "<boolean>"
												},
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "assetId"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Return the Checklist for the supplied Asset and STIG",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "76b6708a-b95e-4e97-88f5-0e09038ab038",
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"if (user == \"collectionCreator\") {\r",
											"    pm.test(\"Status should be is 403 for user collectionCreator\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"let elevated = pm.environment.get(\"elevated\");\r",
											"console.log(\"user: \" + user);\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"}\r",
											"\r",
											"\r",
											"console.log(jsonData);\r",
											"// console.log(pm.environment.get(\"env\"));\r",
											"\r",
											"pm.test(\"Response JSON is an array\", function () {\r",
											"    pm.expect(jsonData).to.be.an('array');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/assets/:assetId/checklists/:benchmarkId/:revisionStr?elevate={{elevated}}&format=json",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"assets",
										":assetId",
										"checklists",
										":benchmarkId",
										":revisionStr"
									],
									"query": [
										{
											"key": "elevate",
											"value": "{{elevated}}",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)"
										},
										{
											"key": "format",
											"value": "json",
											"description": "The format of the response. Default if missing is 'json'"
										}
									],
									"variable": [
										{
											"id": "ec18805c-6af9-4a7e-87b9-7a515daea518",
											"key": "assetId",
											"value": "{{assets.queryAsset}}",
											"type": "string",
											"description": "(Required) A path parameter that indentifies an Asset"
										},
										{
											"id": "0094559d-f3dd-4776-8ee1-e5fc3203d517",
											"key": "benchmarkId",
											"value": "{{assets.queryBenchmark}}",
											"type": "string",
											"description": "(Required) A path parameter that indentifies a STIG"
										},
										{
											"id": "30220af8-ac65-4019-856f-ba32ee63f7ea",
											"key": "revisionStr",
											"value": "{{assets.queryRev}}",
											"type": "string",
											"description": "(Required) A path parameter that indentifies a STIG revision [ V{version_num}R{release_num} | 'latest' ]"
										}
									]
								}
							},
							"response": [
								{
									"name": "Review response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/assets/:assetId/checklists/:benchmarkId/:revisionStr?elevate=<boolean>&format=json",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"assets",
												":assetId",
												"checklists",
												":benchmarkId",
												":revisionStr"
											],
											"query": [
												{
													"key": "elevate",
													"value": "<boolean>"
												},
												{
													"key": "format",
													"value": "json"
												}
											],
											"variable": [
												{
													"key": "assetId"
												},
												{
													"key": "benchmarkId"
												},
												{
													"key": "revisionStr"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"reviewId\": \"<integer>\",\n \"assetId\": \"<integer>\",\n \"ruleId\": \"<string>\",\n \"state\": \"<string>\",\n \"stateComment\": \"<string>\",\n \"autoState\": \"<boolean>\",\n \"action\": \"<string>\",\n \"actionComment\": \"<string>\",\n \"reqDoc\": \"<boolean>\",\n \"status\": \"<string>\",\n \"userId\": \"<integer>\",\n \"ts\": \"<string>\",\n \"rejectText\": \"<string>\",\n \"rejectUserId\": \"<integer>\"\n}"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/assets/:assetId/checklists/:benchmarkId/:revisionStr?elevate=<boolean>&format=json",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"assets",
												":assetId",
												"checklists",
												":benchmarkId",
												":revisionStr"
											],
											"query": [
												{
													"key": "elevate",
													"value": "<boolean>"
												},
												{
													"key": "format",
													"value": "json"
												}
											],
											"variable": [
												{
													"key": "assetId"
												},
												{
													"key": "benchmarkId"
												},
												{
													"key": "revisionStr"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "asset - get - assetId no StigReviewers projection (prohibited for level 1)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e530d19a-02cc-45d8-8a09-429b23519aa0",
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"if (user == \"wf10\") {\r",
											"    pm.test(\"Status should be 403 for user wf10, elevated\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"\r",
											"\r",
											"let elevated = pm.environment.get(\"elevated\");\r",
											"console.log(\"user: \" + user);\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"}\r",
											"\r",
											"if (user == \"collectionCreator\") {\r",
											"    pm.test(\"Status should be 403 for user collectionCreator, not elevated\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"return;\r",
											"}\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"console.log(jsonData);\r",
											"// console.log(pm.environment.get(\"env\"));\r",
											"\r",
											"pm.test(\"Response JSON is an object\", function () {\r",
											"    pm.expect(jsonData).to.be.an('object');\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"let allowedCollections, disallowedCollections, validStigs, invalidStigs, validAssets, invalidAssets;\r",
											"console.log(\"assignments\");\r",
											"// allowedCollections = JSON.parse(pm.environment.get((\"collections.valid\")));\r",
											"// disallowedCollections = JSON.parse(pm.environment.get(\"collections.invalid\"));\r",
											"validStigs = JSON.parse(pm.environment.get(\"stigs.valid\"));\r",
											"// invalidStigs = JSON.parse(pm.environment.get(\"stigs.invalid\"));\r",
											"// validAssets = JSON.parse(pm.environment.get(\"assets.valid\"));\r",
											"// invalidAssets = JSON.parse(pm.environment.get(\"assets.invalid\"));\r",
											"console.log(\"user is \" + user);\r",
											"\r",
											"\r",
											"let collectionIds = [];\r",
											"let assetIds = [];\r",
											"let stigReviewersStigs = [];\r",
											"let stigs = [];\r",
											"\r",
											"\r",
											"pm.test(\"Each item in response has proper properties\", function () {\r",
											"    // pm.expect(jsonData).to.have.property('collections');\r",
											"    // collectionIds.push(jsonData.collectionId);\r",
											"    pm.expect(jsonData).to.have.property('adminStats');\r",
											"    pm.expect(jsonData).to.have.property('stigs');\r",
											"\r",
											"    // jsonData.collections.forEach(function (collection) {\r",
											"    //     pm.expect(collection).to.have.property('collectionId');\r",
											"    //     collectionIds.push(collection.collectionId);\r",
											"    // });\r",
											"    jsonData.stigs.forEach(function (stig) {\r",
											"        pm.expect(stig).to.have.property('benchmarkId');\r",
											"        stigs.push(stig.benchmarkId);\r",
											"    });\r",
											"\r",
											"    // pm.expect(collectionIds).to.include.oneOf(allowedCollections);\r",
											"});\r",
											"\r",
											"console.log(\"collectionIds = \" + collectionIds);\r",
											"\r",
											"pm.test(\"Response contains valid projection data (collections)\", function () {\r",
											"    collectionIds.forEach( function (collection) {\r",
											"    console.log(\"checking collectionId: \" + collection);\r",
											"    pm.expect(collection).to.be.oneOf(allowedCollections);\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains valid projection data (stigs)\", function () {\r",
											"    stigs.forEach( function (stig) {\r",
											"    console.log(\"checking stig: \" + stig);\r",
											"    pm.expect(stig).to.be.oneOf(validStigs);\r",
											"    });\r",
											"});\r",
											"\r",
											" if (user != \"wf60\" && user != \"guest\"){\r",
											"    pm.test(\"Response contains valid projection data (stigs in stigReviewers objects)\", function () {\r",
											"    stigReviewersStigs.forEach( function (stig) {\r",
											"        console.log(\"checking stig: \" + stig);\r",
											"        pm.expect(stig).to.be.oneOf(validStigs);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/assets/:assetId?projection=adminStats&elevate={{elevated}}&projection=stigs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"assets",
										":assetId"
									],
									"query": [
										{
											"key": "projection",
											"value": "adminStats"
										},
										{
											"key": "elevate",
											"value": "{{elevated}}"
										},
										{
											"key": "projection",
											"value": "stigs"
										}
									],
									"variable": [
										{
											"id": "7b0f1e5b-b646-48f0-926c-eaf309452902",
											"key": "assetId",
											"value": "{{assets.queryAsset}}",
											"type": "string"
										}
									]
								}
							},
							"response": [
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/assets/:assetId?elevate=<boolean>&projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"assets",
												":assetId"
											],
											"query": [
												{
													"key": "elevate",
													"value": "<boolean>"
												},
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "assetId"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
								},
								{
									"name": "AssetProjected response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/assets/:assetId?elevate=<boolean>&projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"assets",
												":assetId"
											],
											"query": [
												{
													"key": "elevate",
													"value": "<boolean>"
												},
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "assetId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"assetId\": \"<integer>\",\n \"name\": \"<string>\",\n \"dept\": \"<string>\",\n \"ip\": \"<string>\",\n \"nonnetwork\": \"<boolean>\",\n \"scanexempt\": \"<boolean>\",\n \"adminStats\": {\n  \"stigCount\": \"<integer>\",\n  \"stigAssignedCount\": \"<integer>\"\n },\n \"collections\": [\n  {\n   \"collectionId\": \"<integer>\",\n   \"name\": \"<string>\"\n  },\n  {\n   \"collectionId\": \"<integer>\",\n   \"name\": \"<string>\"\n  }\n ],\n \"stigs\": [\n  {\n   \"benchmarkId\": \"<string>\",\n   \"lastRevisionStr\": \"<string>\",\n   \"lastRevisionDate\": \"<string>\",\n   \"title\": \"<string>\"\n  },\n  {\n   \"benchmarkId\": \"<string>\",\n   \"lastRevisionStr\": \"<string>\",\n   \"lastRevisionDate\": \"<string>\",\n   \"title\": \"<string>\"\n  }\n ],\n \"stigReviewers\": [\n  {\n   \"benchmarkId\": \"<string>\",\n   \"reviewers\": [\n    {\n     \"userId\": \"<integer>\",\n     \"username\": \"<string>\"\n    },\n    {\n     \"userId\": \"<integer>\",\n     \"username\": \"<string>\"\n    }\n   ]\n  },\n  {\n   \"benchmarkId\": \"<string>\",\n   \"reviewers\": [\n    {\n     \"userId\": \"<integer>\",\n     \"username\": \"<string>\"\n    },\n    {\n     \"userId\": \"<integer>\",\n     \"username\": \"<string>\"\n    }\n   ]\n  }\n ]\n}"
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "342ed4d1-ff72-4c34-8f46-ce06f9e33974",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "859e5331-0986-494a-abe0-7e9f9e588804",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Optional Params and Edge Cases",
					"item": [
						{
							"name": "Create an Asset - lvl3- non-existent collection",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "86eb5f8a-b808-4df5-99df-ac92a2aae5e1",
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"pm.test(\"Status should be is 403 for posting asset to non-existent collection\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"return;\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"user is elevated\");\r",
											"\r",
											"}\r",
											"\r",
											"var stuff = pm.request.auth;\r",
											"var stuff = pm.request;\r",
											"\r",
											"if (user == 'elevated' || user == 'staff' ) {\r",
											"    pm.test(\"User is elevated. Status code is 201\", function () {\r",
											"        pm.response.to.have.status(201);\r",
											"    });\r",
											"}\r",
											"else {\r",
											"    pm.test(\"User is not elevated, or staff, or code 85 IAO. Expected status code is 403\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"\r",
											"if (pm.response.code == 500) {\r",
											"    console.log(\"Server returned 500\")\r",
											"    return;\r",
											"}\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Response JSON is an object\", function () {\r",
											"    pm.expect(jsonData).to.be.an('object');\r",
											"});\r",
											"\r",
											"let createdAsset = jsonData.assetId;\r",
											"console.log(\"created asset: \" + createdAsset)\r",
											"pm.environment.set(\"createdAsset\", createdAsset);\r",
											"\r",
											"pm.test(`Created Asset: ${createdAsset}`, function () {\r",
											"    pm.expect(createdAsset).to.be.an('number');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"z_testAsset_expectFail-1\",\n    \"collectionId\": \"2\",\n    \"ip\": \"\",\n    \"nonnetwork\": false,\n    \"stigs\": [],\n    \"metadata\":{}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/assets?projection=stigGrants&projection=adminStats&elevate={{elevated}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"assets"
									],
									"query": [
										{
											"key": "projection",
											"value": "stigs",
											"description": "Additional properties to include in the response.\n",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "stigGrants"
										},
										{
											"key": "projection",
											"value": "adminStats"
										},
										{
											"key": "elevate",
											"value": "{{elevated}}"
										}
									]
								}
							},
							"response": [
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"assetId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"dept\": \"<string>\",\n    \"ip\": \"<string>\",\n    \"nonnetwork\": \"<boolean>\",\n    \"scanexempt\": \"<boolean>\",\n    \"collectionIds\": [\n        \"<integer>\",\n        \"<integer>\"\n    ],\n    \"benchmarkIds\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"stigReviewers\": [\n        {\n            \"benchmarkId\": \"<string>\",\n            \"userIds\": [\n                \"<integer>\",\n                \"<integer>\"\n            ]\n        },\n        {\n            \"benchmarkId\": \"<string>\",\n            \"userIds\": [\n                \"<integer>\",\n                \"<integer>\"\n            ]\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/assets?projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"assets"
											],
											"query": [
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
								},
								{
									"name": "AssetProjected response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"assetId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"dept\": \"<string>\",\n    \"ip\": \"<string>\",\n    \"nonnetwork\": \"<boolean>\",\n    \"scanexempt\": \"<boolean>\",\n    \"collectionIds\": [\n        \"<integer>\",\n        \"<integer>\"\n    ],\n    \"benchmarkIds\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"stigReviewers\": [\n        {\n            \"benchmarkId\": \"<string>\",\n            \"userIds\": [\n                \"<integer>\",\n                \"<integer>\"\n            ]\n        },\n        {\n            \"benchmarkId\": \"<string>\",\n            \"userIds\": [\n                \"<integer>\",\n                \"<integer>\"\n            ]\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/assets?projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"assets"
											],
											"query": [
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"assetId\": \"<integer>\",\n \"name\": \"<string>\",\n \"dept\": \"<string>\",\n \"ip\": \"<string>\",\n \"nonnetwork\": \"<boolean>\",\n \"scanexempt\": \"<boolean>\",\n \"adminStats\": {\n  \"stigCount\": \"<integer>\",\n  \"stigAssignedCount\": \"<integer>\"\n },\n \"collections\": [\n  {\n   \"collectionId\": \"<integer>\",\n   \"name\": \"<string>\"\n  },\n  {\n   \"collectionId\": \"<integer>\",\n   \"name\": \"<string>\"\n  }\n ],\n \"stigs\": [\n  {\n   \"benchmarkId\": \"<string>\",\n   \"lastRevisionStr\": \"<string>\",\n   \"lastRevisionDate\": \"<string>\",\n   \"title\": \"<string>\"\n  },\n  {\n   \"benchmarkId\": \"<string>\",\n   \"lastRevisionStr\": \"<string>\",\n   \"lastRevisionDate\": \"<string>\",\n   \"title\": \"<string>\"\n  }\n ],\n \"stigReviewers\": [\n  {\n   \"benchmarkId\": \"<string>\",\n   \"reviewers\": [\n    {\n     \"userId\": \"<integer>\",\n     \"username\": \"<string>\"\n    },\n    {\n     \"userId\": \"<integer>\",\n     \"username\": \"<string>\"\n    }\n   ]\n  },\n  {\n   \"benchmarkId\": \"<string>\",\n   \"reviewers\": [\n    {\n     \"userId\": \"<integer>\",\n     \"username\": \"<string>\"\n    },\n    {\n     \"userId\": \"<integer>\",\n     \"username\": \"<string>\"\n    }\n   ]\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "Delete an Asset CLEANUP",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4fd53321-67e1-46ef-a2fb-7ca3042dbdfe",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{token.admin}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/assets/:assetId?elevate=true&projection=stigReviewers&projection=adminStats",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"assets",
										":assetId"
									],
									"query": [
										{
											"key": "elevate",
											"value": "true",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)"
										},
										{
											"key": "projection",
											"value": "stigReviewers",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "adminStats"
										}
									],
									"variable": [
										{
											"id": "8e68a22f-b7fe-4488-b32f-175da57a8b0d",
											"key": "assetId",
											"value": "{{createdAsset}}",
											"type": "string",
											"description": "(Required) A path parameter that indentifies an Asset"
										}
									]
								}
							},
							"response": [
								{
									"name": "AssetProjected response",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/assets/:assetId?elevate=<boolean>&projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"assets",
												":assetId"
											],
											"query": [
												{
													"key": "elevate",
													"value": "<boolean>"
												},
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "assetId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"assetId\": \"<integer>\",\n \"name\": \"<string>\",\n \"dept\": \"<string>\",\n \"ip\": \"<string>\",\n \"nonnetwork\": \"<boolean>\",\n \"scanexempt\": \"<boolean>\",\n \"adminStats\": {\n  \"stigCount\": \"<integer>\",\n  \"stigAssignedCount\": \"<integer>\"\n },\n \"collections\": [\n  {\n   \"collectionId\": \"<integer>\",\n   \"name\": \"<string>\"\n  },\n  {\n   \"collectionId\": \"<integer>\",\n   \"name\": \"<string>\"\n  }\n ],\n \"stigs\": [\n  {\n   \"benchmarkId\": \"<string>\",\n   \"lastRevisionStr\": \"<string>\",\n   \"lastRevisionDate\": \"<string>\",\n   \"title\": \"<string>\"\n  },\n  {\n   \"benchmarkId\": \"<string>\",\n   \"lastRevisionStr\": \"<string>\",\n   \"lastRevisionDate\": \"<string>\",\n   \"title\": \"<string>\"\n  }\n ],\n \"stigReviewers\": [\n  {\n   \"benchmarkId\": \"<string>\",\n   \"reviewers\": [\n    {\n     \"userId\": \"<integer>\",\n     \"username\": \"<string>\"\n    },\n    {\n     \"userId\": \"<integer>\",\n     \"username\": \"<string>\"\n    }\n   ]\n  },\n  {\n   \"benchmarkId\": \"<string>\",\n   \"reviewers\": [\n    {\n     \"userId\": \"<integer>\",\n     \"username\": \"<string>\"\n    },\n    {\n     \"userId\": \"<integer>\",\n     \"username\": \"<string>\"\n    }\n   ]\n  }\n ]\n}"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/assets/:assetId?elevate=<boolean>&projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"assets",
												":assetId"
											],
											"query": [
												{
													"key": "elevate",
													"value": "<boolean>"
												},
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "assetId"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Create an Asset - no Privs in collection",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3aa4fd29-8e5c-4aec-8b1b-a0102a4bc69d",
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"\r",
											"pm.test(\"Status should be is 403 for posting asset with invalid reviewer\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"return;\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"user is elevated\");\r",
											"\r",
											"}\r",
											"\r",
											"var stuff = pm.request.auth;\r",
											"var stuff = pm.request;\r",
											"\r",
											"if (user == 'elevated' || user == 'staff' ) {\r",
											"    pm.test(\"User is elevated. Status code is 201\", function () {\r",
											"        pm.response.to.have.status(201);\r",
											"    });\r",
											"}\r",
											"else {\r",
											"    pm.test(\"User is not elevated, or staff, or code 85 IAO. Expected status code is 403\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"\r",
											"if (pm.response.code == 500) {\r",
											"    console.log(\"Server returned 500\")\r",
											"    return;\r",
											"}\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Response JSON is an object\", function () {\r",
											"    pm.expect(jsonData).to.be.an('object');\r",
											"});\r",
											"\r",
											"let createdAsset = jsonData.assetId;\r",
											"console.log(\"created asset: \" + createdAsset)\r",
											"pm.environment.set(\"createdAsset\", createdAsset);\r",
											"\r",
											"pm.test(`Created Asset: ${createdAsset}`, function () {\r",
											"    pm.expect(createdAsset).to.be.an('number');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"z_testAsset_expectFail-2\",\n    \"collectionId\": \"1\",\n    \"ip\": \"\",\n    \"nonnetwork\": false,\n    \"stigs\": \n    [\n      \"Active_Directory_Domain\"\n      ],\n    \"metadata\": {}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/assets?projection=stigs&projection=stigGrants&projection=adminStats&elevate=false",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"assets"
									],
									"query": [
										{
											"key": "projection",
											"value": "stigs",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "stigGrants"
										},
										{
											"key": "projection",
											"value": "adminStats"
										},
										{
											"key": "elevate",
											"value": "false"
										}
									]
								}
							},
							"response": [
								{
									"name": "AssetProjected response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"assetId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"dept\": \"<string>\",\n    \"ip\": \"<string>\",\n    \"nonnetwork\": \"<boolean>\",\n    \"scanexempt\": \"<boolean>\",\n    \"collectionIds\": [\n        \"<integer>\",\n        \"<integer>\"\n    ],\n    \"benchmarkIds\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"stigReviewers\": [\n        {\n            \"benchmarkId\": \"<string>\",\n            \"userIds\": [\n                \"<integer>\",\n                \"<integer>\"\n            ]\n        },\n        {\n            \"benchmarkId\": \"<string>\",\n            \"userIds\": [\n                \"<integer>\",\n                \"<integer>\"\n            ]\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/assets?projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"assets"
											],
											"query": [
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"assetId\": \"<integer>\",\n \"name\": \"<string>\",\n \"dept\": \"<string>\",\n \"ip\": \"<string>\",\n \"nonnetwork\": \"<boolean>\",\n \"scanexempt\": \"<boolean>\",\n \"adminStats\": {\n  \"stigCount\": \"<integer>\",\n  \"stigAssignedCount\": \"<integer>\"\n },\n \"collections\": [\n  {\n   \"collectionId\": \"<integer>\",\n   \"name\": \"<string>\"\n  },\n  {\n   \"collectionId\": \"<integer>\",\n   \"name\": \"<string>\"\n  }\n ],\n \"stigs\": [\n  {\n   \"benchmarkId\": \"<string>\",\n   \"lastRevisionStr\": \"<string>\",\n   \"lastRevisionDate\": \"<string>\",\n   \"title\": \"<string>\"\n  },\n  {\n   \"benchmarkId\": \"<string>\",\n   \"lastRevisionStr\": \"<string>\",\n   \"lastRevisionDate\": \"<string>\",\n   \"title\": \"<string>\"\n  }\n ],\n \"stigReviewers\": [\n  {\n   \"benchmarkId\": \"<string>\",\n   \"reviewers\": [\n    {\n     \"userId\": \"<integer>\",\n     \"username\": \"<string>\"\n    },\n    {\n     \"userId\": \"<integer>\",\n     \"username\": \"<string>\"\n    }\n   ]\n  },\n  {\n   \"benchmarkId\": \"<string>\",\n   \"reviewers\": [\n    {\n     \"userId\": \"<integer>\",\n     \"username\": \"<string>\"\n    },\n    {\n     \"userId\": \"<integer>\",\n     \"username\": \"<string>\"\n    }\n   ]\n  }\n ]\n}"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"assetId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"dept\": \"<string>\",\n    \"ip\": \"<string>\",\n    \"nonnetwork\": \"<boolean>\",\n    \"scanexempt\": \"<boolean>\",\n    \"collectionIds\": [\n        \"<integer>\",\n        \"<integer>\"\n    ],\n    \"benchmarkIds\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"stigReviewers\": [\n        {\n            \"benchmarkId\": \"<string>\",\n            \"userIds\": [\n                \"<integer>\",\n                \"<integer>\"\n            ]\n        },\n        {\n            \"benchmarkId\": \"<string>\",\n            \"userIds\": [\n                \"<integer>\",\n                \"<integer>\"\n            ]\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/assets?projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"assets"
											],
											"query": [
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Delete an Asset CLEANUP",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "98e30ca2-d8c3-4a29-85be-84fccc3c8ea8",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{token.admin}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/assets/:assetId?elevate=true&projection=stigReviewers&projection=adminStats",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"assets",
										":assetId"
									],
									"query": [
										{
											"key": "elevate",
											"value": "true",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)"
										},
										{
											"key": "projection",
											"value": "stigReviewers",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "adminStats"
										}
									],
									"variable": [
										{
											"id": "266ff53f-4034-47f9-a96f-cd2a38e9b3ee",
											"key": "assetId",
											"value": "{{createdAsset}}",
											"type": "string",
											"description": "(Required) A path parameter that indentifies an Asset"
										}
									]
								}
							},
							"response": [
								{
									"name": "AssetProjected response",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/assets/:assetId?elevate=<boolean>&projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"assets",
												":assetId"
											],
											"query": [
												{
													"key": "elevate",
													"value": "<boolean>"
												},
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "assetId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"assetId\": \"<integer>\",\n \"name\": \"<string>\",\n \"dept\": \"<string>\",\n \"ip\": \"<string>\",\n \"nonnetwork\": \"<boolean>\",\n \"scanexempt\": \"<boolean>\",\n \"adminStats\": {\n  \"stigCount\": \"<integer>\",\n  \"stigAssignedCount\": \"<integer>\"\n },\n \"collections\": [\n  {\n   \"collectionId\": \"<integer>\",\n   \"name\": \"<string>\"\n  },\n  {\n   \"collectionId\": \"<integer>\",\n   \"name\": \"<string>\"\n  }\n ],\n \"stigs\": [\n  {\n   \"benchmarkId\": \"<string>\",\n   \"lastRevisionStr\": \"<string>\",\n   \"lastRevisionDate\": \"<string>\",\n   \"title\": \"<string>\"\n  },\n  {\n   \"benchmarkId\": \"<string>\",\n   \"lastRevisionStr\": \"<string>\",\n   \"lastRevisionDate\": \"<string>\",\n   \"title\": \"<string>\"\n  }\n ],\n \"stigReviewers\": [\n  {\n   \"benchmarkId\": \"<string>\",\n   \"reviewers\": [\n    {\n     \"userId\": \"<integer>\",\n     \"username\": \"<string>\"\n    },\n    {\n     \"userId\": \"<integer>\",\n     \"username\": \"<string>\"\n    }\n   ]\n  },\n  {\n   \"benchmarkId\": \"<string>\",\n   \"reviewers\": [\n    {\n     \"userId\": \"<integer>\",\n     \"username\": \"<string>\"\n    },\n    {\n     \"userId\": \"<integer>\",\n     \"username\": \"<string>\"\n    }\n   ]\n  }\n ]\n}"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/assets/:assetId?elevate=<boolean>&projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"assets",
												":assetId"
											],
											"query": [
												{
													"key": "elevate",
													"value": "<boolean>"
												},
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "assetId"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Create an Asset - with no assignments to for subsequent PUT test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b8208dff-b22f-43b9-a92f-4ca3c2a92a54",
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"if (user == \"wf10\") {\r",
											"    pm.test(\"Status should be is 403 for user wf10\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"user is elevated\");\r",
											"\r",
											"}\r",
											"\r",
											"var stuff = pm.request.auth;\r",
											"var stuff = pm.request;\r",
											"\r",
											"if (user == 'elevated' || user == 'staff' || user == \"officer60\") {\r",
											"    pm.test(\"User is elevated. Status code is 201\", function () {\r",
											"        pm.response.to.have.status(201);\r",
											"    });\r",
											"}\r",
											"else {\r",
											"    pm.test(\"User is not Staff, IAO (w/ proper dept) or elevated. Expected status code is 403\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"\r",
											"if (pm.response.code == 500) {\r",
											"    console.log(\"Server returned 500\")\r",
											"    return;\r",
											"}\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Response JSON is an object\", function () {\r",
											"    pm.expect(jsonData).to.be.an('object');\r",
											"});\r",
											"\r",
											"let createdAsset = jsonData.assetId;\r",
											"console.log(\"created asset: \" + createdAsset)\r",
											"pm.environment.set(\"createdAsset\", createdAsset);\r",
											"\r",
											"pm.test(`Created Asset: ${createdAsset}`, function () {\r",
											"    pm.expect(createdAsset).to.be.an('string');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"z_testAsset_expectSuccess-1\",\n    \"collectionId\": \"1\",\n    \"ip\": \"\",\n    \"nonnetwork\": false,\n    \"stigs\": [],\n    \"metadata\": {}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/assets?projection=stigs&projection=stigGrants&projection=adminStats&elevate={{elevated}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"assets"
									],
									"query": [
										{
											"key": "projection",
											"value": "stigs",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "stigGrants"
										},
										{
											"key": "projection",
											"value": "adminStats"
										},
										{
											"key": "elevate",
											"value": "{{elevated}}"
										}
									]
								}
							},
							"response": [
								{
									"name": "AssetProjected response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"assetId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"dept\": \"<string>\",\n    \"ip\": \"<string>\",\n    \"nonnetwork\": \"<boolean>\",\n    \"scanexempt\": \"<boolean>\",\n    \"collectionIds\": [\n        \"<integer>\",\n        \"<integer>\"\n    ],\n    \"benchmarkIds\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"stigReviewers\": [\n        {\n            \"benchmarkId\": \"<string>\",\n            \"userIds\": [\n                \"<integer>\",\n                \"<integer>\"\n            ]\n        },\n        {\n            \"benchmarkId\": \"<string>\",\n            \"userIds\": [\n                \"<integer>\",\n                \"<integer>\"\n            ]\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/assets?projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"assets"
											],
											"query": [
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"assetId\": \"<integer>\",\n \"name\": \"<string>\",\n \"dept\": \"<string>\",\n \"ip\": \"<string>\",\n \"nonnetwork\": \"<boolean>\",\n \"scanexempt\": \"<boolean>\",\n \"adminStats\": {\n  \"stigCount\": \"<integer>\",\n  \"stigAssignedCount\": \"<integer>\"\n },\n \"collections\": [\n  {\n   \"collectionId\": \"<integer>\",\n   \"name\": \"<string>\"\n  },\n  {\n   \"collectionId\": \"<integer>\",\n   \"name\": \"<string>\"\n  }\n ],\n \"stigs\": [\n  {\n   \"benchmarkId\": \"<string>\",\n   \"lastRevisionStr\": \"<string>\",\n   \"lastRevisionDate\": \"<string>\",\n   \"title\": \"<string>\"\n  },\n  {\n   \"benchmarkId\": \"<string>\",\n   \"lastRevisionStr\": \"<string>\",\n   \"lastRevisionDate\": \"<string>\",\n   \"title\": \"<string>\"\n  }\n ],\n \"stigReviewers\": [\n  {\n   \"benchmarkId\": \"<string>\",\n   \"reviewers\": [\n    {\n     \"userId\": \"<integer>\",\n     \"username\": \"<string>\"\n    },\n    {\n     \"userId\": \"<integer>\",\n     \"username\": \"<string>\"\n    }\n   ]\n  },\n  {\n   \"benchmarkId\": \"<string>\",\n   \"reviewers\": [\n    {\n     \"userId\": \"<integer>\",\n     \"username\": \"<string>\"\n    },\n    {\n     \"userId\": \"<integer>\",\n     \"username\": \"<string>\"\n    }\n   ]\n  }\n ]\n}"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"assetId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"dept\": \"<string>\",\n    \"ip\": \"<string>\",\n    \"nonnetwork\": \"<boolean>\",\n    \"scanexempt\": \"<boolean>\",\n    \"collectionIds\": [\n        \"<integer>\",\n        \"<integer>\"\n    ],\n    \"benchmarkIds\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"stigReviewers\": [\n        {\n            \"benchmarkId\": \"<string>\",\n            \"userIds\": [\n                \"<integer>\",\n                \"<integer>\"\n            ]\n        },\n        {\n            \"benchmarkId\": \"<string>\",\n            \"userIds\": [\n                \"<integer>\",\n                \"<integer>\"\n            ]\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/assets?projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"assets"
											],
											"query": [
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Replace all properties of an Asset with no Current Assignments",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6ab24c91-76f2-4132-8f84-29605c12d1d0",
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"if (user == \"wf10\") {\r",
											"    pm.test(\"Status should be is 403 for user wf10\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"    console.log(\"user is elevated\");\r",
											"\r",
											"}\r",
											"\r",
											"var stuff = pm.request.auth;\r",
											"var stuff = pm.request;\r",
											"\r",
											"if (user == 'elevated' || user == 'staff' || user == \"officer60\") {\r",
											"    pm.test(\"User is elevated. Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"else {\r",
											"    pm.test(\"User is not Staff, IAO (w/ proper dept) or elevated. Expected status code is 403\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"\r",
											"if (pm.response.code == 500) {\r",
											"    console.log(\"Server returned 500\")\r",
											"    return;\r",
											"}\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Response JSON is an object\", function () {\r",
											"    pm.expect(jsonData).to.be.an('object');\r",
											"});\r",
											"\r",
											"let createdAsset = jsonData.assetId;\r",
											"\r",
											"pm.test(`Put Asset: ${createdAsset}`, function () {\r",
											"    pm.expect(createdAsset).to.be.an('string');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"z_testAssetPut\",\n    \"collectionId\": \"1\",\n    \"ip\": \"1.1.1.2\",\n    \"nonnetwork\": false,\n    \"stigs\": [\n            \"Active_Directory_Domain\"\n    ],\n    \"metadata\": {}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/assets/{{createdAsset}}?elevate={{elevated}}&projection=stigs&projection=adminStats",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"assets",
										"{{createdAsset}}"
									],
									"query": [
										{
											"key": "elevate",
											"value": "{{elevated}}"
										},
										{
											"key": "projection",
											"value": "stigs"
										},
										{
											"key": "projection",
											"value": "adminStats"
										}
									]
								}
							},
							"response": [
								{
									"name": "AssetProjected response",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"assetId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"dept\": \"<string>\",\n    \"ip\": \"<string>\",\n    \"nonnetwork\": \"<boolean>\",\n    \"scanexempt\": \"<boolean>\",\n    \"collectionIds\": [\n        \"<integer>\",\n        \"<integer>\"\n    ],\n    \"benchmarkIds\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"stigReviewers\": [\n        {\n            \"benchmarkId\": \"<string>\",\n            \"userIds\": [\n                \"<integer>\",\n                \"<integer>\"\n            ]\n        },\n        {\n            \"benchmarkId\": \"<string>\",\n            \"userIds\": [\n                \"<integer>\",\n                \"<integer>\"\n            ]\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/assets/:assetId?elevate=<boolean>&projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"assets",
												":assetId"
											],
											"query": [
												{
													"key": "elevate",
													"value": "<boolean>"
												},
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "assetId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"assetId\": \"<integer>\",\n \"name\": \"<string>\",\n \"dept\": \"<string>\",\n \"ip\": \"<string>\",\n \"nonnetwork\": \"<boolean>\",\n \"scanexempt\": \"<boolean>\",\n \"adminStats\": {\n  \"stigCount\": \"<integer>\",\n  \"stigAssignedCount\": \"<integer>\"\n },\n \"collections\": [\n  {\n   \"collectionId\": \"<integer>\",\n   \"name\": \"<string>\"\n  },\n  {\n   \"collectionId\": \"<integer>\",\n   \"name\": \"<string>\"\n  }\n ],\n \"stigs\": [\n  {\n   \"benchmarkId\": \"<string>\",\n   \"lastRevisionStr\": \"<string>\",\n   \"lastRevisionDate\": \"<string>\",\n   \"title\": \"<string>\"\n  },\n  {\n   \"benchmarkId\": \"<string>\",\n   \"lastRevisionStr\": \"<string>\",\n   \"lastRevisionDate\": \"<string>\",\n   \"title\": \"<string>\"\n  }\n ],\n \"stigReviewers\": [\n  {\n   \"benchmarkId\": \"<string>\",\n   \"reviewers\": [\n    {\n     \"userId\": \"<integer>\",\n     \"username\": \"<string>\"\n    },\n    {\n     \"userId\": \"<integer>\",\n     \"username\": \"<string>\"\n    }\n   ]\n  },\n  {\n   \"benchmarkId\": \"<string>\",\n   \"reviewers\": [\n    {\n     \"userId\": \"<integer>\",\n     \"username\": \"<string>\"\n    },\n    {\n     \"userId\": \"<integer>\",\n     \"username\": \"<string>\"\n    }\n   ]\n  }\n ]\n}"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"assetId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"dept\": \"<string>\",\n    \"ip\": \"<string>\",\n    \"nonnetwork\": \"<boolean>\",\n    \"scanexempt\": \"<boolean>\",\n    \"collectionIds\": [\n        \"<integer>\",\n        \"<integer>\"\n    ],\n    \"benchmarkIds\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"stigReviewers\": [\n        {\n            \"benchmarkId\": \"<string>\",\n            \"userIds\": [\n                \"<integer>\",\n                \"<integer>\"\n            ]\n        },\n        {\n            \"benchmarkId\": \"<string>\",\n            \"userIds\": [\n                \"<integer>\",\n                \"<integer>\"\n            ]\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/assets/:assetId?elevate=<boolean>&projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"assets",
												":assetId"
											],
											"query": [
												{
													"key": "elevate",
													"value": "<boolean>"
												},
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "assetId"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Delete an Asset CLEANUP",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4c98aef4-0644-4b21-9755-d028921b08fe",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "accessToken",
											"value": "{{token.admin}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/assets/:assetId?elevate=true&projection=stigGrants&projection=adminStats&projection=stigs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"assets",
										":assetId"
									],
									"query": [
										{
											"key": "elevate",
											"value": "true",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)"
										},
										{
											"key": "projection",
											"value": "stigGrants",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "adminStats"
										},
										{
											"key": "projection",
											"value": "stigs"
										}
									],
									"variable": [
										{
											"id": "32fd4658-407a-4bcc-8ffc-86f8e52bcaa3",
											"key": "assetId",
											"value": "{{createdAsset}}",
											"type": "string",
											"description": "(Required) A path parameter that indentifies an Asset"
										}
									]
								}
							},
							"response": [
								{
									"name": "AssetProjected response",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/assets/:assetId?elevate=<boolean>&projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"assets",
												":assetId"
											],
											"query": [
												{
													"key": "elevate",
													"value": "<boolean>"
												},
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "assetId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"assetId\": \"<integer>\",\n \"name\": \"<string>\",\n \"dept\": \"<string>\",\n \"ip\": \"<string>\",\n \"nonnetwork\": \"<boolean>\",\n \"scanexempt\": \"<boolean>\",\n \"adminStats\": {\n  \"stigCount\": \"<integer>\",\n  \"stigAssignedCount\": \"<integer>\"\n },\n \"collections\": [\n  {\n   \"collectionId\": \"<integer>\",\n   \"name\": \"<string>\"\n  },\n  {\n   \"collectionId\": \"<integer>\",\n   \"name\": \"<string>\"\n  }\n ],\n \"stigs\": [\n  {\n   \"benchmarkId\": \"<string>\",\n   \"lastRevisionStr\": \"<string>\",\n   \"lastRevisionDate\": \"<string>\",\n   \"title\": \"<string>\"\n  },\n  {\n   \"benchmarkId\": \"<string>\",\n   \"lastRevisionStr\": \"<string>\",\n   \"lastRevisionDate\": \"<string>\",\n   \"title\": \"<string>\"\n  }\n ],\n \"stigReviewers\": [\n  {\n   \"benchmarkId\": \"<string>\",\n   \"reviewers\": [\n    {\n     \"userId\": \"<integer>\",\n     \"username\": \"<string>\"\n    },\n    {\n     \"userId\": \"<integer>\",\n     \"username\": \"<string>\"\n    }\n   ]\n  },\n  {\n   \"benchmarkId\": \"<string>\",\n   \"reviewers\": [\n    {\n     \"userId\": \"<integer>\",\n     \"username\": \"<string>\"\n    },\n    {\n     \"userId\": \"<integer>\",\n     \"username\": \"<string>\"\n    }\n   ]\n  }\n ]\n}"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/assets/:assetId?elevate=<boolean>&projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"assets",
												":assetId"
											],
											"query": [
												{
													"key": "elevate",
													"value": "<boolean>"
												},
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "assetId"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Return the Checklist (expect to fail)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d8cd3996-e20a-4316-8727-a5875c64e878",
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"if (user == \"collectionCreator\") {\r",
											"    pm.test(\"Status should be is 204 for user collectionCreator\", function () {\r",
											"        pm.response.to.have.status(204);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"let elevated = pm.environment.get(\"elevated\");\r",
											"console.log(\"user: \" + user);\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"}\r",
											"\r",
											"\r",
											"console.log(jsonData);\r",
											"// console.log(pm.environment.get(\"env\"));\r",
											"\r",
											"pm.test(\"Response JSON is an object\", function () {\r",
											"    pm.expect(jsonData).to.be.an('array');\r",
											"});\r",
											"\r",
											"let checklistLength = pm.environment.get(\"checklistLength\");\r",
											"pm.test(`Response JSON is an array of length: ${jsonData.length}`, function () {\r",
											"    pm.expect(jsonData).to.have.lengthOf(checklistLength);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/assets/:assetId/checklists/:benchmarkId/:revisionStr?elevate={{elevated}}&format=json",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"assets",
										":assetId",
										"checklists",
										":benchmarkId",
										":revisionStr"
									],
									"query": [
										{
											"key": "elevate",
											"value": "{{elevated}}",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)"
										},
										{
											"key": "format",
											"value": "json",
											"description": "The format of the response. Default if missing is 'json'"
										}
									],
									"variable": [
										{
											"id": "23a17221-b606-4d93-ad7d-3e133caf8881",
											"key": "assetId",
											"value": "{{assets.queryAsset}}",
											"type": "string",
											"description": "(Required) A path parameter that indentifies an Asset"
										},
										{
											"id": "823c808d-ed00-4f2a-a4e4-8d4e278aa84b",
											"key": "benchmarkId",
											"value": "{{assets.queryBenchmark}}",
											"type": "string",
											"description": "(Required) A path parameter that indentifies a STIG"
										},
										{
											"id": "683226ed-8f28-4851-bc81-4e85d482df36",
											"key": "revisionStr",
											"value": "{{assets.queryRev}}",
											"type": "string",
											"description": "(Required) A path parameter that indentifies a STIG revision [ V{version_num}R{release_num} | 'latest' ]"
										}
									]
								}
							},
							"response": [
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/assets/:assetId/checklists/:benchmarkId/:revisionStr?elevate=<boolean>&format=json",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"assets",
												":assetId",
												"checklists",
												":benchmarkId",
												":revisionStr"
											],
											"query": [
												{
													"key": "elevate",
													"value": "<boolean>"
												},
												{
													"key": "format",
													"value": "json"
												}
											],
											"variable": [
												{
													"key": "assetId"
												},
												{
													"key": "benchmarkId"
												},
												{
													"key": "revisionStr"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
								},
								{
									"name": "Review response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/assets/:assetId/checklists/:benchmarkId/:revisionStr?elevate=<boolean>&format=json",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"assets",
												":assetId",
												"checklists",
												":benchmarkId",
												":revisionStr"
											],
											"query": [
												{
													"key": "elevate",
													"value": "<boolean>"
												},
												{
													"key": "format",
													"value": "json"
												}
											],
											"variable": [
												{
													"key": "assetId"
												},
												{
													"key": "benchmarkId"
												},
												{
													"key": "revisionStr"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"reviewId\": \"<integer>\",\n \"assetId\": \"<integer>\",\n \"ruleId\": \"<string>\",\n \"state\": \"<string>\",\n \"stateComment\": \"<string>\",\n \"autoState\": \"<boolean>\",\n \"action\": \"<string>\",\n \"actionComment\": \"<string>\",\n \"reqDoc\": \"<boolean>\",\n \"status\": \"<string>\",\n \"userId\": \"<integer>\",\n \"ts\": \"<string>\",\n \"rejectText\": \"<string>\",\n \"rejectUserId\": \"<integer>\"\n}"
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Return Assets with specified STIG",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "726200e3-7bd4-499d-b586-e2eb28f40702",
								"exec": [
									"let user = pm.environment.get(\"user\");\r",
									"console.log(\"user: \" + user);\r",
									"if (user == \"wf10\") {\r",
									"    pm.test(\"Status should be is 403 for user wf10\", function () {\r",
									"        pm.response.to.have.status(403);\r",
									"    });\r",
									"    return;\r",
									"}\r",
									"else {\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"}\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"let elevated = pm.environment.get(\"elevated\");\r",
									"console.log(\"user: \" + user);\r",
									"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
									"    user = \"elevated\";\r",
									"}\r",
									"\r",
									"\r",
									"console.log(jsonData);\r",
									"// console.log(pm.environment.get(\"env\"));\r",
									"\r",
									"pm.test(\"Response JSON is an object\", function () {\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"});\r",
									"\r",
									"let assets = JSON.parse(pm.environment.get(\"assets.benchmarkQuery.response\"));\r",
									"console.log(assets);\r",
									"\r",
									"pm.test(`Response JSON is an array of length: ${jsonData.length}`, function () {\r",
									"    pm.expect(jsonData).to.have.lengthOf(assets.length);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/collections/:collectionId/stigs/:benchmarkId/assets?projection=userGrants&elevate={{elevated}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"collections",
								":collectionId",
								"stigs",
								":benchmarkId",
								"assets"
							],
							"query": [
								{
									"key": "projection",
									"value": "userGrants",
									"description": "Additional properties to include in the response.\n"
								},
								{
									"key": "elevate",
									"value": "{{elevated}}",
									"description": "Elevate the user context for this request if user is permitted (canAdmin)"
								}
							],
							"variable": [
								{
									"id": "8bef9dd4-bc28-46ef-95d9-0ee9b3b4626b",
									"key": "collectionId",
									"value": "{{testCollection}}",
									"type": "string"
								},
								{
									"id": "790a4564-5aee-42d1-8b08-7d1831c56052",
									"key": "benchmarkId",
									"value": "{{assets.queryBenchmark}}",
									"type": "string",
									"description": "(Required) A path parameter that indentifies a STIG"
								}
							]
						}
					},
					"response": [
						{
							"name": "unexpected error",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/stigs/:benchmarkId/assets?elevate=<boolean>&projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stigs",
										":benchmarkId",
										"assets"
									],
									"query": [
										{
											"key": "elevate",
											"value": "<boolean>"
										},
										{
											"key": "projection",
											"value": "<string>"
										},
										{
											"key": "projection",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "benchmarkId"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
						},
						{
							"name": "Revision response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/stigs/:benchmarkId/assets?elevate=<boolean>&projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stigs",
										":benchmarkId",
										"assets"
									],
									"query": [
										{
											"key": "elevate",
											"value": "<boolean>"
										},
										{
											"key": "projection",
											"value": "<string>"
										},
										{
											"key": "projection",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "benchmarkId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"assetId\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"reviewers\": [\n   {\n    \"userId\": \"<integer>\",\n    \"username\": \"<string>\"\n   },\n   {\n    \"userId\": \"<integer>\",\n    \"username\": \"<string>\"\n   }\n  ]\n },\n {\n  \"assetId\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"reviewers\": [\n   {\n    \"userId\": \"<integer>\",\n    \"username\": \"<string>\"\n   },\n   {\n    \"userId\": \"<integer>\",\n    \"username\": \"<string>\"\n   }\n  ]\n }\n]"
						}
					]
				},
				{
					"name": "Assign stig to specified assets (Invalid assets)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "01084771-891c-44b4-b877-8ea2724d17f2",
								"exec": [
									"    pm.test(\"Status should be is 403. Attempting to assign invalid reviewers.\", function () {\r",
									"        pm.response.to.have.status(403);\r",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n  \"66\"\n]",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/collections/:collectionId/stigs/:benchmarkId/assets?projection=userGrants&elevate={{elevated}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"collections",
								":collectionId",
								"stigs",
								":benchmarkId",
								"assets"
							],
							"query": [
								{
									"key": "projection",
									"value": "userGrants",
									"description": "Additional properties to include in the response.\n"
								},
								{
									"key": "elevate",
									"value": "{{elevated}}",
									"description": "Elevate the user context for this request if user is permitted (canAdmin)"
								}
							],
							"variable": [
								{
									"id": "d142cdca-baca-42f7-a134-2595536e088d",
									"key": "collectionId",
									"value": "1",
									"type": "string"
								},
								{
									"id": "f84ba1a8-e831-425f-8408-62c89f05e27c",
									"key": "benchmarkId",
									"value": "{{assets.queryBenchmark}}",
									"type": "string",
									"description": "(Required) A path parameter that indentifies a STIG"
								}
							]
						},
						"description": "Invoking this endpoint will retain any previously configured Reviewer assignments"
					},
					"response": [
						{
							"name": "Revision response",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\n    \"<integer>\",\n    \"<integer>\"\n]"
								},
								"url": {
									"raw": "{{baseUrl}}/stigs/:benchmarkId/assets?elevate=<boolean>&projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stigs",
										":benchmarkId",
										"assets"
									],
									"query": [
										{
											"key": "elevate",
											"value": "<boolean>"
										},
										{
											"key": "projection",
											"value": "<string>"
										},
										{
											"key": "projection",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "benchmarkId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"assetId\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"reviewers\": [\n   {\n    \"userId\": \"<integer>\",\n    \"username\": \"<string>\"\n   },\n   {\n    \"userId\": \"<integer>\",\n    \"username\": \"<string>\"\n   }\n  ]\n },\n {\n  \"assetId\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"reviewers\": [\n   {\n    \"userId\": \"<integer>\",\n    \"username\": \"<string>\"\n   },\n   {\n    \"userId\": \"<integer>\",\n    \"username\": \"<string>\"\n   }\n  ]\n }\n]"
						},
						{
							"name": "unexpected error",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\n    \"<integer>\",\n    \"<integer>\"\n]"
								},
								"url": {
									"raw": "{{baseUrl}}/stigs/:benchmarkId/assets?elevate=<boolean>&projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stigs",
										":benchmarkId",
										"assets"
									],
									"query": [
										{
											"key": "elevate",
											"value": "<boolean>"
										},
										{
											"key": "projection",
											"value": "<string>"
										},
										{
											"key": "projection",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "benchmarkId"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "Assign stig to specified assets (actual Assets)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4c76c1ae-cf98-4ffa-9499-cdc87abdd07d",
								"exec": [
									"let user = pm.environment.get(\"user\");\r",
									"console.log(\"user: \" + user);\r",
									"if (user == \"wf10\") {\r",
									"    pm.test(\"Status should be is 403 for user wf10\", function () {\r",
									"        pm.response.to.have.status(403);\r",
									"    });\r",
									"    return;\r",
									"}\r",
									"\r",
									"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
									"    user = \"elevated\";\r",
									"    console.log(\"user is elevated\");\r",
									"\r",
									"}\r",
									"\r",
									"var stuff = pm.request.auth;\r",
									"var stuff = pm.request;\r",
									"\r",
									"if (user == 'elevated' || user == 'staff' || user == \"officer60\") {\r",
									"    pm.test(\"User is elevated. Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"}\r",
									"else {\r",
									"    pm.test(\"User is not Staff, IAO (w/ proper dept) or elevated. Expected status code is 403\", function () {\r",
									"        pm.response.to.have.status(403);\r",
									"    });\r",
									"    return;\r",
									"}\r",
									"\r",
									"if (pm.response.code == 500) {\r",
									"    console.log(\"Server returned 500\")\r",
									"    return;\r",
									"}\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Response JSON is an\", function () {\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n   \"34\"\n]",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/collections/:collectionId/stigs/:benchmarkId/assets?projection=userGrants&elevate={{elevated}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"collections",
								":collectionId",
								"stigs",
								":benchmarkId",
								"assets"
							],
							"query": [
								{
									"key": "projection",
									"value": "userGrants",
									"description": "Additional properties to include in the response.\n"
								},
								{
									"key": "elevate",
									"value": "{{elevated}}",
									"description": "Elevate the user context for this request if user is permitted (canAdmin)"
								}
							],
							"variable": [
								{
									"id": "294b7d84-b85d-437f-ab37-ca0d56292292",
									"key": "collectionId",
									"value": "1",
									"type": "string"
								},
								{
									"id": "4c4b5316-c603-4a86-9b42-e0fea85e543d",
									"key": "benchmarkId",
									"value": "{{assets.queryBenchmark}}",
									"type": "string",
									"description": "(Required) A path parameter that indentifies a STIG"
								}
							]
						},
						"description": "Invoking this endpoint will retain any previously configured Reviewer assignments"
					},
					"response": [
						{
							"name": "unexpected error",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\n    \"<integer>\",\n    \"<integer>\"\n]"
								},
								"url": {
									"raw": "{{baseUrl}}/stigs/:benchmarkId/assets?elevate=<boolean>&projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stigs",
										":benchmarkId",
										"assets"
									],
									"query": [
										{
											"key": "elevate",
											"value": "<boolean>"
										},
										{
											"key": "projection",
											"value": "<string>"
										},
										{
											"key": "projection",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "benchmarkId"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
						},
						{
							"name": "Revision response",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\n    \"<integer>\",\n    \"<integer>\"\n]"
								},
								"url": {
									"raw": "{{baseUrl}}/stigs/:benchmarkId/assets?elevate=<boolean>&projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stigs",
										":benchmarkId",
										"assets"
									],
									"query": [
										{
											"key": "elevate",
											"value": "<boolean>"
										},
										{
											"key": "projection",
											"value": "<string>"
										},
										{
											"key": "projection",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "benchmarkId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"assetId\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"reviewers\": [\n   {\n    \"userId\": \"<integer>\",\n    \"username\": \"<string>\"\n   },\n   {\n    \"userId\": \"<integer>\",\n    \"username\": \"<string>\"\n   }\n  ]\n },\n {\n  \"assetId\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"reviewers\": [\n   {\n    \"userId\": \"<integer>\",\n    \"username\": \"<string>\"\n   },\n   {\n    \"userId\": \"<integer>\",\n    \"username\": \"<string>\"\n   }\n  ]\n }\n]"
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "WIP - Review Tests",
			"item": [
				{
					"name": "GET - Reviews - param permutations",
					"item": [
						{
							"name": "get - reviews - all Params",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/reviews?result={{rev.result}}&action={{rev.action}}&status={{rev.status}}&ruleId={{rev.rule}}&userId={{rev.user}}&assetId={{rev.asset}}&benchmarkId={{rev.benchmark}}&revisionStr={{rev.revStr}}&collectionId={{rev.collection}}&projection=ruleInfo&projection=stigs&projection=collections&projection=history",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reviews"
									],
									"query": [
										{
											"key": "result",
											"value": "{{rev.result}}"
										},
										{
											"key": "action",
											"value": "{{rev.action}}"
										},
										{
											"key": "status",
											"value": "{{rev.status}}"
										},
										{
											"key": "ruleId",
											"value": "{{rev.rule}}",
											"description": "Selects Reviews of a Rule"
										},
										{
											"key": "userId",
											"value": "{{rev.user}}"
										},
										{
											"key": "assetId",
											"value": "{{rev.asset}}",
											"description": "Selects Reviews mapped to an Asset"
										},
										{
											"key": "benchmarkId",
											"value": "{{rev.benchmark}}",
											"description": "Selects Reviews mapped to a STIG"
										},
										{
											"key": "revisionStr",
											"value": "{{rev.revStr}}"
										},
										{
											"key": "collectionId",
											"value": "{{rev.collection}}"
										},
										{
											"key": "projection",
											"value": "ruleInfo",
											"description": "Selects Reviews mapped to a Collection"
										},
										{
											"key": "projection",
											"value": "stigs",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "collections",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "history"
										}
									]
								}
							},
							"response": [
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/reviews?elevate=<boolean>&state=<string>&action=<string>&status=<string>&ruleId=<string>&benchmarkId=<string>&assetId=<string>&collectionId=<integer>&projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reviews"
											],
											"query": [
												{
													"key": "elevate",
													"value": "<boolean>"
												},
												{
													"key": "state",
													"value": "<string>"
												},
												{
													"key": "action",
													"value": "<string>"
												},
												{
													"key": "status",
													"value": "<string>"
												},
												{
													"key": "ruleId",
													"value": "<string>"
												},
												{
													"key": "benchmarkId",
													"value": "<string>"
												},
												{
													"key": "assetId",
													"value": "<string>"
												},
												{
													"key": "collectionId",
													"value": "<integer>"
												},
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
								},
								{
									"name": "ReviewProjected response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/reviews?elevate=<boolean>&state=<string>&action=<string>&status=<string>&ruleId=<string>&benchmarkId=<string>&assetId=<string>&collectionId=<integer>&projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reviews"
											],
											"query": [
												{
													"key": "elevate",
													"value": "<boolean>"
												},
												{
													"key": "state",
													"value": "<string>"
												},
												{
													"key": "action",
													"value": "<string>"
												},
												{
													"key": "status",
													"value": "<string>"
												},
												{
													"key": "ruleId",
													"value": "<string>"
												},
												{
													"key": "benchmarkId",
													"value": "<string>"
												},
												{
													"key": "assetId",
													"value": "<string>"
												},
												{
													"key": "collectionId",
													"value": "<integer>"
												},
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n {\n  \"reviewId\": \"<integer>\",\n  \"assetId\": \"<integer>\",\n  \"ruleId\": \"<string>\",\n  \"state\": \"<string>\",\n  \"stateComment\": \"<string>\",\n  \"autoState\": \"<boolean>\",\n  \"action\": \"<string>\",\n  \"actionComment\": \"<string>\",\n  \"reqDoc\": \"<boolean>\",\n  \"status\": \"<string>\",\n  \"userId\": \"<integer>\",\n  \"ts\": \"<string>\",\n  \"rejectText\": \"<string>\",\n  \"rejectUserId\": \"<integer>\",\n  \"history\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"asset\": {\n   \"assetId\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"dept\": \"<string>\"\n  },\n  \"stigs\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"rule\": {\n   \"ruleId\": \"<string>\",\n   \"version\": \"<string>\",\n   \"title\": \"<string>\",\n   \"severity\": \"<string>\"\n  }\n },\n {\n  \"reviewId\": \"<integer>\",\n  \"assetId\": \"<integer>\",\n  \"ruleId\": \"<string>\",\n  \"state\": \"<string>\",\n  \"stateComment\": \"<string>\",\n  \"autoState\": \"<boolean>\",\n  \"action\": \"<string>\",\n  \"actionComment\": \"<string>\",\n  \"reqDoc\": \"<boolean>\",\n  \"status\": \"<string>\",\n  \"userId\": \"<integer>\",\n  \"ts\": \"<string>\",\n  \"rejectText\": \"<string>\",\n  \"rejectUserId\": \"<integer>\",\n  \"history\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"asset\": {\n   \"assetId\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"dept\": \"<string>\"\n  },\n  \"stigs\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"rule\": {\n   \"ruleId\": \"<string>\",\n   \"version\": \"<string>\",\n   \"title\": \"<string>\",\n   \"severity\": \"<string>\"\n  }\n }\n]"
								}
							]
						},
						{
							"name": "get - reviews - all Params Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "81b78bf1-cb0d-459f-bd0f-40f090839d3b",
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"if (user == \"wf10\") {\r",
											"    pm.test(\"Status should be 403 for user wf10, elevated\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    pm.test(\"Status should be 403 for all elevated Reviews queries\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;     \r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    pm.test(\"Elevated queries not allowed for review endpoints.\", function () {\r",
											"        pm.expect(1).to.equal(2);\r",
											"    });\r",
											"return;    \r",
											"}\r",
											"\r",
											"// console.log(\"url: \" + pm.request.url.getQueryString().match(/elevate=true/));\r",
											"\r",
											"var stuff = pm.request.auth;\r",
											"var stuff = pm.request.url.query;\r",
											"\r",
											"\r",
											"\r",
											"let allowedCollections, disallowedCollections, validStigs, invalidStigs, validAssets, invalidAssets;\r",
											"console.log(\"assignments\");\r",
											"allowedCollections = JSON.parse(pm.environment.get((\"collections.valid\")));\r",
											"disallowedCollections = JSON.parse(pm.environment.get(\"collections.invalid\"));\r",
											"validStigs = JSON.parse(pm.environment.get(\"stigs.valid\"));\r",
											"invalidStigs = JSON.parse(pm.environment.get(\"stigs.invalid\"));\r",
											"validAssets = JSON.parse(pm.environment.get(\"assets.valid\"));\r",
											"invalidAssets = JSON.parse(pm.environment.get(\"assets.invalid\"));\r",
											"\r",
											"let assetsForCollectionQuery,assetsForBenchmarkQuery,assetsForDeptQuery;\r",
											" assetsForCollectionQuery = JSON.parse(pm.environment.get(\"assets.collectionQuery.response\"));\r",
											" assetsForBenchmarkQuery = JSON.parse(pm.environment.get(\"assets.benchmarkQuery.response\"));\r",
											" assetsForDeptQuery = JSON.parse(pm.environment.get(\"assets.deptQuery.response\"));\r",
											"\r",
											"\r",
											"console.log(\"user is \" + user);\r",
											"\r",
											"pm.test(\"Response JSON is an array\", function () {\r",
											"    pm.expect(jsonData).to.be.an('array');\r",
											"});\r",
											"\r",
											"let collectionIds = [];\r",
											"let assetIds = [];\r",
											"let stigIds = [];\r",
											"let stigReviewers = [];\r",
											"let adminStats = [];\r",
											"\r",
											"\r",
											"pm.test(\"Each item in response has proper properties\", function () {\r",
											"    jsonData.forEach(function (review) {\r",
											"        pm.expect(review).to.have.property('assetId');\r",
											"        assetIds.push(review.assetId);\r",
											"        // console.log (item.assets);\r",
											"        // let assets = [];\r",
											"        // assets = item.assets;\r",
											"        // console.log (assets);\r",
											"        review.collections.forEach(function (collection) {\r",
											"            pm.expect(collection).to.have.property('collectionId');\r",
											"            collectionIds.push(collection.collectionId);\r",
											"        });\r",
											"\r",
											"        review.stigs.forEach(function (stig) {\r",
											"            pm.expect(stig).to.have.property('benchmarkId');\r",
											"            stigIds.push(stig.benchmarkId);\r",
											"        });\r",
											"\r",
											"        review.collections.forEach(function (collection) {\r",
											"            pm.expect(collection).to.have.property('collectionId');\r",
											"            stigIds.push(collection.collectionId);\r",
											"        });\r",
											"    \r",
											"\r",
											"        pm.expect(review.ruleInfo).to.have.property('ruleId');\r",
											"        pm.expect(review.ruleInfo).to.have.property('ruleTitle');         \r",
											"    });\r",
											"\r",
											"    //     pm.expect(collectionIds).to.include.members(allowedCollections);\r",
											"});\r",
											"\r",
											"// console.log(\"collectionIds = \" + collectionIds);\r",
											"\r",
											"\r",
											"\r",
											"let collectionQuery, benchmarkQuery, deptQuery = 0;\r",
											"\r",
											"pm.test(\"Response does contains correct assets for this user\", function () {\r",
											"\r",
											"    if (pm.request.url.getQueryString().match(/result=/)) {\r",
											"        collectionQuery = 1;\r",
											"        assetIds.forEach(function (asset) {\r",
											"            console.log(\"checking collection query assetId: \" + asset);\r",
											"            pm.expect(asset).to.be.oneOf(assetsForCollectionQuery);\r",
											"        });\r",
											"    }\r",
											"    \r",
											"//or....\r",
											"    if (pm.request.url.getQueryString().match(/result=/)) {\r",
											"        collectionQuery = 1;\r",
											"        assetIds.forEach(function (asset) {\r",
											"            console.log(\"checking collection query assetId: \" + asset);\r",
											"            pm.expect(asset).to.be.oneOf(assetsForCollectionQuery);\r",
											"        });\r",
											"    }\r",
											"\r",
											"    if (pm.request.url.getQueryString().match(/benchmarkId=/)) {\r",
											"        benchmarkQuery = 1;\r",
											"        assetIds.forEach(function (asset) {\r",
											"            console.log(\"checking benchmark query assetId: \" + asset);\r",
											"            pm.expect(asset).to.be.oneOf(assetsForBenchmarkQuery);\r",
											"        });        \r",
											"    }\r",
											"\r",
											"    if (pm.request.url.getQueryString().match(/deptId=/)) {\r",
											"        deptQuery = 1;\r",
											"        assetIds.forEach(function (asset) {\r",
											"            console.log(\"checking dept query assetId: \" + asset);\r",
											"            pm.expect(asset).to.be.oneOf(assetsForDeptQuery);\r",
											"        });        \r",
											"    }\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response contains authorized collectionIds for this user\", function () {\r",
											"    collectionIds.forEach(function (item) {\r",
											"        console.log(\"checking collectionId: \" + item);\r",
											"        pm.expect(item).to.be.oneOf(allowedCollections);\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response does NOT contain unAuthorized collectionIds for this user\", function () {\r",
											"    collectionIds.forEach(function (item) {\r",
											"        pm.expect(item).to.not.be.oneOf(disallowedCollections);\r",
											"    });\r",
											"\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"// if (user == \"wf60\" || user == \"officer60\") {\r",
											"//     pm.test(\"Response contains authorized projection data (assets)\", function () {\r",
											"//         assetIds.forEach(function (assetId) {\r",
											"//             pm.expect(assetId).to.be.oneOf(validAssets);\r",
											"//             console.log(\"checking assetId: \" + assetId);\r",
											"//         });\r",
											"//     });\r",
											"\r",
											"//     pm.test(\"Response contains authorized projection data (stigs)\", function () {\r",
											"//         stigIds.forEach(function (stigId) {\r",
											"//             pm.expect(stigId).to.be.oneOf(validStigs);\r",
											"//             console.log(\"checking stigId: \" + stigId);\r",
											"//         });\r",
											"//     });\r",
											"// }\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/reviews?action={{rev.action}}&benchmarkId={{rev.benchmark}}&projection=rule&projection=stigs&projection=asset",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reviews"
									],
									"query": [
										{
											"key": "result",
											"value": "{{rev.result}}",
											"disabled": true
										},
										{
											"key": "action",
											"value": "{{rev.action}}"
										},
										{
											"key": "status",
											"value": "{{rev.status}}",
											"disabled": true
										},
										{
											"key": "ruleId",
											"value": "{{rev.rule}}",
											"description": "Selects Reviews of a Rule",
											"disabled": true
										},
										{
											"key": "userId",
											"value": "{{rev.user}}",
											"disabled": true
										},
										{
											"key": "assetId",
											"value": "{{rev.asset}}",
											"description": "Selects Reviews mapped to an Asset",
											"disabled": true
										},
										{
											"key": "benchmarkId",
											"value": "{{rev.benchmark}}",
											"description": "Selects Reviews mapped to a STIG"
										},
										{
											"key": "revisionStr",
											"value": "{{rev.revStr}}",
											"disabled": true
										},
										{
											"key": "collectionId",
											"value": "{{rev.collection}}",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "rule",
											"description": "Selects Reviews mapped to a Collection"
										},
										{
											"key": "projection",
											"value": "stigs",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "asset",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "history",
											"disabled": true
										}
									]
								}
							},
							"response": [
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/reviews?elevate=<boolean>&state=<string>&action=<string>&status=<string>&ruleId=<string>&benchmarkId=<string>&assetId=<string>&collectionId=<integer>&projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reviews"
											],
											"query": [
												{
													"key": "elevate",
													"value": "<boolean>"
												},
												{
													"key": "state",
													"value": "<string>"
												},
												{
													"key": "action",
													"value": "<string>"
												},
												{
													"key": "status",
													"value": "<string>"
												},
												{
													"key": "ruleId",
													"value": "<string>"
												},
												{
													"key": "benchmarkId",
													"value": "<string>"
												},
												{
													"key": "assetId",
													"value": "<string>"
												},
												{
													"key": "collectionId",
													"value": "<integer>"
												},
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
								},
								{
									"name": "ReviewProjected response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/reviews?elevate=<boolean>&state=<string>&action=<string>&status=<string>&ruleId=<string>&benchmarkId=<string>&assetId=<string>&collectionId=<integer>&projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reviews"
											],
											"query": [
												{
													"key": "elevate",
													"value": "<boolean>"
												},
												{
													"key": "state",
													"value": "<string>"
												},
												{
													"key": "action",
													"value": "<string>"
												},
												{
													"key": "status",
													"value": "<string>"
												},
												{
													"key": "ruleId",
													"value": "<string>"
												},
												{
													"key": "benchmarkId",
													"value": "<string>"
												},
												{
													"key": "assetId",
													"value": "<string>"
												},
												{
													"key": "collectionId",
													"value": "<integer>"
												},
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n {\n  \"reviewId\": \"<integer>\",\n  \"assetId\": \"<integer>\",\n  \"ruleId\": \"<string>\",\n  \"state\": \"<string>\",\n  \"stateComment\": \"<string>\",\n  \"autoState\": \"<boolean>\",\n  \"action\": \"<string>\",\n  \"actionComment\": \"<string>\",\n  \"reqDoc\": \"<boolean>\",\n  \"status\": \"<string>\",\n  \"userId\": \"<integer>\",\n  \"ts\": \"<string>\",\n  \"rejectText\": \"<string>\",\n  \"rejectUserId\": \"<integer>\",\n  \"history\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"asset\": {\n   \"assetId\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"dept\": \"<string>\"\n  },\n  \"stigs\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"rule\": {\n   \"ruleId\": \"<string>\",\n   \"version\": \"<string>\",\n   \"title\": \"<string>\",\n   \"severity\": \"<string>\"\n  }\n },\n {\n  \"reviewId\": \"<integer>\",\n  \"assetId\": \"<integer>\",\n  \"ruleId\": \"<string>\",\n  \"state\": \"<string>\",\n  \"stateComment\": \"<string>\",\n  \"autoState\": \"<boolean>\",\n  \"action\": \"<string>\",\n  \"actionComment\": \"<string>\",\n  \"reqDoc\": \"<boolean>\",\n  \"status\": \"<string>\",\n  \"userId\": \"<integer>\",\n  \"ts\": \"<string>\",\n  \"rejectText\": \"<string>\",\n  \"rejectUserId\": \"<integer>\",\n  \"history\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"asset\": {\n   \"assetId\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"dept\": \"<string>\"\n  },\n  \"stigs\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"rule\": {\n   \"ruleId\": \"<string>\",\n   \"version\": \"<string>\",\n   \"title\": \"<string>\",\n   \"severity\": \"<string>\"\n  }\n }\n]"
								}
							]
						},
						{
							"name": "get - reviews - all Params Copy Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "446e7ce2-bd4c-49a0-86a1-b9600c8369ab",
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"if (user == \"wf10\") {\r",
											"    pm.test(\"Status should be 403 for user wf10, elevated\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    pm.test(\"Status should be 403 for all elevated Reviews queries\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;     \r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    pm.test(\"Elevated queries not allowed for review endpoints.\", function () {\r",
											"        pm.expect(1).to.equal(2);\r",
											"    });\r",
											"return;    \r",
											"}\r",
											"\r",
											"// console.log(\"url: \" + pm.request.url.getQueryString().match(/elevate=true/));\r",
											"\r",
											"var stuff = pm.request.auth;\r",
											"var stuff = pm.request.url.query;\r",
											"\r",
											"\r",
											"\r",
											"let allowedCollections, disallowedCollections, validStigs, invalidStigs, validAssets, invalidAssets;\r",
											"console.log(\"assignments\");\r",
											"allowedCollections = JSON.parse(pm.environment.get((\"collections.valid\")));\r",
											"disallowedCollections = JSON.parse(pm.environment.get(\"collections.invalid\"));\r",
											"validStigs = JSON.parse(pm.environment.get(\"stigs.valid\"));\r",
											"invalidStigs = JSON.parse(pm.environment.get(\"stigs.invalid\"));\r",
											"validAssets = JSON.parse(pm.environment.get(\"assets.valid\"));\r",
											"invalidAssets = JSON.parse(pm.environment.get(\"assets.invalid\"));\r",
											"\r",
											"let assetsForCollectionQuery,assetsForBenchmarkQuery,assetsForDeptQuery;\r",
											" assetsForCollectionQuery = JSON.parse(pm.environment.get(\"assets.collectionQuery.response\"));\r",
											" assetsForBenchmarkQuery = JSON.parse(pm.environment.get(\"assets.benchmarkQuery.response\"));\r",
											" assetsForDeptQuery = JSON.parse(pm.environment.get(\"assets.deptQuery.response\"));\r",
											"\r",
											"\r",
											"console.log(\"user is \" + user);\r",
											"\r",
											"pm.test(\"Response JSON is an array\", function () {\r",
											"    pm.expect(jsonData).to.be.an('array');\r",
											"});\r",
											"\r",
											"let collectionIds = [];\r",
											"let assetIds = [];\r",
											"let stigIds = [];\r",
											"let stigReviewers = [];\r",
											"let adminStats = [];\r",
											"\r",
											"\r",
											"pm.test(\"Each item in response has proper properties\", function () {\r",
											"    jsonData.forEach(function (review) {\r",
											"        pm.expect(review).to.have.property('assetId');\r",
											"        assetIds.push(review.assetId);\r",
											"        // console.log (item.assets);\r",
											"        // let assets = [];\r",
											"        // assets = item.assets;\r",
											"        // console.log (assets);\r",
											"        review.collections.forEach(function (collection) {\r",
											"            pm.expect(collection).to.have.property('collectionId');\r",
											"            collectionIds.push(collection.collectionId);\r",
											"        });\r",
											"\r",
											"        review.stigs.forEach(function (stig) {\r",
											"            pm.expect(stig).to.have.property('benchmarkId');\r",
											"            stigIds.push(stig.benchmarkId);\r",
											"        });\r",
											"\r",
											"        review.collections.forEach(function (collection) {\r",
											"            pm.expect(collection).to.have.property('collectionId');\r",
											"            stigIds.push(collection.collectionId);\r",
											"        });\r",
											"    \r",
											"\r",
											"        pm.expect(review.ruleInfo).to.have.property('ruleId');\r",
											"        pm.expect(review.ruleInfo).to.have.property('ruleTitle');         \r",
											"    });\r",
											"\r",
											"    //     pm.expect(collectionIds).to.include.members(allowedCollections);\r",
											"});\r",
											"\r",
											"// console.log(\"collectionIds = \" + collectionIds);\r",
											"\r",
											"\r",
											"\r",
											"let collectionQuery, benchmarkQuery, deptQuery = 0;\r",
											"\r",
											"pm.test(\"Response does contains correct assets for this user\", function () {\r",
											"\r",
											"    if (pm.request.url.getQueryString().match(/result=/)) {\r",
											"        collectionQuery = 1;\r",
											"        assetIds.forEach(function (asset) {\r",
											"            console.log(\"checking collection query assetId: \" + asset);\r",
											"            pm.expect(asset).to.be.oneOf(assetsForCollectionQuery);\r",
											"        });\r",
											"    }\r",
											"    \r",
											"//or....\r",
											"    if (pm.request.url.getQueryString().match(/result=/)) {\r",
											"        collectionQuery = 1;\r",
											"        assetIds.forEach(function (asset) {\r",
											"            console.log(\"checking collection query assetId: \" + asset);\r",
											"            pm.expect(asset).to.be.oneOf(assetsForCollectionQuery);\r",
											"        });\r",
											"    }\r",
											"\r",
											"    if (pm.request.url.getQueryString().match(/benchmarkId=/)) {\r",
											"        benchmarkQuery = 1;\r",
											"        assetIds.forEach(function (asset) {\r",
											"            console.log(\"checking benchmark query assetId: \" + asset);\r",
											"            pm.expect(asset).to.be.oneOf(assetsForBenchmarkQuery);\r",
											"        });        \r",
											"    }\r",
											"\r",
											"    if (pm.request.url.getQueryString().match(/deptId=/)) {\r",
											"        deptQuery = 1;\r",
											"        assetIds.forEach(function (asset) {\r",
											"            console.log(\"checking dept query assetId: \" + asset);\r",
											"            pm.expect(asset).to.be.oneOf(assetsForDeptQuery);\r",
											"        });        \r",
											"    }\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response contains authorized collectionIds for this user\", function () {\r",
											"    collectionIds.forEach(function (item) {\r",
											"        console.log(\"checking collectionId: \" + item);\r",
											"        pm.expect(item).to.be.oneOf(allowedCollections);\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response does NOT contain unAuthorized collectionIds for this user\", function () {\r",
											"    collectionIds.forEach(function (item) {\r",
											"        pm.expect(item).to.not.be.oneOf(disallowedCollections);\r",
											"    });\r",
											"\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"// if (user == \"wf60\" || user == \"officer60\") {\r",
											"//     pm.test(\"Response contains authorized projection data (assets)\", function () {\r",
											"//         assetIds.forEach(function (assetId) {\r",
											"//             pm.expect(assetId).to.be.oneOf(validAssets);\r",
											"//             console.log(\"checking assetId: \" + assetId);\r",
											"//         });\r",
											"//     });\r",
											"\r",
											"//     pm.test(\"Response contains authorized projection data (stigs)\", function () {\r",
											"//         stigIds.forEach(function (stigId) {\r",
											"//             pm.expect(stigId).to.be.oneOf(validStigs);\r",
											"//             console.log(\"checking stigId: \" + stigId);\r",
											"//         });\r",
											"//     });\r",
											"// }\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/reviews?action={{rev.action}}&benchmarkId={{rev.benchmark}}&projection=rule&projection=stigs&projection=asset",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reviews"
									],
									"query": [
										{
											"key": "result",
											"value": "{{rev.result}}",
											"disabled": true
										},
										{
											"key": "action",
											"value": "{{rev.action}}"
										},
										{
											"key": "status",
											"value": "{{rev.status}}",
											"disabled": true
										},
										{
											"key": "ruleId",
											"value": "{{rev.rule}}",
											"description": "Selects Reviews of a Rule",
											"disabled": true
										},
										{
											"key": "userId",
											"value": "{{rev.user}}",
											"disabled": true
										},
										{
											"key": "assetId",
											"value": "{{rev.asset}}",
											"description": "Selects Reviews mapped to an Asset",
											"disabled": true
										},
										{
											"key": "benchmarkId",
											"value": "{{rev.benchmark}}",
											"description": "Selects Reviews mapped to a STIG"
										},
										{
											"key": "revisionStr",
											"value": "{{rev.revStr}}",
											"disabled": true
										},
										{
											"key": "collectionId",
											"value": "{{rev.collection}}",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "rule",
											"description": "Selects Reviews mapped to a Collection"
										},
										{
											"key": "projection",
											"value": "stigs",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "asset",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "history",
											"disabled": true
										}
									]
								}
							},
							"response": [
								{
									"name": "ReviewProjected response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/reviews?elevate=<boolean>&state=<string>&action=<string>&status=<string>&ruleId=<string>&benchmarkId=<string>&assetId=<string>&collectionId=<integer>&projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reviews"
											],
											"query": [
												{
													"key": "elevate",
													"value": "<boolean>"
												},
												{
													"key": "state",
													"value": "<string>"
												},
												{
													"key": "action",
													"value": "<string>"
												},
												{
													"key": "status",
													"value": "<string>"
												},
												{
													"key": "ruleId",
													"value": "<string>"
												},
												{
													"key": "benchmarkId",
													"value": "<string>"
												},
												{
													"key": "assetId",
													"value": "<string>"
												},
												{
													"key": "collectionId",
													"value": "<integer>"
												},
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n {\n  \"reviewId\": \"<integer>\",\n  \"assetId\": \"<integer>\",\n  \"ruleId\": \"<string>\",\n  \"state\": \"<string>\",\n  \"stateComment\": \"<string>\",\n  \"autoState\": \"<boolean>\",\n  \"action\": \"<string>\",\n  \"actionComment\": \"<string>\",\n  \"reqDoc\": \"<boolean>\",\n  \"status\": \"<string>\",\n  \"userId\": \"<integer>\",\n  \"ts\": \"<string>\",\n  \"rejectText\": \"<string>\",\n  \"rejectUserId\": \"<integer>\",\n  \"history\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"asset\": {\n   \"assetId\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"dept\": \"<string>\"\n  },\n  \"stigs\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"rule\": {\n   \"ruleId\": \"<string>\",\n   \"version\": \"<string>\",\n   \"title\": \"<string>\",\n   \"severity\": \"<string>\"\n  }\n },\n {\n  \"reviewId\": \"<integer>\",\n  \"assetId\": \"<integer>\",\n  \"ruleId\": \"<string>\",\n  \"state\": \"<string>\",\n  \"stateComment\": \"<string>\",\n  \"autoState\": \"<boolean>\",\n  \"action\": \"<string>\",\n  \"actionComment\": \"<string>\",\n  \"reqDoc\": \"<boolean>\",\n  \"status\": \"<string>\",\n  \"userId\": \"<integer>\",\n  \"ts\": \"<string>\",\n  \"rejectText\": \"<string>\",\n  \"rejectUserId\": \"<integer>\",\n  \"history\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"asset\": {\n   \"assetId\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"dept\": \"<string>\"\n  },\n  \"stigs\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"rule\": {\n   \"ruleId\": \"<string>\",\n   \"version\": \"<string>\",\n   \"title\": \"<string>\",\n   \"severity\": \"<string>\"\n  }\n }\n]"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/reviews?elevate=<boolean>&state=<string>&action=<string>&status=<string>&ruleId=<string>&benchmarkId=<string>&assetId=<string>&collectionId=<integer>&projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reviews"
											],
											"query": [
												{
													"key": "elevate",
													"value": "<boolean>"
												},
												{
													"key": "state",
													"value": "<string>"
												},
												{
													"key": "action",
													"value": "<string>"
												},
												{
													"key": "status",
													"value": "<string>"
												},
												{
													"key": "ruleId",
													"value": "<string>"
												},
												{
													"key": "benchmarkId",
													"value": "<string>"
												},
												{
													"key": "assetId",
													"value": "<string>"
												},
												{
													"key": "collectionId",
													"value": "<integer>"
												},
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "get - reviews - result",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/reviews?result=<string>&action=<string>&status=<string>&ruleId=<string>&userId=&assetId=<string>&benchmarkId=<string>&revisionStr=&collectionId=&projection=ruleInfo&projection=stigs&projection=collections",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reviews"
									],
									"query": [
										{
											"key": "result",
											"value": "<string>"
										},
										{
											"key": "action",
											"value": "<string>"
										},
										{
											"key": "status",
											"value": "<string>"
										},
										{
											"key": "ruleId",
											"value": "<string>",
											"description": "Selects Reviews of a Rule"
										},
										{
											"key": "userId",
											"value": ""
										},
										{
											"key": "assetId",
											"value": "<string>",
											"description": "Selects Reviews mapped to an Asset"
										},
										{
											"key": "benchmarkId",
											"value": "<string>",
											"description": "Selects Reviews mapped to a STIG"
										},
										{
											"key": "revisionStr",
											"value": ""
										},
										{
											"key": "collectionId",
											"value": ""
										},
										{
											"key": "projection",
											"value": "ruleInfo",
											"description": "Selects Reviews mapped to a Collection"
										},
										{
											"key": "projection",
											"value": "stigs",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "collections",
											"description": "Additional properties to include in the response.\n"
										}
									]
								}
							},
							"response": [
								{
									"name": "ReviewProjected response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/reviews?elevate=<boolean>&state=<string>&action=<string>&status=<string>&ruleId=<string>&benchmarkId=<string>&assetId=<string>&collectionId=<integer>&projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reviews"
											],
											"query": [
												{
													"key": "elevate",
													"value": "<boolean>"
												},
												{
													"key": "state",
													"value": "<string>"
												},
												{
													"key": "action",
													"value": "<string>"
												},
												{
													"key": "status",
													"value": "<string>"
												},
												{
													"key": "ruleId",
													"value": "<string>"
												},
												{
													"key": "benchmarkId",
													"value": "<string>"
												},
												{
													"key": "assetId",
													"value": "<string>"
												},
												{
													"key": "collectionId",
													"value": "<integer>"
												},
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n {\n  \"reviewId\": \"<integer>\",\n  \"assetId\": \"<integer>\",\n  \"ruleId\": \"<string>\",\n  \"state\": \"<string>\",\n  \"stateComment\": \"<string>\",\n  \"autoState\": \"<boolean>\",\n  \"action\": \"<string>\",\n  \"actionComment\": \"<string>\",\n  \"reqDoc\": \"<boolean>\",\n  \"status\": \"<string>\",\n  \"userId\": \"<integer>\",\n  \"ts\": \"<string>\",\n  \"rejectText\": \"<string>\",\n  \"rejectUserId\": \"<integer>\",\n  \"history\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"asset\": {\n   \"assetId\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"dept\": \"<string>\"\n  },\n  \"stigs\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"rule\": {\n   \"ruleId\": \"<string>\",\n   \"version\": \"<string>\",\n   \"title\": \"<string>\",\n   \"severity\": \"<string>\"\n  }\n },\n {\n  \"reviewId\": \"<integer>\",\n  \"assetId\": \"<integer>\",\n  \"ruleId\": \"<string>\",\n  \"state\": \"<string>\",\n  \"stateComment\": \"<string>\",\n  \"autoState\": \"<boolean>\",\n  \"action\": \"<string>\",\n  \"actionComment\": \"<string>\",\n  \"reqDoc\": \"<boolean>\",\n  \"status\": \"<string>\",\n  \"userId\": \"<integer>\",\n  \"ts\": \"<string>\",\n  \"rejectText\": \"<string>\",\n  \"rejectUserId\": \"<integer>\",\n  \"history\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"asset\": {\n   \"assetId\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"dept\": \"<string>\"\n  },\n  \"stigs\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"rule\": {\n   \"ruleId\": \"<string>\",\n   \"version\": \"<string>\",\n   \"title\": \"<string>\",\n   \"severity\": \"<string>\"\n  }\n }\n]"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/reviews?elevate=<boolean>&state=<string>&action=<string>&status=<string>&ruleId=<string>&benchmarkId=<string>&assetId=<string>&collectionId=<integer>&projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reviews"
											],
											"query": [
												{
													"key": "elevate",
													"value": "<boolean>"
												},
												{
													"key": "state",
													"value": "<string>"
												},
												{
													"key": "action",
													"value": "<string>"
												},
												{
													"key": "status",
													"value": "<string>"
												},
												{
													"key": "ruleId",
													"value": "<string>"
												},
												{
													"key": "benchmarkId",
													"value": "<string>"
												},
												{
													"key": "assetId",
													"value": "<string>"
												},
												{
													"key": "collectionId",
													"value": "<integer>"
												},
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "{asset Id}",
					"item": [
						{
							"name": "{rule Id}",
							"item": [
								{
									"name": "Return the Review for an Asset and Rule",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/reviews/:assetId/:ruleId?elevate=<boolean>&projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reviews",
												":assetId",
												":ruleId"
											],
											"query": [
												{
													"key": "elevate",
													"value": "<boolean>",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)"
												},
												{
													"key": "projection",
													"value": "<string>",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "<string>",
													"description": "Additional properties to include in the response.\n"
												}
											],
											"variable": [
												{
													"id": "3021b912-343d-415f-bcc9-3a077774d0ca",
													"key": "assetId",
													"value": "<integer>",
													"type": "string",
													"description": "(Required) A path parameter that indentifies an Asset"
												},
												{
													"id": "4902c9a1-1d26-435e-bbaf-000698a73459",
													"key": "ruleId",
													"value": "<string>",
													"type": "string",
													"description": "(Required) A path parameter that indentifies a Rule"
												}
											]
										}
									},
									"response": [
										{
											"name": "unexpected error",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/reviews/:assetId/:ruleId?elevate=<boolean>&projection=<string>&projection=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"reviews",
														":assetId",
														":ruleId"
													],
													"query": [
														{
															"key": "elevate",
															"value": "<boolean>"
														},
														{
															"key": "projection",
															"value": "<string>"
														},
														{
															"key": "projection",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "assetId"
														},
														{
															"key": "ruleId"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
										},
										{
											"name": "ReviewProjected response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/reviews/:assetId/:ruleId?elevate=<boolean>&projection=<string>&projection=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"reviews",
														":assetId",
														":ruleId"
													],
													"query": [
														{
															"key": "elevate",
															"value": "<boolean>"
														},
														{
															"key": "projection",
															"value": "<string>"
														},
														{
															"key": "projection",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "assetId"
														},
														{
															"key": "ruleId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"reviewId\": \"<integer>\",\n \"assetId\": \"<integer>\",\n \"ruleId\": \"<string>\",\n \"state\": \"<string>\",\n \"stateComment\": \"<string>\",\n \"autoState\": \"<boolean>\",\n \"action\": \"<string>\",\n \"actionComment\": \"<string>\",\n \"reqDoc\": \"<boolean>\",\n \"status\": \"<string>\",\n \"userId\": \"<integer>\",\n \"ts\": \"<string>\",\n \"rejectText\": \"<string>\",\n \"rejectUserId\": \"<integer>\",\n \"history\": [\n  {\n   \"ts\": \"<string>\",\n   \"activityType\": \"<string>\",\n   \"columnName\": \"<string>\",\n   \"oldValue\": \"<string>\",\n   \"newValue\": \"<string>\",\n   \"userId\": \"<integer>\",\n   \"username\": \"<string>\"\n  },\n  {\n   \"ts\": \"<string>\",\n   \"activityType\": \"<string>\",\n   \"columnName\": \"<string>\",\n   \"oldValue\": \"<string>\",\n   \"newValue\": \"<string>\",\n   \"userId\": \"<integer>\",\n   \"username\": \"<string>\"\n  }\n ],\n \"asset\": {\n  \"assetId\": \"<integer>\",\n  \"name\": \"<string>\"\n },\n \"stigs\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"rule\": {\n  \"ruleId\": \"<string>\",\n  \"version\": \"<string>\",\n  \"title\": \"<string>\",\n  \"severity\": \"<string>\"\n }\n}"
										}
									]
								},
								{
									"name": "Create or update a Review",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"state\": \"<string>\",\n    \"stateComment\": \"<string>\",\n    \"action\": \"<string>\",\n    \"actionComment\": \"<string>\",\n    \"autoState\": \"<boolean>\",\n    \"status\": \"<string>\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/reviews/:assetId/:ruleId?elevate=<boolean>&projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reviews",
												":assetId",
												":ruleId"
											],
											"query": [
												{
													"key": "elevate",
													"value": "<boolean>",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)"
												},
												{
													"key": "projection",
													"value": "<string>",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "<string>",
													"description": "Additional properties to include in the response.\n"
												}
											],
											"variable": [
												{
													"id": "42ef00b2-45fe-465b-a0ce-20a69840c406",
													"key": "assetId",
													"value": "<integer>",
													"type": "string",
													"description": "(Required) A path parameter that indentifies an Asset"
												},
												{
													"id": "f27ff23a-5f0c-4e7d-971c-9e4d7966c6a4",
													"key": "ruleId",
													"value": "<string>",
													"type": "string",
													"description": "(Required) A path parameter that indentifies a Rule"
												}
											]
										},
										"description": "Create a new Review, or update all properties of an existing Review, setting missing properties to null"
									},
									"response": [
										{
											"name": "unexpected error",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"state\": \"<string>\",\n    \"stateComment\": \"<string>\",\n    \"action\": \"<string>\",\n    \"actionComment\": \"<string>\",\n    \"autoState\": \"<boolean>\",\n    \"status\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/reviews/:assetId/:ruleId?elevate=<boolean>&projection=<string>&projection=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"reviews",
														":assetId",
														":ruleId"
													],
													"query": [
														{
															"key": "elevate",
															"value": "<boolean>"
														},
														{
															"key": "projection",
															"value": "<string>"
														},
														{
															"key": "projection",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "assetId"
														},
														{
															"key": "ruleId"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
										},
										{
											"name": "ReviewProjected response",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"state\": \"<string>\",\n    \"stateComment\": \"<string>\",\n    \"action\": \"<string>\",\n    \"actionComment\": \"<string>\",\n    \"autoState\": \"<boolean>\",\n    \"status\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/reviews/:assetId/:ruleId?elevate=<boolean>&projection=<string>&projection=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"reviews",
														":assetId",
														":ruleId"
													],
													"query": [
														{
															"key": "elevate",
															"value": "<boolean>"
														},
														{
															"key": "projection",
															"value": "<string>"
														},
														{
															"key": "projection",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "assetId"
														},
														{
															"key": "ruleId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"reviewId\": \"<integer>\",\n \"assetId\": \"<integer>\",\n \"ruleId\": \"<string>\",\n \"state\": \"<string>\",\n \"stateComment\": \"<string>\",\n \"autoState\": \"<boolean>\",\n \"action\": \"<string>\",\n \"actionComment\": \"<string>\",\n \"reqDoc\": \"<boolean>\",\n \"status\": \"<string>\",\n \"userId\": \"<integer>\",\n \"ts\": \"<string>\",\n \"rejectText\": \"<string>\",\n \"rejectUserId\": \"<integer>\",\n \"history\": [\n  {\n   \"ts\": \"<string>\",\n   \"activityType\": \"<string>\",\n   \"columnName\": \"<string>\",\n   \"oldValue\": \"<string>\",\n   \"newValue\": \"<string>\",\n   \"userId\": \"<integer>\",\n   \"username\": \"<string>\"\n  },\n  {\n   \"ts\": \"<string>\",\n   \"activityType\": \"<string>\",\n   \"columnName\": \"<string>\",\n   \"oldValue\": \"<string>\",\n   \"newValue\": \"<string>\",\n   \"userId\": \"<integer>\",\n   \"username\": \"<string>\"\n  }\n ],\n \"asset\": {\n  \"assetId\": \"<integer>\",\n  \"name\": \"<string>\"\n },\n \"stigs\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"rule\": {\n  \"ruleId\": \"<string>\",\n  \"version\": \"<string>\",\n  \"title\": \"<string>\",\n  \"severity\": \"<string>\"\n }\n}"
										}
									]
								},
								{
									"name": "Merge update a Review",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"state\": \"<string>\",\n    \"stateComment\": \"<string>\",\n    \"action\": \"<string>\",\n    \"actionComment\": \"<string>\",\n    \"autoState\": \"<boolean>\",\n    \"status\": \"<string>\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/reviews/:assetId/:ruleId?elevate=<boolean>&projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reviews",
												":assetId",
												":ruleId"
											],
											"query": [
												{
													"key": "elevate",
													"value": "<boolean>",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)"
												},
												{
													"key": "projection",
													"value": "<string>",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "<string>",
													"description": "Additional properties to include in the response.\n"
												}
											],
											"variable": [
												{
													"id": "ecaaa9e8-f214-4052-9faa-f67f95912314",
													"key": "assetId",
													"value": "<integer>",
													"type": "string",
													"description": "(Required) A path parameter that indentifies an Asset"
												},
												{
													"id": "2ad2d1db-386a-4247-99ba-51b65e52510b",
													"key": "ruleId",
													"value": "<string>",
													"type": "string",
													"description": "(Required) A path parameter that indentifies a Rule"
												}
											]
										},
										"description": "Update the given properties of a Review, if it exists"
									},
									"response": [
										{
											"name": "ReviewProjected response",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"state\": \"<string>\",\n    \"stateComment\": \"<string>\",\n    \"action\": \"<string>\",\n    \"actionComment\": \"<string>\",\n    \"autoState\": \"<boolean>\",\n    \"status\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/reviews/:assetId/:ruleId?elevate=<boolean>&projection=<string>&projection=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"reviews",
														":assetId",
														":ruleId"
													],
													"query": [
														{
															"key": "elevate",
															"value": "<boolean>"
														},
														{
															"key": "projection",
															"value": "<string>"
														},
														{
															"key": "projection",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "assetId"
														},
														{
															"key": "ruleId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"reviewId\": \"<integer>\",\n \"assetId\": \"<integer>\",\n \"ruleId\": \"<string>\",\n \"state\": \"<string>\",\n \"stateComment\": \"<string>\",\n \"autoState\": \"<boolean>\",\n \"action\": \"<string>\",\n \"actionComment\": \"<string>\",\n \"reqDoc\": \"<boolean>\",\n \"status\": \"<string>\",\n \"userId\": \"<integer>\",\n \"ts\": \"<string>\",\n \"rejectText\": \"<string>\",\n \"rejectUserId\": \"<integer>\",\n \"history\": [\n  {\n   \"ts\": \"<string>\",\n   \"activityType\": \"<string>\",\n   \"columnName\": \"<string>\",\n   \"oldValue\": \"<string>\",\n   \"newValue\": \"<string>\",\n   \"userId\": \"<integer>\",\n   \"username\": \"<string>\"\n  },\n  {\n   \"ts\": \"<string>\",\n   \"activityType\": \"<string>\",\n   \"columnName\": \"<string>\",\n   \"oldValue\": \"<string>\",\n   \"newValue\": \"<string>\",\n   \"userId\": \"<integer>\",\n   \"username\": \"<string>\"\n  }\n ],\n \"asset\": {\n  \"assetId\": \"<integer>\",\n  \"name\": \"<string>\"\n },\n \"stigs\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"rule\": {\n  \"ruleId\": \"<string>\",\n  \"version\": \"<string>\",\n  \"title\": \"<string>\",\n  \"severity\": \"<string>\"\n }\n}"
										},
										{
											"name": "unexpected error",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"state\": \"<string>\",\n    \"stateComment\": \"<string>\",\n    \"action\": \"<string>\",\n    \"actionComment\": \"<string>\",\n    \"autoState\": \"<boolean>\",\n    \"status\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/reviews/:assetId/:ruleId?elevate=<boolean>&projection=<string>&projection=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"reviews",
														":assetId",
														":ruleId"
													],
													"query": [
														{
															"key": "elevate",
															"value": "<boolean>"
														},
														{
															"key": "projection",
															"value": "<string>"
														},
														{
															"key": "projection",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "assetId"
														},
														{
															"key": "ruleId"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
										}
									]
								},
								{
									"name": "Delete a Review",
									"request": {
										"auth": {
											"type": "oauth2"
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/reviews/:assetId/:ruleId?elevate=<boolean>&projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reviews",
												":assetId",
												":ruleId"
											],
											"query": [
												{
													"key": "elevate",
													"value": "<boolean>",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)"
												},
												{
													"key": "projection",
													"value": "<string>",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "<string>",
													"description": "Additional properties to include in the response.\n"
												}
											],
											"variable": [
												{
													"id": "f4ad8859-37b8-4a23-8ed7-779da972c1d4",
													"key": "assetId",
													"value": "<integer>",
													"type": "string",
													"description": "(Required) A path parameter that indentifies an Asset"
												},
												{
													"id": "e133a88e-a3eb-4508-97d8-0c4ad870719a",
													"key": "ruleId",
													"value": "<string>",
													"type": "string",
													"description": "(Required) A path parameter that indentifies a Rule"
												}
											]
										}
									},
									"response": [
										{
											"name": "ReviewProjected response",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/reviews/:assetId/:ruleId?elevate=<boolean>&projection=<string>&projection=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"reviews",
														":assetId",
														":ruleId"
													],
													"query": [
														{
															"key": "elevate",
															"value": "<boolean>"
														},
														{
															"key": "projection",
															"value": "<string>"
														},
														{
															"key": "projection",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "assetId"
														},
														{
															"key": "ruleId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"reviewId\": \"<integer>\",\n \"assetId\": \"<integer>\",\n \"ruleId\": \"<string>\",\n \"state\": \"<string>\",\n \"stateComment\": \"<string>\",\n \"autoState\": \"<boolean>\",\n \"action\": \"<string>\",\n \"actionComment\": \"<string>\",\n \"reqDoc\": \"<boolean>\",\n \"status\": \"<string>\",\n \"userId\": \"<integer>\",\n \"ts\": \"<string>\",\n \"rejectText\": \"<string>\",\n \"rejectUserId\": \"<integer>\",\n \"history\": [\n  {\n   \"ts\": \"<string>\",\n   \"activityType\": \"<string>\",\n   \"columnName\": \"<string>\",\n   \"oldValue\": \"<string>\",\n   \"newValue\": \"<string>\",\n   \"userId\": \"<integer>\",\n   \"username\": \"<string>\"\n  },\n  {\n   \"ts\": \"<string>\",\n   \"activityType\": \"<string>\",\n   \"columnName\": \"<string>\",\n   \"oldValue\": \"<string>\",\n   \"newValue\": \"<string>\",\n   \"userId\": \"<integer>\",\n   \"username\": \"<string>\"\n  }\n ],\n \"asset\": {\n  \"assetId\": \"<integer>\",\n  \"name\": \"<string>\"\n },\n \"stigs\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"rule\": {\n  \"ruleId\": \"<string>\",\n  \"version\": \"<string>\",\n  \"title\": \"<string>\",\n  \"severity\": \"<string>\"\n }\n}"
										},
										{
											"name": "unexpected error",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/reviews/:assetId/:ruleId?elevate=<boolean>&projection=<string>&projection=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"reviews",
														":assetId",
														":ruleId"
													],
													"query": [
														{
															"key": "elevate",
															"value": "<boolean>"
														},
														{
															"key": "projection",
															"value": "<string>"
														},
														{
															"key": "projection",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "assetId"
														},
														{
															"key": "ruleId"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
										}
									]
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Create or update one or more Reviews Copy",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"state\": \"<string>\",\n        \"stateComment\": \"<string>\",\n        \"assetId\": \"<integer>\",\n        \"ruleId\": \"<string>\",\n        \"action\": \"<string>\",\n        \"actionComment\": \"<string>\",\n        \"autoState\": \"<boolean>\",\n        \"status\": \"<string>\"\n    },\n    {\n        \"state\": \"<string>\",\n        \"stateComment\": \"<string>\",\n        \"assetId\": \"<integer>\",\n        \"ruleId\": \"<string>\",\n        \"action\": \"<string>\",\n        \"actionComment\": \"<string>\",\n        \"autoState\": \"<boolean>\",\n        \"status\": \"<string>\"\n    }\n]",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/reviews?elevate=<boolean>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reviews"
									],
									"query": [
										{
											"key": "elevate",
											"value": "<boolean>",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)"
										}
									]
								}
							},
							"response": [
								{
									"name": "ReviewProjected response",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"state\": \"<string>\",\n        \"stateComment\": \"<string>\",\n        \"assetId\": \"<integer>\",\n        \"ruleId\": \"<string>\",\n        \"action\": \"<string>\",\n        \"actionComment\": \"<string>\",\n        \"autoState\": \"<boolean>\",\n        \"status\": \"<string>\"\n    },\n    {\n        \"state\": \"<string>\",\n        \"stateComment\": \"<string>\",\n        \"assetId\": \"<integer>\",\n        \"ruleId\": \"<string>\",\n        \"action\": \"<string>\",\n        \"actionComment\": \"<string>\",\n        \"autoState\": \"<boolean>\",\n        \"status\": \"<string>\"\n    }\n]"
										},
										"url": {
											"raw": "{{baseUrl}}/reviews?elevate=<boolean>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reviews"
											],
											"query": [
												{
													"key": "elevate",
													"value": "<boolean>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"reviewId\": \"<integer>\",\n \"assetId\": \"<integer>\",\n \"ruleId\": \"<string>\",\n \"state\": \"<string>\",\n \"stateComment\": \"<string>\",\n \"autoState\": \"<boolean>\",\n \"action\": \"<string>\",\n \"actionComment\": \"<string>\",\n \"reqDoc\": \"<boolean>\",\n \"status\": \"<string>\",\n \"userId\": \"<integer>\",\n \"ts\": \"<string>\",\n \"rejectText\": \"<string>\",\n \"rejectUserId\": \"<integer>\",\n \"asset\": {\n  \"assetId\": \"<integer>\",\n  \"name\": \"<string>\"\n },\n \"stigs\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"rule\": {\n  \"ruleId\": \"<string>\",\n  \"version\": \"<string>\",\n  \"title\": \"<string>\",\n  \"severity\": \"<string>\"\n }\n}"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"state\": \"<string>\",\n        \"stateComment\": \"<string>\",\n        \"assetId\": \"<integer>\",\n        \"ruleId\": \"<string>\",\n        \"action\": \"<string>\",\n        \"actionComment\": \"<string>\",\n        \"autoState\": \"<boolean>\",\n        \"status\": \"<string>\"\n    },\n    {\n        \"state\": \"<string>\",\n        \"stateComment\": \"<string>\",\n        \"assetId\": \"<integer>\",\n        \"ruleId\": \"<string>\",\n        \"action\": \"<string>\",\n        \"actionComment\": \"<string>\",\n        \"autoState\": \"<boolean>\",\n        \"status\": \"<string>\"\n    }\n]"
										},
										"url": {
											"raw": "{{baseUrl}}/reviews?elevate=<boolean>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reviews"
											],
											"query": [
												{
													"key": "elevate",
													"value": "<boolean>"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Return a list of Reviews for an Asset",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/reviews/:assetId?elevate=<boolean>&state=<string>&action=<string>&status=<string>&benchmarkId=<string>&revisionStr=<string>&projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reviews",
										":assetId"
									],
									"query": [
										{
											"key": "elevate",
											"value": "<boolean>",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)"
										},
										{
											"key": "state",
											"value": "<string>"
										},
										{
											"key": "action",
											"value": "<string>"
										},
										{
											"key": "status",
											"value": "<string>"
										},
										{
											"key": "benchmarkId",
											"value": "<string>",
											"description": "Selects Reviews mapped to a STIG; requires revisionStr"
										},
										{
											"key": "revisionStr",
											"value": "<string>",
											"description": "Selects Reviews mapped to a Revision [ V{version_num}R{release_num} | 'latest' ]; requires benchmarkId"
										},
										{
											"key": "projection",
											"value": "<string>",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "<string>",
											"description": "Additional properties to include in the response.\n"
										}
									],
									"variable": [
										{
											"id": "78cbbbea-8b97-4e76-82e3-f2760c96d6bd",
											"key": "assetId",
											"value": "<integer>",
											"type": "string",
											"description": "(Required) A path parameter that indentifies an Asset"
										}
									]
								}
							},
							"response": [
								{
									"name": "ReviewProjected response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/reviews/:assetId?elevate=<boolean>&state=<string>&action=<string>&status=<string>&benchmarkId=<string>&revisionStr=<string>&projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reviews",
												":assetId"
											],
											"query": [
												{
													"key": "elevate",
													"value": "<boolean>"
												},
												{
													"key": "state",
													"value": "<string>"
												},
												{
													"key": "action",
													"value": "<string>"
												},
												{
													"key": "status",
													"value": "<string>"
												},
												{
													"key": "benchmarkId",
													"value": "<string>"
												},
												{
													"key": "revisionStr",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "assetId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n {\n  \"reviewId\": \"<integer>\",\n  \"assetId\": \"<integer>\",\n  \"ruleId\": \"<string>\",\n  \"state\": \"<string>\",\n  \"stateComment\": \"<string>\",\n  \"autoState\": \"<boolean>\",\n  \"action\": \"<string>\",\n  \"actionComment\": \"<string>\",\n  \"reqDoc\": \"<boolean>\",\n  \"status\": \"<string>\",\n  \"userId\": \"<integer>\",\n  \"ts\": \"<string>\",\n  \"rejectText\": \"<string>\",\n  \"rejectUserId\": \"<integer>\",\n  \"asset\": {\n   \"assetId\": \"<integer>\",\n   \"name\": \"<string>\"\n  },\n  \"stigs\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"rule\": {\n   \"ruleId\": \"<string>\",\n   \"version\": \"<string>\",\n   \"title\": \"<string>\",\n   \"severity\": \"<string>\"\n  }\n },\n {\n  \"reviewId\": \"<integer>\",\n  \"assetId\": \"<integer>\",\n  \"ruleId\": \"<string>\",\n  \"state\": \"<string>\",\n  \"stateComment\": \"<string>\",\n  \"autoState\": \"<boolean>\",\n  \"action\": \"<string>\",\n  \"actionComment\": \"<string>\",\n  \"reqDoc\": \"<boolean>\",\n  \"status\": \"<string>\",\n  \"userId\": \"<integer>\",\n  \"ts\": \"<string>\",\n  \"rejectText\": \"<string>\",\n  \"rejectUserId\": \"<integer>\",\n  \"asset\": {\n   \"assetId\": \"<integer>\",\n   \"name\": \"<string>\"\n  },\n  \"stigs\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"rule\": {\n   \"ruleId\": \"<string>\",\n   \"version\": \"<string>\",\n   \"title\": \"<string>\",\n   \"severity\": \"<string>\"\n  }\n }\n]"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/reviews/:assetId?elevate=<boolean>&state=<string>&action=<string>&status=<string>&benchmarkId=<string>&revisionStr=<string>&projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reviews",
												":assetId"
											],
											"query": [
												{
													"key": "elevate",
													"value": "<boolean>"
												},
												{
													"key": "state",
													"value": "<string>"
												},
												{
													"key": "action",
													"value": "<string>"
												},
												{
													"key": "status",
													"value": "<string>"
												},
												{
													"key": "benchmarkId",
													"value": "<string>"
												},
												{
													"key": "revisionStr",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "assetId"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "test",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": ""
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2020c808-b691-4466-9507-f1f69b37ecc2",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d5bddf0f-07ec-406b-a542-b9edab454d48",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Import one or more Reviews from a JSON body, a STIGViewer CKL file, or an SCC XCCDF file",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "importFile",
									"value": "<binary>",
									"description": "Extension .ckl from STIGVewer or .xml from SCAP Compliance Checker (SCC)"
								},
								{
									"key": "assetId",
									"value": "<string>",
									"description": "If provided, file contents will be checked for match"
								},
								{
									"key": "benchmarkId",
									"value": "<string>",
									"description": "If provided, file contents will be checked for match"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/reviews",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"reviews"
							]
						},
						"description": "| RBAC | User Level 1 | User Level 2 | User Level 3 | elevated |\n|-----|-----|-------|-------|-------|\n|RequestBody| assetId: any<BR>ruleId: any|assetId: any departmental<BR>ruleId: any | assetId: any mapped asset<BR>ruleId: any ruleId from a mapped STIG on the asset |NA  |\n"
					},
					"response": [
						{
							"name": "ReviewProjected response",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "importFile",
											"value": "<binary>",
											"description": {
												"content": "Extension .ckl from STIGVewer or .xml from SCAP Compliance Checker (SCC)",
												"type": "text/plain"
											}
										},
										{
											"key": "assetId",
											"value": "<string>",
											"description": {
												"content": "If provided, file contents will be checked for match",
												"type": "text/plain"
											}
										},
										{
											"key": "benchmarkId",
											"value": "<string>",
											"description": {
												"content": "If provided, file contents will be checked for match",
												"type": "text/plain"
											}
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/reviews",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reviews"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"assetId\": \"<integer>\",\n \"ruleId\": \"<string>\",\n \"result\": \"<string>\",\n \"resultComment\": \"<string>\",\n \"autoResult\": \"<boolean>\",\n \"action\": \"<string>\",\n \"actionComment\": \"<string>\",\n \"status\": \"<string>\",\n \"userId\": \"<integer>\",\n \"ts\": \"<string>\",\n \"rejectText\": \"<string>\",\n \"rejectUserId\": \"<integer>\",\n \"asset\": {\n  \"assetId\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"dept\": {\n   \"deptId\": \"<integer>\",\n   \"name\": \"<string>\"\n  }\n },\n \"stigs\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"rule\": {\n  \"ruleId\": \"<string>\",\n  \"version\": \"<string>\",\n  \"title\": \"<string>\",\n  \"severity\": \"<string>\"\n }\n}"
						},
						{
							"name": "unexpected error",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "importFile",
											"value": "<binary>",
											"description": {
												"content": "Extension .ckl from STIGVewer or .xml from SCAP Compliance Checker (SCC)",
												"type": "text/plain"
											}
										},
										{
											"key": "assetId",
											"value": "<string>",
											"description": {
												"content": "If provided, file contents will be checked for match",
												"type": "text/plain"
											}
										},
										{
											"key": "benchmarkId",
											"value": "<string>",
											"description": {
												"content": "If provided, file contents will be checked for match",
												"type": "text/plain"
											}
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/reviews",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reviews"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "Return a list of Reviews accessible to the requester",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/reviews?result=<string>&action=<string>&status=<string>&ruleId=<string>&userId=<integer>&assetId=<integer>&benchmarkId=<string>&revisionStr=<string>&collectionId=<integer>&projection=<string>&projection=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"reviews"
							],
							"query": [
								{
									"key": "result",
									"value": "<string>"
								},
								{
									"key": "action",
									"value": "<string>"
								},
								{
									"key": "status",
									"value": "<string>"
								},
								{
									"key": "ruleId",
									"value": "<string>",
									"description": "Selects Reviews of a Rule"
								},
								{
									"key": "userId",
									"value": "<integer>",
									"description": "Selects Reviews last saved by a User"
								},
								{
									"key": "assetId",
									"value": "<integer>",
									"description": "Selects Reviews mapped to an Asset"
								},
								{
									"key": "benchmarkId",
									"value": "<string>",
									"description": "Selects Reviews mapped to a STIG; requires revisionStr"
								},
								{
									"key": "revisionStr",
									"value": "<string>",
									"description": "Selects Reviews mapped to a Revision [ V{version_num}R{release_num} | 'latest' ]; requires benchmarkId"
								},
								{
									"key": "collectionId",
									"value": "<integer>",
									"description": "Selects Reviews mapped to a Collection"
								},
								{
									"key": "projection",
									"value": "<string>",
									"description": "Additional properties to include in the response.\n"
								},
								{
									"key": "projection",
									"value": "<string>",
									"description": "Additional properties to include in the response.\n"
								}
							]
						},
						"description": "| RBAC | User Level 1 | User Level 2 | User Level 3 | elevated |\n|-----|-----|-------|-------|-------|\n|Response| All reviews | All departmental reviews | All mapped reviews  | NA  |\n"
					},
					"response": [
						{
							"name": "unexpected error",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/reviews?result=<string>&action=<string>&status=<string>&ruleId=<string>&userId=<integer>&assetId=<integer>&benchmarkId=<string>&revisionStr=<string>&collectionId=<integer>&projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reviews"
									],
									"query": [
										{
											"key": "result",
											"value": "<string>"
										},
										{
											"key": "action",
											"value": "<string>"
										},
										{
											"key": "status",
											"value": "<string>"
										},
										{
											"key": "ruleId",
											"value": "<string>"
										},
										{
											"key": "userId",
											"value": "<integer>"
										},
										{
											"key": "assetId",
											"value": "<integer>"
										},
										{
											"key": "benchmarkId",
											"value": "<string>"
										},
										{
											"key": "revisionStr",
											"value": "<string>"
										},
										{
											"key": "collectionId",
											"value": "<integer>"
										},
										{
											"key": "projection",
											"value": "<string>"
										},
										{
											"key": "projection",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
						},
						{
							"name": "ReviewProjected response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/reviews?result=<string>&action=<string>&status=<string>&ruleId=<string>&userId=<integer>&assetId=<integer>&benchmarkId=<string>&revisionStr=<string>&collectionId=<integer>&projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reviews"
									],
									"query": [
										{
											"key": "result",
											"value": "<string>"
										},
										{
											"key": "action",
											"value": "<string>"
										},
										{
											"key": "status",
											"value": "<string>"
										},
										{
											"key": "ruleId",
											"value": "<string>"
										},
										{
											"key": "userId",
											"value": "<integer>"
										},
										{
											"key": "assetId",
											"value": "<integer>"
										},
										{
											"key": "benchmarkId",
											"value": "<string>"
										},
										{
											"key": "revisionStr",
											"value": "<string>"
										},
										{
											"key": "collectionId",
											"value": "<integer>"
										},
										{
											"key": "projection",
											"value": "<string>"
										},
										{
											"key": "projection",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"assetId\": \"<integer>\",\n  \"ruleId\": \"<string>\",\n  \"result\": \"<string>\",\n  \"resultComment\": \"<string>\",\n  \"autoResult\": \"<boolean>\",\n  \"action\": \"<string>\",\n  \"actionComment\": \"<string>\",\n  \"status\": \"<string>\",\n  \"userId\": \"<integer>\",\n  \"ts\": \"<string>\",\n  \"rejectText\": \"<string>\",\n  \"rejectUserId\": \"<integer>\",\n  \"asset\": {\n   \"assetId\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"dept\": {\n    \"deptId\": \"<integer>\",\n    \"name\": \"<string>\"\n   }\n  },\n  \"stigs\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"rule\": {\n   \"ruleId\": \"<string>\",\n   \"version\": \"<string>\",\n   \"title\": \"<string>\",\n   \"severity\": \"<string>\"\n  }\n },\n {\n  \"assetId\": \"<integer>\",\n  \"ruleId\": \"<string>\",\n  \"result\": \"<string>\",\n  \"resultComment\": \"<string>\",\n  \"autoResult\": \"<boolean>\",\n  \"action\": \"<string>\",\n  \"actionComment\": \"<string>\",\n  \"status\": \"<string>\",\n  \"userId\": \"<integer>\",\n  \"ts\": \"<string>\",\n  \"rejectText\": \"<string>\",\n  \"rejectUserId\": \"<integer>\",\n  \"asset\": {\n   \"assetId\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"dept\": {\n    \"deptId\": \"<integer>\",\n    \"name\": \"<string>\"\n   }\n  },\n  \"stigs\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"rule\": {\n   \"ruleId\": \"<string>\",\n   \"version\": \"<string>\",\n   \"title\": \"<string>\",\n   \"severity\": \"<string>\"\n  }\n }\n]"
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "WIP - testing",
			"item": [
				{
					"name": "Create an Asset Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "46aead40-0541-4574-bec7-3b8e5a11ba20",
								"exec": [
									"let user = pm.environment.get(\"user\");\r",
									"console.log(\"user: \" + user);\r",
									"if (user == \"wf10\") {\r",
									"    pm.test(\"Status should be is 403 for user wf10\", function () {\r",
									"        pm.response.to.have.status(403);\r",
									"    });\r",
									"    return;\r",
									"}\r",
									"\r",
									"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
									"    user = \"elevated\";\r",
									"    console.log(\"user is elevated\");\r",
									"\r",
									"}\r",
									"\r",
									"var stuff = pm.request.auth;\r",
									"var stuff = pm.request;\r",
									"\r",
									"if (user == 'elevated' || user == 'staff' || user == \"officer60\") {\r",
									"    pm.test(\"User is elevated. Status code is 201\", function () {\r",
									"        pm.response.to.have.status(201);\r",
									"    });\r",
									"}\r",
									"else {\r",
									"    pm.test(\"User is not Staff, IAO (w/ proper dept) or elevated. Expected status code is 403\", function () {\r",
									"        pm.response.to.have.status(403);\r",
									"    });\r",
									"    return;\r",
									"}\r",
									"\r",
									"if (pm.response.code == 500) {\r",
									"    console.log(\"Server returned 500\")\r",
									"    return;\r",
									"}\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Response JSON is an object\", function () {\r",
									"    pm.expect(jsonData).to.be.an('object');\r",
									"});\r",
									"\r",
									"let createdAsset = jsonData.assetId;\r",
									"console.log(\"created asset: \" + createdAsset)\r",
									"pm.environment.set(\"createdAsset\", createdAsset);\r",
									"\r",
									"pm.test(`Created Asset: ${createdAsset}`, function () {\r",
									"    pm.expect(createdAsset).to.be.an('number');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJGSjg2R2NGM2pUYk5MT2NvNE52WmtVQ0lVbWZZQ3FvcXRPUWVNZmJoTmxFIn0.eyJqdGkiOiIwZWJlZDU1MS01ZmNlLTRiYzMtYmQ0Yi1kMGRjMjJkMDc5YTgiLCJleHAiOjE2MjI2MDU1MjUsIm5iZiI6MCwiaWF0IjoxNTkxMDY5NTI1LCJpc3MiOiJodHRwOi8vbG9jYWxob3N0OjgwODAvYXV0aC9yZWFsbXMvc3RpZ21hbiIsImF1ZCI6ImFjY291bnQiLCJzdWIiOiI3ZGUzODg4Ny1mNmJmLTQ1OTctYWMyZC1iZjlmOWI2NjAyZDkiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJzdGlnLW1hbmFnZXIiLCJhdXRoX3RpbWUiOjAsInNlc3Npb25fc3RhdGUiOiIxOGUyZmI5Yy0zYzQ4LTRjMGYtYTdiMy03MDk4MWYxMDY4OGYiLCJhY3IiOiIxIiwiYWxsb3dlZC1vcmlnaW5zIjpbIioiXSwicmVzb3VyY2VfYWNjZXNzIjp7ImFjY291bnQiOnsicm9sZXMiOlsibWFuYWdlLWFjY291bnQiLCJtYW5hZ2UtYWNjb3VudC1saW5rcyIsInZpZXctcHJvZmlsZSJdfX0sInNjb3BlIjoicHJvZmlsZSBzdGlnLW1hbmFnZXIiLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiJvZmZpY2VyLTYwIn0.ET5KOS4KMvKJ-Kc4Fg_Fyv7iorajfBmjSoyZVOXWU09kQDiAhPWhGwYRvXxmdcnpmkgI2MNC4GtR_3b3MK4W5oQ9vAGD-5-SvJjLpT0hiD9FkBXAFtFtcUP0hq7rHv9cROcFLW71MOqodP0EOKXmGxdZ-VziXoWnz4I5QQSfIHI",
									"type": "string"
								},
								{
									"key": "tokenType",
									"value": "bearer",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"z_testAsset-Xx\",\n    \"deptId\": 85,\n    \"ip\": \"\",\n    \"nonnetwork\": false,\n    \"collectionIds\": [],\n    \"stigReviewers\": []\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/assets?projection=collections&projection=stigReviewers&projection=adminStats&elevate=false",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"assets"
							],
							"query": [
								{
									"key": "projection",
									"value": "collections",
									"description": "Additional properties to include in the response.\n"
								},
								{
									"key": "projection",
									"value": "stigs",
									"description": "Additional properties to include in the response.\n",
									"disabled": true
								},
								{
									"key": "projection",
									"value": "stigReviewers"
								},
								{
									"key": "projection",
									"value": "adminStats"
								},
								{
									"key": "elevate",
									"value": "false"
								}
							]
						}
					},
					"response": [
						{
							"name": "AssetProjected response",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"assetId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"dept\": \"<string>\",\n    \"ip\": \"<string>\",\n    \"nonnetwork\": \"<boolean>\",\n    \"scanexempt\": \"<boolean>\",\n    \"collectionIds\": [\n        \"<integer>\",\n        \"<integer>\"\n    ],\n    \"benchmarkIds\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"stigReviewers\": [\n        {\n            \"benchmarkId\": \"<string>\",\n            \"userIds\": [\n                \"<integer>\",\n                \"<integer>\"\n            ]\n        },\n        {\n            \"benchmarkId\": \"<string>\",\n            \"userIds\": [\n                \"<integer>\",\n                \"<integer>\"\n            ]\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/assets?projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"assets"
									],
									"query": [
										{
											"key": "projection",
											"value": "<string>"
										},
										{
											"key": "projection",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"assetId\": \"<integer>\",\n \"name\": \"<string>\",\n \"dept\": \"<string>\",\n \"ip\": \"<string>\",\n \"nonnetwork\": \"<boolean>\",\n \"scanexempt\": \"<boolean>\",\n \"adminStats\": {\n  \"stigCount\": \"<integer>\",\n  \"stigAssignedCount\": \"<integer>\"\n },\n \"collections\": [\n  {\n   \"collectionId\": \"<integer>\",\n   \"name\": \"<string>\"\n  },\n  {\n   \"collectionId\": \"<integer>\",\n   \"name\": \"<string>\"\n  }\n ],\n \"stigs\": [\n  {\n   \"benchmarkId\": \"<string>\",\n   \"lastRevisionStr\": \"<string>\",\n   \"lastRevisionDate\": \"<string>\",\n   \"title\": \"<string>\"\n  },\n  {\n   \"benchmarkId\": \"<string>\",\n   \"lastRevisionStr\": \"<string>\",\n   \"lastRevisionDate\": \"<string>\",\n   \"title\": \"<string>\"\n  }\n ],\n \"stigReviewers\": [\n  {\n   \"benchmarkId\": \"<string>\",\n   \"reviewers\": [\n    {\n     \"userId\": \"<integer>\",\n     \"username\": \"<string>\"\n    },\n    {\n     \"userId\": \"<integer>\",\n     \"username\": \"<string>\"\n    }\n   ]\n  },\n  {\n   \"benchmarkId\": \"<string>\",\n   \"reviewers\": [\n    {\n     \"userId\": \"<integer>\",\n     \"username\": \"<string>\"\n    },\n    {\n     \"userId\": \"<integer>\",\n     \"username\": \"<string>\"\n    }\n   ]\n  }\n ]\n}"
						},
						{
							"name": "unexpected error",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"assetId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"dept\": \"<string>\",\n    \"ip\": \"<string>\",\n    \"nonnetwork\": \"<boolean>\",\n    \"scanexempt\": \"<boolean>\",\n    \"collectionIds\": [\n        \"<integer>\",\n        \"<integer>\"\n    ],\n    \"benchmarkIds\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"stigReviewers\": [\n        {\n            \"benchmarkId\": \"<string>\",\n            \"userIds\": [\n                \"<integer>\",\n                \"<integer>\"\n            ]\n        },\n        {\n            \"benchmarkId\": \"<string>\",\n            \"userIds\": [\n                \"<integer>\",\n                \"<integer>\"\n            ]\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/assets?projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"assets"
									],
									"query": [
										{
											"key": "projection",
											"value": "<string>"
										},
										{
											"key": "projection",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "Delete an Asset Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3ae2c4ca-941d-4471-bf0c-e715d988ffea",
								"exec": [
									"\r",
									"let user = pm.environment.get(\"user\");\r",
									"console.log(\"user: \" + user);\r",
									"if (user == \"wf10\") {\r",
									"    pm.test(\"Status should be is 403 for user wf10\", function () {\r",
									"        pm.response.to.have.status(403);\r",
									"    });\r",
									"    return;\r",
									"}\r",
									"\r",
									"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
									"    user = \"elevated\";\r",
									"}\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"if (user == \"wf60\") {\r",
									"    pm.test(\"Status code should be 403\", function () {\r",
									"        pm.response.to.have.status(403);\r",
									"    });\r",
									"    console.log(`Status code: ${pm.response.code}. Either previous test did not create the collection, the collection has already been deleted, or this user is not authorized to delete this collection.`);\r",
									"    return;\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"console.log(jsonData);\r",
									"// console.log(pm.environment.get(\"env\"));\r",
									"\r",
									"pm.test(\"Response is a JSON object\", function () {\r",
									"    pm.expect(jsonData).to.be.an('object');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJGSjg2R2NGM2pUYk5MT2NvNE52WmtVQ0lVbWZZQ3FvcXRPUWVNZmJoTmxFIn0.eyJqdGkiOiJkNDQ1MGM4NC0xMjhhLTQwNTAtYjA2Yy1iYTZmNTU3M2Q0MWMiLCJleHAiOjE2MjI2MDU1NzMsIm5iZiI6MCwiaWF0IjoxNTkxMDY5NTczLCJpc3MiOiJodHRwOi8vbG9jYWxob3N0OjgwODAvYXV0aC9yZWFsbXMvc3RpZ21hbiIsImF1ZCI6ImFjY291bnQiLCJzdWIiOiIwMWMzMDdmMS05YTNkLTQzMmYtYjMwZi1mZjhiOTIzNzI2MGQiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJzdGlnLW1hbmFnZXIiLCJhdXRoX3RpbWUiOjAsInNlc3Npb25fc3RhdGUiOiIyMTc0YzUxMS0zYWYwLTRjODktODViOS1iOWM3Nzk0ODAxYzEiLCJhY3IiOiIxIiwiYWxsb3dlZC1vcmlnaW5zIjpbIioiXSwicmVzb3VyY2VfYWNjZXNzIjp7ImFjY291bnQiOnsicm9sZXMiOlsibWFuYWdlLWFjY291bnQiLCJtYW5hZ2UtYWNjb3VudC1saW5rcyIsInZpZXctcHJvZmlsZSJdfX0sInNjb3BlIjoicHJvZmlsZSBzdGlnLW1hbmFnZXIiLCJuYW1lIjoiQ1NXRiA2MCIsInByZWZlcnJlZF91c2VybmFtZSI6Indvcmtmb3JjZS02MCIsImdpdmVuX25hbWUiOiJDU1dGIiwiZmFtaWx5X25hbWUiOiI2MCJ9.pPxqFyNuMTzS10JemuoBJUGgmJ78GMyFYXmmg0KFH3gtgbpM1L0EtTlMmnHOK0rQPIPoplDyYzn75S22ronXK5iVKZCNSP1nRJPELi2lCF60hrwZ2i59XFHyEvBVqFn8aka1wa8mER811WROeZxvd9jrgDI0vwFwqimmCKNhLRg",
									"type": "string"
								},
								{
									"key": "tokenType",
									"value": "bearer",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/assets/:assetId?projection=collections&projection=stigReviewers&projection=adminStats&elevate=false",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"assets",
								":assetId"
							],
							"query": [
								{
									"key": "projection",
									"value": "collections",
									"description": "Additional properties to include in the response.\n"
								},
								{
									"key": "projection",
									"value": "stigReviewers",
									"description": "Additional properties to include in the response.\n"
								},
								{
									"key": "projection",
									"value": "adminStats"
								},
								{
									"key": "elevate",
									"value": "false",
									"description": "Elevate the user context for this request if user is permitted (canAdmin)"
								}
							],
							"variable": [
								{
									"id": "931a23c0-5ccd-4013-9cd0-25df8b1abeb1",
									"key": "assetId",
									"value": "{{createdAsset}}",
									"type": "string",
									"description": "(Required) A path parameter that indentifies an Asset"
								}
							]
						}
					},
					"response": [
						{
							"name": "AssetProjected response",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/assets/:assetId?elevate=<boolean>&projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"assets",
										":assetId"
									],
									"query": [
										{
											"key": "elevate",
											"value": "<boolean>"
										},
										{
											"key": "projection",
											"value": "<string>"
										},
										{
											"key": "projection",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "assetId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"assetId\": \"<integer>\",\n \"name\": \"<string>\",\n \"dept\": \"<string>\",\n \"ip\": \"<string>\",\n \"nonnetwork\": \"<boolean>\",\n \"scanexempt\": \"<boolean>\",\n \"adminStats\": {\n  \"stigCount\": \"<integer>\",\n  \"stigAssignedCount\": \"<integer>\"\n },\n \"collections\": [\n  {\n   \"collectionId\": \"<integer>\",\n   \"name\": \"<string>\"\n  },\n  {\n   \"collectionId\": \"<integer>\",\n   \"name\": \"<string>\"\n  }\n ],\n \"stigs\": [\n  {\n   \"benchmarkId\": \"<string>\",\n   \"lastRevisionStr\": \"<string>\",\n   \"lastRevisionDate\": \"<string>\",\n   \"title\": \"<string>\"\n  },\n  {\n   \"benchmarkId\": \"<string>\",\n   \"lastRevisionStr\": \"<string>\",\n   \"lastRevisionDate\": \"<string>\",\n   \"title\": \"<string>\"\n  }\n ],\n \"stigReviewers\": [\n  {\n   \"benchmarkId\": \"<string>\",\n   \"reviewers\": [\n    {\n     \"userId\": \"<integer>\",\n     \"username\": \"<string>\"\n    },\n    {\n     \"userId\": \"<integer>\",\n     \"username\": \"<string>\"\n    }\n   ]\n  },\n  {\n   \"benchmarkId\": \"<string>\",\n   \"reviewers\": [\n    {\n     \"userId\": \"<integer>\",\n     \"username\": \"<string>\"\n    },\n    {\n     \"userId\": \"<integer>\",\n     \"username\": \"<string>\"\n    }\n   ]\n  }\n ]\n}"
						},
						{
							"name": "unexpected error",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/assets/:assetId?elevate=<boolean>&projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"assets",
										":assetId"
									],
									"query": [
										{
											"key": "elevate",
											"value": "<boolean>"
										},
										{
											"key": "projection",
											"value": "<string>"
										},
										{
											"key": "projection",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "assetId"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "Delete an Asset CLEANUP Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c748ec82-61f7-4d60-881b-b964c79b3148",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{token.staff}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/assets/:assetId?elevate=true&projection=collections&projection=stigReviewers&projection=adminStats",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"assets",
								":assetId"
							],
							"query": [
								{
									"key": "elevate",
									"value": "true",
									"description": "Elevate the user context for this request if user is permitted (canAdmin)"
								},
								{
									"key": "projection",
									"value": "collections",
									"description": "Additional properties to include in the response.\n"
								},
								{
									"key": "projection",
									"value": "stigReviewers",
									"description": "Additional properties to include in the response.\n"
								},
								{
									"key": "projection",
									"value": "adminStats"
								}
							],
							"variable": [
								{
									"id": "59efe842-2b17-49f7-90b2-e3a3b5a4706b",
									"key": "assetId",
									"value": "{{createdAsset}}",
									"type": "string",
									"description": "(Required) A path parameter that indentifies an Asset"
								}
							]
						}
					},
					"response": [
						{
							"name": "AssetProjected response",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/assets/:assetId?elevate=<boolean>&projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"assets",
										":assetId"
									],
									"query": [
										{
											"key": "elevate",
											"value": "<boolean>"
										},
										{
											"key": "projection",
											"value": "<string>"
										},
										{
											"key": "projection",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "assetId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"assetId\": \"<integer>\",\n \"name\": \"<string>\",\n \"dept\": \"<string>\",\n \"ip\": \"<string>\",\n \"nonnetwork\": \"<boolean>\",\n \"scanexempt\": \"<boolean>\",\n \"adminStats\": {\n  \"stigCount\": \"<integer>\",\n  \"stigAssignedCount\": \"<integer>\"\n },\n \"collections\": [\n  {\n   \"collectionId\": \"<integer>\",\n   \"name\": \"<string>\"\n  },\n  {\n   \"collectionId\": \"<integer>\",\n   \"name\": \"<string>\"\n  }\n ],\n \"stigs\": [\n  {\n   \"benchmarkId\": \"<string>\",\n   \"lastRevisionStr\": \"<string>\",\n   \"lastRevisionDate\": \"<string>\",\n   \"title\": \"<string>\"\n  },\n  {\n   \"benchmarkId\": \"<string>\",\n   \"lastRevisionStr\": \"<string>\",\n   \"lastRevisionDate\": \"<string>\",\n   \"title\": \"<string>\"\n  }\n ],\n \"stigReviewers\": [\n  {\n   \"benchmarkId\": \"<string>\",\n   \"reviewers\": [\n    {\n     \"userId\": \"<integer>\",\n     \"username\": \"<string>\"\n    },\n    {\n     \"userId\": \"<integer>\",\n     \"username\": \"<string>\"\n    }\n   ]\n  },\n  {\n   \"benchmarkId\": \"<string>\",\n   \"reviewers\": [\n    {\n     \"userId\": \"<integer>\",\n     \"username\": \"<string>\"\n    },\n    {\n     \"userId\": \"<integer>\",\n     \"username\": \"<string>\"\n    }\n   ]\n  }\n ]\n}"
						},
						{
							"name": "unexpected error",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/assets/:assetId?elevate=<boolean>&projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"assets",
										":assetId"
									],
									"query": [
										{
											"key": "elevate",
											"value": "<boolean>"
										},
										{
											"key": "projection",
											"value": "<string>"
										},
										{
											"key": "projection",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "assetId"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Reviews Tests",
			"item": [
				{
					"name": "{asset Id}",
					"item": [
						{
							"name": "{rule Id}",
							"item": [
								{
									"name": "Return the Review for an Asset and Rule",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e8ba4592-8fb0-4517-a179-6ad86f713d5b",
												"exec": [
													"let user = pm.environment.get(\"user\");\r",
													"console.log(\"user: \" + user);\r",
													"if (user == \"wf10\") {\r",
													"    pm.test(\"Status should be is 403 for user wf10\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"\r",
													"\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
													"    user = \"elevated\";\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													"if (user == \"collectionCreator\") {\r",
													"    pm.test(\"Status code is 403 only for collectionCreator, who has no grants.\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"}\r",
													"else{\r",
													"    pm.test(\"Status code is 200 for all users but collectionCreator, who has no grants.\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });    \r",
													"}\r",
													"\r",
													"let queryRule = pm.environment.get(\"reviews.testRule\");\r",
													"let queryAsset = pm.environment.get(\"assets.queryAsset\");\r",
													"\r",
													"pm.test(\"Received requested rule, asset\", function () {\r",
													"    pm.expect(jsonData.ruleId).to.eql(queryRule);\r",
													"    pm.expect(jsonData.assetId).to.eql(queryAsset);\r",
													"    \r",
													"});    \r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId?projection=ruleInfo&projection=history&projection=stigs&projection=collections",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"reviews",
												":assetId",
												":ruleId"
											],
											"query": [
												{
													"key": "projection",
													"value": "ruleInfo",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "history",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "stigs"
												},
												{
													"key": "projection",
													"value": "collections"
												}
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "{{testCollection}}",
													"type": "string",
													"description": "(Required) A path parameter that indentifies a Collection"
												},
												{
													"key": "assetId",
													"value": "{{assets.queryAsset}}",
													"type": "string",
													"description": "(Required) A path parameter that indentifies an Asset"
												},
												{
													"key": "ruleId",
													"value": "{{reviews.testRule}}",
													"type": "string",
													"description": "(Required) A path parameter that indentifies a Rule"
												}
											]
										}
									},
									"response": [
										{
											"name": "unexpected error",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId?projection=<string>&projection=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"reviews",
														":assetId",
														":ruleId"
													],
													"query": [
														{
															"key": "projection",
															"value": "<string>"
														},
														{
															"key": "projection",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "collectionId"
														},
														{
															"key": "assetId"
														},
														{
															"key": "ruleId"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
										},
										{
											"name": "ReviewProjected response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId?projection=<string>&projection=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"reviews",
														":assetId",
														":ruleId"
													],
													"query": [
														{
															"key": "projection",
															"value": "<string>"
														},
														{
															"key": "projection",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "collectionId"
														},
														{
															"key": "assetId"
														},
														{
															"key": "ruleId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"assetId\": \"<string>\",\n \"assetName\": \"<string>\",\n \"ruleId\": \"<string>\",\n \"result\": \"<string>\",\n \"resultComment\": \"<string>\",\n \"autoResult\": \"<boolean>\",\n \"action\": \"<string>\",\n \"actionComment\": \"<string>\",\n \"status\": \"<string>\",\n \"userId\": \"<string>\",\n \"username\": \"<string>\",\n \"ts\": \"<string>\",\n \"rejectText\": \"<string>\",\n \"rejectUserId\": \"<string>\",\n \"history\": [\n  {\n   \"ts\": \"<string>\",\n   \"activityType\": \"<string>\",\n   \"columnName\": \"<string>\",\n   \"oldValue\": \"<string>\",\n   \"newValue\": \"<string>\",\n   \"userId\": \"<string>\",\n   \"username\": \"<string>\"\n  },\n  {\n   \"ts\": \"<string>\",\n   \"activityType\": \"<string>\",\n   \"columnName\": \"<string>\",\n   \"oldValue\": \"<string>\",\n   \"newValue\": \"<string>\",\n   \"userId\": \"<string>\",\n   \"username\": \"<string>\"\n  }\n ],\n \"asset\": {\n  \"assetId\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"stigs\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"rule\": {\n  \"ruleId\": \"<string>\",\n  \"version\": \"<string>\",\n  \"title\": \"<string>\",\n  \"severity\": \"<string>\"\n }\n}"
										}
									]
								},
								{
									"name": "Set all properties of a Review",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"result\": \"<string>\",\n    \"resultComment\": \"<string>\",\n    \"action\": \"<string>\",\n    \"actionComment\": \"<string>\",\n    \"autoResult\": \"<boolean>\",\n    \"status\": \"<string>\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId?projection=ruleInfo&projection=history&projection=stigs&projection=collections",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"reviews",
												":assetId",
												":ruleId"
											],
											"query": [
												{
													"key": "projection",
													"value": "ruleInfo",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "history",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "stigs"
												},
												{
													"key": "projection",
													"value": "collections"
												}
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "{{testCollection}}",
													"type": "string",
													"description": "(Required) A path parameter that indentifies a Collection"
												},
												{
													"key": "assetId",
													"value": "{{assets.queryAsset}}",
													"type": "string",
													"description": "(Required) A path parameter that indentifies an Asset"
												},
												{
													"key": "ruleId",
													"value": "{{reviews.testRule}}",
													"type": "string",
													"description": "(Required) A path parameter that indentifies a Rule"
												}
											]
										},
										"description": "Create a new Review, or update all properties of an existing Review, setting missing properties to null"
									},
									"response": [
										{
											"name": "unexpected error",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"result\": \"<string>\",\n    \"resultComment\": \"<string>\",\n    \"action\": \"<string>\",\n    \"actionComment\": \"<string>\",\n    \"autoResult\": \"<boolean>\",\n    \"status\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId?projection=<string>&projection=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"reviews",
														":assetId",
														":ruleId"
													],
													"query": [
														{
															"key": "projection",
															"value": "<string>"
														},
														{
															"key": "projection",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "collectionId"
														},
														{
															"key": "assetId"
														},
														{
															"key": "ruleId"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
										},
										{
											"name": "ReviewProjected response",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"result\": \"<string>\",\n    \"resultComment\": \"<string>\",\n    \"action\": \"<string>\",\n    \"actionComment\": \"<string>\",\n    \"autoResult\": \"<boolean>\",\n    \"status\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId?projection=<string>&projection=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"reviews",
														":assetId",
														":ruleId"
													],
													"query": [
														{
															"key": "projection",
															"value": "<string>"
														},
														{
															"key": "projection",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "collectionId"
														},
														{
															"key": "assetId"
														},
														{
															"key": "ruleId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"assetId\": \"<string>\",\n \"assetName\": \"<string>\",\n \"ruleId\": \"<string>\",\n \"result\": \"<string>\",\n \"resultComment\": \"<string>\",\n \"autoResult\": \"<boolean>\",\n \"action\": \"<string>\",\n \"actionComment\": \"<string>\",\n \"status\": \"<string>\",\n \"userId\": \"<string>\",\n \"username\": \"<string>\",\n \"ts\": \"<string>\",\n \"rejectText\": \"<string>\",\n \"rejectUserId\": \"<string>\",\n \"history\": [\n  {\n   \"ts\": \"<string>\",\n   \"activityType\": \"<string>\",\n   \"columnName\": \"<string>\",\n   \"oldValue\": \"<string>\",\n   \"newValue\": \"<string>\",\n   \"userId\": \"<string>\",\n   \"username\": \"<string>\"\n  },\n  {\n   \"ts\": \"<string>\",\n   \"activityType\": \"<string>\",\n   \"columnName\": \"<string>\",\n   \"oldValue\": \"<string>\",\n   \"newValue\": \"<string>\",\n   \"userId\": \"<string>\",\n   \"username\": \"<string>\"\n  }\n ],\n \"asset\": {\n  \"assetId\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"stigs\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"rule\": {\n  \"ruleId\": \"<string>\",\n  \"version\": \"<string>\",\n  \"title\": \"<string>\",\n  \"severity\": \"<string>\"\n }\n}"
										}
									]
								},
								{
									"name": "Merge provided properties with a Review",
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"result\": \"fail\",\n    \"resultComment\": \"{{user}} updating this review\",\n    \"action\": null,\n    \"actionComment\": null,\n    \"autoResult\": false,\n    \"status\": \"saved\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId?projection=ruleInfo&projection=history&projection=stigs&projection=collections",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"reviews",
												":assetId",
												":ruleId"
											],
											"query": [
												{
													"key": "projection",
													"value": "ruleInfo",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "history",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "stigs"
												},
												{
													"key": "projection",
													"value": "collections"
												}
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "{{testCollection}}",
													"type": "string",
													"description": "(Required) A path parameter that indentifies a Collection"
												},
												{
													"key": "assetId",
													"value": "{{assets.queryAsset}}",
													"type": "string",
													"description": "(Required) A path parameter that indentifies an Asset"
												},
												{
													"key": "ruleId",
													"value": "{{reviews.testRule}}",
													"type": "string",
													"description": "(Required) A path parameter that indentifies a Rule"
												}
											]
										},
										"description": "Update the given properties of a Review, if it exists"
									},
									"response": [
										{
											"name": "ReviewProjected response",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"result\": \"<string>\",\n    \"resultComment\": \"<string>\",\n    \"action\": \"<string>\",\n    \"actionComment\": \"<string>\",\n    \"autoResult\": \"<boolean>\",\n    \"status\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId?projection=<string>&projection=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"reviews",
														":assetId",
														":ruleId"
													],
													"query": [
														{
															"key": "projection",
															"value": "<string>"
														},
														{
															"key": "projection",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "collectionId"
														},
														{
															"key": "assetId"
														},
														{
															"key": "ruleId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"assetId\": \"<string>\",\n \"assetName\": \"<string>\",\n \"ruleId\": \"<string>\",\n \"result\": \"<string>\",\n \"resultComment\": \"<string>\",\n \"autoResult\": \"<boolean>\",\n \"action\": \"<string>\",\n \"actionComment\": \"<string>\",\n \"status\": \"<string>\",\n \"userId\": \"<string>\",\n \"username\": \"<string>\",\n \"ts\": \"<string>\",\n \"rejectText\": \"<string>\",\n \"rejectUserId\": \"<string>\",\n \"history\": [\n  {\n   \"ts\": \"<string>\",\n   \"activityType\": \"<string>\",\n   \"columnName\": \"<string>\",\n   \"oldValue\": \"<string>\",\n   \"newValue\": \"<string>\",\n   \"userId\": \"<string>\",\n   \"username\": \"<string>\"\n  },\n  {\n   \"ts\": \"<string>\",\n   \"activityType\": \"<string>\",\n   \"columnName\": \"<string>\",\n   \"oldValue\": \"<string>\",\n   \"newValue\": \"<string>\",\n   \"userId\": \"<string>\",\n   \"username\": \"<string>\"\n  }\n ],\n \"asset\": {\n  \"assetId\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"stigs\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"rule\": {\n  \"ruleId\": \"<string>\",\n  \"version\": \"<string>\",\n  \"title\": \"<string>\",\n  \"severity\": \"<string>\"\n }\n}"
										},
										{
											"name": "unexpected error",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"result\": \"<string>\",\n    \"resultComment\": \"<string>\",\n    \"action\": \"<string>\",\n    \"actionComment\": \"<string>\",\n    \"autoResult\": \"<boolean>\",\n    \"status\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId?projection=<string>&projection=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"reviews",
														":assetId",
														":ruleId"
													],
													"query": [
														{
															"key": "projection",
															"value": "<string>"
														},
														{
															"key": "projection",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "collectionId"
														},
														{
															"key": "assetId"
														},
														{
															"key": "ruleId"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
										}
									]
								},
								{
									"name": "Delete a Review",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId?elevate=<boolean>&projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"reviews",
												":assetId",
												":ruleId"
											],
											"query": [
												{
													"key": "elevate",
													"value": "<boolean>",
													"description": "Elevate the user context for this request if user is permitted (canAdmin)"
												},
												{
													"key": "projection",
													"value": "<string>",
													"description": "Additional properties to include in the response.\n"
												},
												{
													"key": "projection",
													"value": "<string>",
													"description": "Additional properties to include in the response.\n"
												}
											],
											"variable": [
												{
													"id": "a3b92d2d-3902-4525-aed4-d5712ff32dcb",
													"key": "collectionId",
													"value": "<string>",
													"type": "string",
													"description": "(Required) A path parameter that indentifies a Collection"
												},
												{
													"id": "b1d773f1-bb01-442c-bc07-303d8ed0c3aa",
													"key": "assetId",
													"value": "<string>",
													"type": "string",
													"description": "(Required) A path parameter that indentifies an Asset"
												},
												{
													"id": "e7c8c1b2-4f25-4f1d-a278-16b7a64f3ba1",
													"key": "ruleId",
													"value": "<string>",
													"type": "string",
													"description": "(Required) A path parameter that indentifies a Rule"
												}
											]
										}
									},
									"response": [
										{
											"name": "unexpected error",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId?elevate=<boolean>&projection=<string>&projection=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"reviews",
														":assetId",
														":ruleId"
													],
													"query": [
														{
															"key": "elevate",
															"value": "<boolean>"
														},
														{
															"key": "projection",
															"value": "<string>"
														},
														{
															"key": "projection",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "collectionId"
														},
														{
															"key": "assetId"
														},
														{
															"key": "ruleId"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
										},
										{
											"name": "ReviewProjected response",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId?elevate=<boolean>&projection=<string>&projection=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"reviews",
														":assetId",
														":ruleId"
													],
													"query": [
														{
															"key": "elevate",
															"value": "<boolean>"
														},
														{
															"key": "projection",
															"value": "<string>"
														},
														{
															"key": "projection",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "collectionId"
														},
														{
															"key": "assetId"
														},
														{
															"key": "ruleId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"assetId\": \"<string>\",\n \"assetName\": \"<string>\",\n \"ruleId\": \"<string>\",\n \"result\": \"<string>\",\n \"resultComment\": \"<string>\",\n \"autoResult\": \"<boolean>\",\n \"action\": \"<string>\",\n \"actionComment\": \"<string>\",\n \"status\": \"<string>\",\n \"userId\": \"<string>\",\n \"username\": \"<string>\",\n \"ts\": \"<string>\",\n \"rejectText\": \"<string>\",\n \"rejectUserId\": \"<string>\",\n \"history\": [\n  {\n   \"ts\": \"<string>\",\n   \"activityType\": \"<string>\",\n   \"columnName\": \"<string>\",\n   \"oldValue\": \"<string>\",\n   \"newValue\": \"<string>\",\n   \"userId\": \"<string>\",\n   \"username\": \"<string>\"\n  },\n  {\n   \"ts\": \"<string>\",\n   \"activityType\": \"<string>\",\n   \"columnName\": \"<string>\",\n   \"oldValue\": \"<string>\",\n   \"newValue\": \"<string>\",\n   \"userId\": \"<string>\",\n   \"username\": \"<string>\"\n  }\n ],\n \"asset\": {\n  \"assetId\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"stigs\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"rule\": {\n  \"ruleId\": \"<string>\",\n  \"version\": \"<string>\",\n  \"title\": \"<string>\",\n  \"severity\": \"<string>\"\n }\n}"
										}
									]
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Return a list of Reviews for an Asset",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8b3bac8f-ce4f-4e26-a20b-ae8655a05219",
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"if (user == \"wf10\") {\r",
											"    pm.test(\"Status should be is 403 for user wf10\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId?projection=rule&projection=stigs&projection=asset",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":collectionId",
										"reviews",
										":assetId"
									],
									"query": [
										{
											"key": "projection",
											"value": "rule",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "stigs",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "result",
											"value": "<string>",
											"disabled": true
										},
										{
											"key": "action",
											"value": "<string>",
											"disabled": true
										},
										{
											"key": "status",
											"value": "<string>",
											"disabled": true
										},
										{
											"key": "benchmarkId",
											"value": "<string>",
											"description": "A query parameter that indentifies a STIG",
											"disabled": true
										},
										{
											"key": "revisionStr",
											"value": "<string>",
											"description": "Selects Reviews mapped to a Revision [ V{version_num}R{release_num} | 'latest' ]; requires benchmarkId",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "asset"
										}
									],
									"variable": [
										{
											"key": "collectionId",
											"value": "{{testCollection}}",
											"type": "string",
											"description": "(Required) A path parameter that indentifies a Collection"
										},
										{
											"key": "assetId",
											"value": "{{assets.queryAsset}}",
											"type": "string",
											"description": "(Required) A path parameter that indentifies an Asset"
										}
									]
								}
							},
							"response": [
								{
									"name": "ReviewProjected response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId?projection=<string>&projection=<string>&result=<string>&action=<string>&status=<string>&benchmarkId=<string>&revisionStr=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"reviews",
												":assetId"
											],
											"query": [
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "result",
													"value": "<string>"
												},
												{
													"key": "action",
													"value": "<string>"
												},
												{
													"key": "status",
													"value": "<string>"
												},
												{
													"key": "benchmarkId",
													"value": "<string>"
												},
												{
													"key": "revisionStr",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "collectionId"
												},
												{
													"key": "assetId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n {\n  \"assetId\": \"<string>\",\n  \"assetName\": \"<string>\",\n  \"ruleId\": \"<string>\",\n  \"result\": \"<string>\",\n  \"resultComment\": \"<string>\",\n  \"autoResult\": \"<boolean>\",\n  \"action\": \"<string>\",\n  \"actionComment\": \"<string>\",\n  \"status\": \"<string>\",\n  \"userId\": \"<string>\",\n  \"username\": \"<string>\",\n  \"ts\": \"<string>\",\n  \"rejectText\": \"<string>\",\n  \"rejectUserId\": \"<string>\",\n  \"asset\": {\n   \"assetId\": \"<string>\",\n   \"name\": \"<string>\"\n  },\n  \"stigs\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"rule\": {\n   \"ruleId\": \"<string>\",\n   \"version\": \"<string>\",\n   \"title\": \"<string>\",\n   \"severity\": \"<string>\"\n  }\n },\n {\n  \"assetId\": \"<string>\",\n  \"assetName\": \"<string>\",\n  \"ruleId\": \"<string>\",\n  \"result\": \"<string>\",\n  \"resultComment\": \"<string>\",\n  \"autoResult\": \"<boolean>\",\n  \"action\": \"<string>\",\n  \"actionComment\": \"<string>\",\n  \"status\": \"<string>\",\n  \"userId\": \"<string>\",\n  \"username\": \"<string>\",\n  \"ts\": \"<string>\",\n  \"rejectText\": \"<string>\",\n  \"rejectUserId\": \"<string>\",\n  \"asset\": {\n   \"assetId\": \"<string>\",\n   \"name\": \"<string>\"\n  },\n  \"stigs\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"rule\": {\n   \"ruleId\": \"<string>\",\n   \"version\": \"<string>\",\n   \"title\": \"<string>\",\n   \"severity\": \"<string>\"\n  }\n }\n]"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId?projection=<string>&projection=<string>&result=<string>&action=<string>&status=<string>&benchmarkId=<string>&revisionStr=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"reviews",
												":assetId"
											],
											"query": [
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "result",
													"value": "<string>"
												},
												{
													"key": "action",
													"value": "<string>"
												},
												{
													"key": "status",
													"value": "<string>"
												},
												{
													"key": "benchmarkId",
													"value": "<string>"
												},
												{
													"key": "revisionStr",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "collectionId"
												},
												{
													"key": "assetId"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Import one or more Reviews from a JSON body, a STIGViewer CKL file, or an SCC XCCDF file",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "importFile",
											"value": "<binary>",
											"description": "Extension .ckl from STIGVewer or .xml from SCAP Compliance Checker (SCC)"
										},
										{
											"key": "strictAssetCheck",
											"value": "",
											"description": "Whether file contents will be checked for asset name match"
										},
										{
											"key": "benchmarkId",
											"value": "<string>",
											"description": "If provided, file contents will be checked for match"
										}
									],
									"options": {
										"formdata": {}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":collectionId",
										"reviews",
										":assetId"
									],
									"variable": [
										{
											"id": "7141a9e4-4e76-4131-8426-0aa64be5e86b",
											"key": "collectionId",
											"value": "<string>",
											"type": "string",
											"description": "(Required) A path parameter that indentifies a Collection"
										},
										{
											"id": "dac3b713-5531-4a79-86c1-76768edb396a",
											"key": "assetId",
											"value": "<string>",
											"type": "string",
											"description": "(Required) A path parameter that indentifies an Asset"
										}
									]
								}
							},
							"response": [
								{
									"name": "ReviewProjected response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "importFile",
													"value": "<binary>",
													"description": {
														"content": "Extension .ckl from STIGVewer or .xml from SCAP Compliance Checker (SCC)",
														"type": "text/plain"
													}
												},
												{
													"key": "strictAssetCheck",
													"value": "",
													"description": {
														"content": "Whether file contents will be checked for asset name match",
														"type": "text/plain"
													}
												},
												{
													"key": "benchmarkId",
													"value": "<string>",
													"description": {
														"content": "If provided, file contents will be checked for match",
														"type": "text/plain"
													}
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"reviews",
												":assetId"
											],
											"variable": [
												{
													"key": "collectionId"
												},
												{
													"key": "assetId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"assetId\": \"<string>\",\n \"assetName\": \"<string>\",\n \"ruleId\": \"<string>\",\n \"result\": \"<string>\",\n \"resultComment\": \"<string>\",\n \"autoResult\": \"<boolean>\",\n \"action\": \"<string>\",\n \"actionComment\": \"<string>\",\n \"status\": \"<string>\",\n \"userId\": \"<string>\",\n \"username\": \"<string>\",\n \"ts\": \"<string>\",\n \"rejectText\": \"<string>\",\n \"rejectUserId\": \"<string>\",\n \"asset\": {\n  \"assetId\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"stigs\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"rule\": {\n  \"ruleId\": \"<string>\",\n  \"version\": \"<string>\",\n  \"title\": \"<string>\",\n  \"severity\": \"<string>\"\n }\n}"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "importFile",
													"value": "<binary>",
													"description": {
														"content": "Extension .ckl from STIGVewer or .xml from SCAP Compliance Checker (SCC)",
														"type": "text/plain"
													}
												},
												{
													"key": "strictAssetCheck",
													"value": "",
													"description": {
														"content": "Whether file contents will be checked for asset name match",
														"type": "text/plain"
													}
												},
												{
													"key": "benchmarkId",
													"value": "<string>",
													"description": {
														"content": "If provided, file contents will be checked for match",
														"type": "text/plain"
													}
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"reviews",
												":assetId"
											],
											"variable": [
												{
													"key": "collectionId"
												},
												{
													"key": "assetId"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Optional params, invalid requests and edge cases",
					"item": [
						{
							"name": "Fetch a rule authored by user, but that they no longer have grants to request",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId?projection=ruleInfo&projection=history&projection=stigs&projection=collections",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":collectionId",
										"reviews",
										":assetId",
										":ruleId"
									],
									"query": [
										{
											"key": "projection",
											"value": "ruleInfo",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "history",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "stigs"
										},
										{
											"key": "projection",
											"value": "collections"
										}
									],
									"variable": [
										{
											"description": "(Required) A path parameter that indentifies a Collection",
											"key": "collectionId",
											"type": "string",
											"value": "{{testCollection}}"
										},
										{
											"description": "(Required) A path parameter that indentifies an Asset",
											"key": "assetId",
											"type": "string",
											"value": "{{assets.queryAsset}}"
										},
										{
											"description": "(Required) A path parameter that indentifies a Rule",
											"key": "ruleId",
											"type": "string",
											"value": "SV-69023r1_rule"
										}
									]
								}
							},
							"response": [
								{
									"name": "ReviewProjected response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId?projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"reviews",
												":assetId",
												":ruleId"
											],
											"query": [
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "collectionId"
												},
												{
													"key": "assetId"
												},
												{
													"key": "ruleId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"assetId\": \"<string>\",\n \"assetName\": \"<string>\",\n \"ruleId\": \"<string>\",\n \"result\": \"<string>\",\n \"resultComment\": \"<string>\",\n \"autoResult\": \"<boolean>\",\n \"action\": \"<string>\",\n \"actionComment\": \"<string>\",\n \"status\": \"<string>\",\n \"userId\": \"<string>\",\n \"username\": \"<string>\",\n \"ts\": \"<string>\",\n \"rejectText\": \"<string>\",\n \"rejectUserId\": \"<string>\",\n \"history\": [\n  {\n   \"ts\": \"<string>\",\n   \"activityType\": \"<string>\",\n   \"columnName\": \"<string>\",\n   \"oldValue\": \"<string>\",\n   \"newValue\": \"<string>\",\n   \"userId\": \"<string>\",\n   \"username\": \"<string>\"\n  },\n  {\n   \"ts\": \"<string>\",\n   \"activityType\": \"<string>\",\n   \"columnName\": \"<string>\",\n   \"oldValue\": \"<string>\",\n   \"newValue\": \"<string>\",\n   \"userId\": \"<string>\",\n   \"username\": \"<string>\"\n  }\n ],\n \"asset\": {\n  \"assetId\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"stigs\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"rule\": {\n  \"ruleId\": \"<string>\",\n  \"version\": \"<string>\",\n  \"title\": \"<string>\",\n  \"severity\": \"<string>\"\n }\n}"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId?projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"reviews",
												":assetId",
												":ruleId"
											],
											"query": [
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "collectionId"
												},
												{
													"key": "assetId"
												},
												{
													"key": "ruleId"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "patch non-existent review",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"result\": \"fail\",\n    \"resultComment\": \"{{user}} updating this review\",\n    \"action\": null,\n    \"actionComment\": null,\n    \"autoResult\": false,\n    \"status\": \"saved\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId?projection=ruleInfo&projection=history&projection=stigs&projection=collections",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":collectionId",
										"reviews",
										":assetId",
										":ruleId"
									],
									"query": [
										{
											"key": "projection",
											"value": "ruleInfo",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "history",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "stigs"
										},
										{
											"key": "projection",
											"value": "collections"
										}
									],
									"variable": [
										{
											"description": "(Required) A path parameter that indentifies a Collection",
											"key": "collectionId",
											"type": "string",
											"value": "{{testCollection}}"
										},
										{
											"description": "(Required) A path parameter that indentifies an Asset",
											"key": "assetId",
											"type": "string",
											"value": "{{assets.queryAsset}}"
										},
										{
											"description": "(Required) A path parameter that indentifies a Rule",
											"key": "ruleId",
											"type": "string",
											"value": "SV-69073r1_rule"
										}
									]
								},
								"description": "Update the given properties of a Review, if it exists"
							},
							"response": [
								{
									"name": "ReviewProjected response",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"result\": \"<string>\",\n    \"resultComment\": \"<string>\",\n    \"action\": \"<string>\",\n    \"actionComment\": \"<string>\",\n    \"autoResult\": \"<boolean>\",\n    \"status\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId?projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"reviews",
												":assetId",
												":ruleId"
											],
											"query": [
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "collectionId"
												},
												{
													"key": "assetId"
												},
												{
													"key": "ruleId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"assetId\": \"<string>\",\n \"assetName\": \"<string>\",\n \"ruleId\": \"<string>\",\n \"result\": \"<string>\",\n \"resultComment\": \"<string>\",\n \"autoResult\": \"<boolean>\",\n \"action\": \"<string>\",\n \"actionComment\": \"<string>\",\n \"status\": \"<string>\",\n \"userId\": \"<string>\",\n \"username\": \"<string>\",\n \"ts\": \"<string>\",\n \"rejectText\": \"<string>\",\n \"rejectUserId\": \"<string>\",\n \"history\": [\n  {\n   \"ts\": \"<string>\",\n   \"activityType\": \"<string>\",\n   \"columnName\": \"<string>\",\n   \"oldValue\": \"<string>\",\n   \"newValue\": \"<string>\",\n   \"userId\": \"<string>\",\n   \"username\": \"<string>\"\n  },\n  {\n   \"ts\": \"<string>\",\n   \"activityType\": \"<string>\",\n   \"columnName\": \"<string>\",\n   \"oldValue\": \"<string>\",\n   \"newValue\": \"<string>\",\n   \"userId\": \"<string>\",\n   \"username\": \"<string>\"\n  }\n ],\n \"asset\": {\n  \"assetId\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"stigs\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"rule\": {\n  \"ruleId\": \"<string>\",\n  \"version\": \"<string>\",\n  \"title\": \"<string>\",\n  \"severity\": \"<string>\"\n }\n}"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"result\": \"<string>\",\n    \"resultComment\": \"<string>\",\n    \"action\": \"<string>\",\n    \"actionComment\": \"<string>\",\n    \"autoResult\": \"<boolean>\",\n    \"status\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/reviews/:assetId/:ruleId?projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"reviews",
												":assetId",
												":ruleId"
											],
											"query": [
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "collectionId"
												},
												{
													"key": "assetId"
												},
												{
													"key": "ruleId"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "get by collectionId Paramater iterations",
					"item": [
						{
							"name": "Reviews accessible to the requester, projections only",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8acaa590-07fb-4620-848d-6f70bbd07e68",
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"if (user == \"wf10\") {\r",
											"    pm.test(\"Status should be is 403 for user wf10\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"}\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/collections/:collectionId/reviews?projection=rule&projection=stigs&projection=asset",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":collectionId",
										"reviews"
									],
									"query": [
										{
											"key": "result",
											"value": "<string>",
											"disabled": true
										},
										{
											"key": "action",
											"value": "<string>",
											"disabled": true
										},
										{
											"key": "status",
											"value": "<string>",
											"disabled": true
										},
										{
											"key": "ruleId",
											"value": "<string>",
											"description": "Selects Reviews of a Rule",
											"disabled": true
										},
										{
											"key": "userId",
											"value": "<string>",
											"description": "A path parameter that indentifies a User",
											"disabled": true
										},
										{
											"key": "assetId",
											"value": "<string>",
											"description": "A query parameter that indentifies an Asset",
											"disabled": true
										},
										{
											"key": "benchmarkId",
											"value": "<string>",
											"description": "A query parameter that indentifies a STIG",
											"disabled": true
										},
										{
											"key": "revisionStr",
											"value": "<string>",
											"description": "Selects Reviews mapped to a Revision [ V{version_num}R{release_num} | 'latest' ]; requires benchmarkId",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "rule",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "stigs",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "asset"
										}
									],
									"variable": [
										{
											"key": "collectionId",
											"value": "{{testCollection}}",
											"type": "string",
											"description": "(Required) A path parameter that indentifies a Collection"
										}
									]
								}
							},
							"response": [
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/reviews?result=<string>&action=<string>&status=<string>&ruleId=<string>&userId=<string>&assetId=<string>&benchmarkId=<string>&revisionStr=<string>&projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"reviews"
											],
											"query": [
												{
													"key": "result",
													"value": "<string>"
												},
												{
													"key": "action",
													"value": "<string>"
												},
												{
													"key": "status",
													"value": "<string>"
												},
												{
													"key": "ruleId",
													"value": "<string>"
												},
												{
													"key": "userId",
													"value": "<string>"
												},
												{
													"key": "assetId",
													"value": "<string>"
												},
												{
													"key": "benchmarkId",
													"value": "<string>"
												},
												{
													"key": "revisionStr",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "collectionId"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
								},
								{
									"name": "ReviewProjected response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/reviews?result=<string>&action=<string>&status=<string>&ruleId=<string>&userId=<string>&assetId=<string>&benchmarkId=<string>&revisionStr=<string>&projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"reviews"
											],
											"query": [
												{
													"key": "result",
													"value": "<string>"
												},
												{
													"key": "action",
													"value": "<string>"
												},
												{
													"key": "status",
													"value": "<string>"
												},
												{
													"key": "ruleId",
													"value": "<string>"
												},
												{
													"key": "userId",
													"value": "<string>"
												},
												{
													"key": "assetId",
													"value": "<string>"
												},
												{
													"key": "benchmarkId",
													"value": "<string>"
												},
												{
													"key": "revisionStr",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "collectionId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n {\n  \"assetId\": \"<string>\",\n  \"assetName\": \"<string>\",\n  \"ruleId\": \"<string>\",\n  \"result\": \"<string>\",\n  \"resultComment\": \"<string>\",\n  \"autoResult\": \"<boolean>\",\n  \"action\": \"<string>\",\n  \"actionComment\": \"<string>\",\n  \"status\": \"<string>\",\n  \"userId\": \"<string>\",\n  \"username\": \"<string>\",\n  \"ts\": \"<string>\",\n  \"rejectText\": \"<string>\",\n  \"rejectUserId\": \"<string>\",\n  \"asset\": {\n   \"assetId\": \"<string>\",\n   \"name\": \"<string>\"\n  },\n  \"stigs\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"rule\": {\n   \"ruleId\": \"<string>\",\n   \"version\": \"<string>\",\n   \"title\": \"<string>\",\n   \"severity\": \"<string>\"\n  }\n },\n {\n  \"assetId\": \"<string>\",\n  \"assetName\": \"<string>\",\n  \"ruleId\": \"<string>\",\n  \"result\": \"<string>\",\n  \"resultComment\": \"<string>\",\n  \"autoResult\": \"<boolean>\",\n  \"action\": \"<string>\",\n  \"actionComment\": \"<string>\",\n  \"status\": \"<string>\",\n  \"userId\": \"<string>\",\n  \"username\": \"<string>\",\n  \"ts\": \"<string>\",\n  \"rejectText\": \"<string>\",\n  \"rejectUserId\": \"<string>\",\n  \"asset\": {\n   \"assetId\": \"<string>\",\n   \"name\": \"<string>\"\n  },\n  \"stigs\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"rule\": {\n   \"ruleId\": \"<string>\",\n   \"version\": \"<string>\",\n   \"title\": \"<string>\",\n   \"severity\": \"<string>\"\n  }\n }\n]"
								}
							]
						},
						{
							"name": "Reviews accessible to the requester, result param",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5a0f5b56-0b4d-4228-962f-330d5bacbbfd",
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"if (user == \"wf10\") {\r",
											"    pm.test(\"Status should be is 403 for user wf10\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"}\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/result=pass/)) {\r",
											"    user = \"elevated\";\r",
											"}\r",
											"\r",
											"\r",
											"//break out asset ids, check against user valid set"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/collections/:collectionId/reviews?result=pass&projection=rule&projection=stigs&projection=asset",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":collectionId",
										"reviews"
									],
									"query": [
										{
											"key": "result",
											"value": "pass"
										},
										{
											"key": "action",
											"value": "<string>",
											"disabled": true
										},
										{
											"key": "status",
											"value": "<string>",
											"disabled": true
										},
										{
											"key": "ruleId",
											"value": "<string>",
											"description": "Selects Reviews of a Rule",
											"disabled": true
										},
										{
											"key": "userId",
											"value": "<string>",
											"description": "A path parameter that indentifies a User",
											"disabled": true
										},
										{
											"key": "assetId",
											"value": "<string>",
											"description": "A query parameter that indentifies an Asset",
											"disabled": true
										},
										{
											"key": "benchmarkId",
											"value": "<string>",
											"description": "A query parameter that indentifies a STIG",
											"disabled": true
										},
										{
											"key": "revisionStr",
											"value": "<string>",
											"description": "Selects Reviews mapped to a Revision [ V{version_num}R{release_num} | 'latest' ]; requires benchmarkId",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "rule",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "stigs",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "asset"
										}
									],
									"variable": [
										{
											"key": "collectionId",
											"value": "{{testCollection}}",
											"type": "string",
											"description": "(Required) A path parameter that indentifies a Collection"
										}
									]
								}
							},
							"response": [
								{
									"name": "ReviewProjected response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/reviews?result=<string>&action=<string>&status=<string>&ruleId=<string>&userId=<string>&assetId=<string>&benchmarkId=<string>&revisionStr=<string>&projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"reviews"
											],
											"query": [
												{
													"key": "result",
													"value": "<string>"
												},
												{
													"key": "action",
													"value": "<string>"
												},
												{
													"key": "status",
													"value": "<string>"
												},
												{
													"key": "ruleId",
													"value": "<string>"
												},
												{
													"key": "userId",
													"value": "<string>"
												},
												{
													"key": "assetId",
													"value": "<string>"
												},
												{
													"key": "benchmarkId",
													"value": "<string>"
												},
												{
													"key": "revisionStr",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "collectionId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n {\n  \"assetId\": \"<string>\",\n  \"assetName\": \"<string>\",\n  \"ruleId\": \"<string>\",\n  \"result\": \"<string>\",\n  \"resultComment\": \"<string>\",\n  \"autoResult\": \"<boolean>\",\n  \"action\": \"<string>\",\n  \"actionComment\": \"<string>\",\n  \"status\": \"<string>\",\n  \"userId\": \"<string>\",\n  \"username\": \"<string>\",\n  \"ts\": \"<string>\",\n  \"rejectText\": \"<string>\",\n  \"rejectUserId\": \"<string>\",\n  \"asset\": {\n   \"assetId\": \"<string>\",\n   \"name\": \"<string>\"\n  },\n  \"stigs\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"rule\": {\n   \"ruleId\": \"<string>\",\n   \"version\": \"<string>\",\n   \"title\": \"<string>\",\n   \"severity\": \"<string>\"\n  }\n },\n {\n  \"assetId\": \"<string>\",\n  \"assetName\": \"<string>\",\n  \"ruleId\": \"<string>\",\n  \"result\": \"<string>\",\n  \"resultComment\": \"<string>\",\n  \"autoResult\": \"<boolean>\",\n  \"action\": \"<string>\",\n  \"actionComment\": \"<string>\",\n  \"status\": \"<string>\",\n  \"userId\": \"<string>\",\n  \"username\": \"<string>\",\n  \"ts\": \"<string>\",\n  \"rejectText\": \"<string>\",\n  \"rejectUserId\": \"<string>\",\n  \"asset\": {\n   \"assetId\": \"<string>\",\n   \"name\": \"<string>\"\n  },\n  \"stigs\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"rule\": {\n   \"ruleId\": \"<string>\",\n   \"version\": \"<string>\",\n   \"title\": \"<string>\",\n   \"severity\": \"<string>\"\n  }\n }\n]"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/reviews?result=<string>&action=<string>&status=<string>&ruleId=<string>&userId=<string>&assetId=<string>&benchmarkId=<string>&revisionStr=<string>&projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"reviews"
											],
											"query": [
												{
													"key": "result",
													"value": "<string>"
												},
												{
													"key": "action",
													"value": "<string>"
												},
												{
													"key": "status",
													"value": "<string>"
												},
												{
													"key": "ruleId",
													"value": "<string>"
												},
												{
													"key": "userId",
													"value": "<string>"
												},
												{
													"key": "assetId",
													"value": "<string>"
												},
												{
													"key": "benchmarkId",
													"value": "<string>"
												},
												{
													"key": "revisionStr",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "collectionId"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Reviews accessible to the requester, action param",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "083b1ce3-8a50-441a-ac5a-d7d3ce668166",
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"if (user == \"wf10\") {\r",
											"    pm.test(\"Status should be is 403 for user wf10\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"}\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/result=pass/)) {\r",
											"    user = \"elevated\";\r",
											"}\r",
											"\r",
											"\r",
											"//break out asset ids, check against user valid set"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/collections/:collectionId/reviews?action=remediate&projection=rule&projection=stigs&projection=asset",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":collectionId",
										"reviews"
									],
									"query": [
										{
											"key": "result",
											"value": "pass",
											"disabled": true
										},
										{
											"key": "action",
											"value": "remediate"
										},
										{
											"key": "status",
											"value": "<string>",
											"disabled": true
										},
										{
											"key": "ruleId",
											"value": "<string>",
											"description": "Selects Reviews of a Rule",
											"disabled": true
										},
										{
											"key": "userId",
											"value": "<string>",
											"description": "A path parameter that indentifies a User",
											"disabled": true
										},
										{
											"key": "assetId",
											"value": "<string>",
											"description": "A query parameter that indentifies an Asset",
											"disabled": true
										},
										{
											"key": "benchmarkId",
											"value": "<string>",
											"description": "A query parameter that indentifies a STIG",
											"disabled": true
										},
										{
											"key": "revisionStr",
											"value": "<string>",
											"description": "Selects Reviews mapped to a Revision [ V{version_num}R{release_num} | 'latest' ]; requires benchmarkId",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "rule",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "stigs",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "asset"
										}
									],
									"variable": [
										{
											"key": "collectionId",
											"value": "{{testCollection}}",
											"type": "string",
											"description": "(Required) A path parameter that indentifies a Collection"
										}
									]
								}
							},
							"response": [
								{
									"name": "ReviewProjected response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/reviews?result=<string>&action=<string>&status=<string>&ruleId=<string>&userId=<string>&assetId=<string>&benchmarkId=<string>&revisionStr=<string>&projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"reviews"
											],
											"query": [
												{
													"key": "result",
													"value": "<string>"
												},
												{
													"key": "action",
													"value": "<string>"
												},
												{
													"key": "status",
													"value": "<string>"
												},
												{
													"key": "ruleId",
													"value": "<string>"
												},
												{
													"key": "userId",
													"value": "<string>"
												},
												{
													"key": "assetId",
													"value": "<string>"
												},
												{
													"key": "benchmarkId",
													"value": "<string>"
												},
												{
													"key": "revisionStr",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "collectionId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n {\n  \"assetId\": \"<string>\",\n  \"assetName\": \"<string>\",\n  \"ruleId\": \"<string>\",\n  \"result\": \"<string>\",\n  \"resultComment\": \"<string>\",\n  \"autoResult\": \"<boolean>\",\n  \"action\": \"<string>\",\n  \"actionComment\": \"<string>\",\n  \"status\": \"<string>\",\n  \"userId\": \"<string>\",\n  \"username\": \"<string>\",\n  \"ts\": \"<string>\",\n  \"rejectText\": \"<string>\",\n  \"rejectUserId\": \"<string>\",\n  \"asset\": {\n   \"assetId\": \"<string>\",\n   \"name\": \"<string>\"\n  },\n  \"stigs\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"rule\": {\n   \"ruleId\": \"<string>\",\n   \"version\": \"<string>\",\n   \"title\": \"<string>\",\n   \"severity\": \"<string>\"\n  }\n },\n {\n  \"assetId\": \"<string>\",\n  \"assetName\": \"<string>\",\n  \"ruleId\": \"<string>\",\n  \"result\": \"<string>\",\n  \"resultComment\": \"<string>\",\n  \"autoResult\": \"<boolean>\",\n  \"action\": \"<string>\",\n  \"actionComment\": \"<string>\",\n  \"status\": \"<string>\",\n  \"userId\": \"<string>\",\n  \"username\": \"<string>\",\n  \"ts\": \"<string>\",\n  \"rejectText\": \"<string>\",\n  \"rejectUserId\": \"<string>\",\n  \"asset\": {\n   \"assetId\": \"<string>\",\n   \"name\": \"<string>\"\n  },\n  \"stigs\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"rule\": {\n   \"ruleId\": \"<string>\",\n   \"version\": \"<string>\",\n   \"title\": \"<string>\",\n   \"severity\": \"<string>\"\n  }\n }\n]"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/reviews?result=<string>&action=<string>&status=<string>&ruleId=<string>&userId=<string>&assetId=<string>&benchmarkId=<string>&revisionStr=<string>&projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"reviews"
											],
											"query": [
												{
													"key": "result",
													"value": "<string>"
												},
												{
													"key": "action",
													"value": "<string>"
												},
												{
													"key": "status",
													"value": "<string>"
												},
												{
													"key": "ruleId",
													"value": "<string>"
												},
												{
													"key": "userId",
													"value": "<string>"
												},
												{
													"key": "assetId",
													"value": "<string>"
												},
												{
													"key": "benchmarkId",
													"value": "<string>"
												},
												{
													"key": "revisionStr",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "collectionId"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Reviews accessible to the requester, status param",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "46118988-2e66-40f4-9259-1b192acf4bb5",
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"if (user == \"wf10\") {\r",
											"    pm.test(\"Status should be is 403 for user wf10\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"}\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/result=pass/)) {\r",
											"    user = \"elevated\";\r",
											"}\r",
											"\r",
											"\r",
											"//break out asset ids, check against user valid set"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/collections/:collectionId/reviews?status=saved&projection=rule&projection=stigs&projection=asset",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":collectionId",
										"reviews"
									],
									"query": [
										{
											"key": "result",
											"value": "pass",
											"disabled": true
										},
										{
											"key": "action",
											"value": "remediate",
											"disabled": true
										},
										{
											"key": "status",
											"value": "saved"
										},
										{
											"key": "ruleId",
											"value": "<string>",
											"description": "Selects Reviews of a Rule",
											"disabled": true
										},
										{
											"key": "userId",
											"value": "<string>",
											"description": "A path parameter that indentifies a User",
											"disabled": true
										},
										{
											"key": "assetId",
											"value": "<string>",
											"description": "A query parameter that indentifies an Asset",
											"disabled": true
										},
										{
											"key": "benchmarkId",
											"value": "<string>",
											"description": "A query parameter that indentifies a STIG",
											"disabled": true
										},
										{
											"key": "revisionStr",
											"value": "<string>",
											"description": "Selects Reviews mapped to a Revision [ V{version_num}R{release_num} | 'latest' ]; requires benchmarkId",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "rule",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "stigs",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "asset"
										}
									],
									"variable": [
										{
											"key": "collectionId",
											"value": "{{testCollection}}",
											"type": "string",
											"description": "(Required) A path parameter that indentifies a Collection"
										}
									]
								}
							},
							"response": [
								{
									"name": "ReviewProjected response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/reviews?result=<string>&action=<string>&status=<string>&ruleId=<string>&userId=<string>&assetId=<string>&benchmarkId=<string>&revisionStr=<string>&projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"reviews"
											],
											"query": [
												{
													"key": "result",
													"value": "<string>"
												},
												{
													"key": "action",
													"value": "<string>"
												},
												{
													"key": "status",
													"value": "<string>"
												},
												{
													"key": "ruleId",
													"value": "<string>"
												},
												{
													"key": "userId",
													"value": "<string>"
												},
												{
													"key": "assetId",
													"value": "<string>"
												},
												{
													"key": "benchmarkId",
													"value": "<string>"
												},
												{
													"key": "revisionStr",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "collectionId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n {\n  \"assetId\": \"<string>\",\n  \"assetName\": \"<string>\",\n  \"ruleId\": \"<string>\",\n  \"result\": \"<string>\",\n  \"resultComment\": \"<string>\",\n  \"autoResult\": \"<boolean>\",\n  \"action\": \"<string>\",\n  \"actionComment\": \"<string>\",\n  \"status\": \"<string>\",\n  \"userId\": \"<string>\",\n  \"username\": \"<string>\",\n  \"ts\": \"<string>\",\n  \"rejectText\": \"<string>\",\n  \"rejectUserId\": \"<string>\",\n  \"asset\": {\n   \"assetId\": \"<string>\",\n   \"name\": \"<string>\"\n  },\n  \"stigs\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"rule\": {\n   \"ruleId\": \"<string>\",\n   \"version\": \"<string>\",\n   \"title\": \"<string>\",\n   \"severity\": \"<string>\"\n  }\n },\n {\n  \"assetId\": \"<string>\",\n  \"assetName\": \"<string>\",\n  \"ruleId\": \"<string>\",\n  \"result\": \"<string>\",\n  \"resultComment\": \"<string>\",\n  \"autoResult\": \"<boolean>\",\n  \"action\": \"<string>\",\n  \"actionComment\": \"<string>\",\n  \"status\": \"<string>\",\n  \"userId\": \"<string>\",\n  \"username\": \"<string>\",\n  \"ts\": \"<string>\",\n  \"rejectText\": \"<string>\",\n  \"rejectUserId\": \"<string>\",\n  \"asset\": {\n   \"assetId\": \"<string>\",\n   \"name\": \"<string>\"\n  },\n  \"stigs\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"rule\": {\n   \"ruleId\": \"<string>\",\n   \"version\": \"<string>\",\n   \"title\": \"<string>\",\n   \"severity\": \"<string>\"\n  }\n }\n]"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/reviews?result=<string>&action=<string>&status=<string>&ruleId=<string>&userId=<string>&assetId=<string>&benchmarkId=<string>&revisionStr=<string>&projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"reviews"
											],
											"query": [
												{
													"key": "result",
													"value": "<string>"
												},
												{
													"key": "action",
													"value": "<string>"
												},
												{
													"key": "status",
													"value": "<string>"
												},
												{
													"key": "ruleId",
													"value": "<string>"
												},
												{
													"key": "userId",
													"value": "<string>"
												},
												{
													"key": "assetId",
													"value": "<string>"
												},
												{
													"key": "benchmarkId",
													"value": "<string>"
												},
												{
													"key": "revisionStr",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "collectionId"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Reviews accessible to the requester, ruleId param",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a6f24287-f0d3-4d1b-9954-6201ebcba08f",
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"if (user == \"wf10\") {\r",
											"    pm.test(\"Status should be is 403 for user wf10\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"}\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/result=pass/)) {\r",
											"    user = \"elevated\";\r",
											"}\r",
											"\r",
											"\r",
											"//break out asset ids, check against user valid set"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/collections/:collectionId/reviews?ruleId={{reviews.testRule}}&projection=rule&projection=stigs&projection=asset",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":collectionId",
										"reviews"
									],
									"query": [
										{
											"key": "result",
											"value": "pass",
											"disabled": true
										},
										{
											"key": "action",
											"value": "remediate",
											"disabled": true
										},
										{
											"key": "status",
											"value": "saved",
											"disabled": true
										},
										{
											"key": "ruleId",
											"value": "{{reviews.testRule}}",
											"description": "Selects Reviews of a Rule"
										},
										{
											"key": "userId",
											"value": "<string>",
											"description": "A path parameter that indentifies a User",
											"disabled": true
										},
										{
											"key": "assetId",
											"value": "<string>",
											"description": "A query parameter that indentifies an Asset",
											"disabled": true
										},
										{
											"key": "benchmarkId",
											"value": "<string>",
											"description": "A query parameter that indentifies a STIG",
											"disabled": true
										},
										{
											"key": "revisionStr",
											"value": "<string>",
											"description": "Selects Reviews mapped to a Revision [ V{version_num}R{release_num} | 'latest' ]; requires benchmarkId",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "rule",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "stigs",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "asset"
										}
									],
									"variable": [
										{
											"key": "collectionId",
											"value": "{{testCollection}}",
											"type": "string",
											"description": "(Required) A path parameter that indentifies a Collection"
										}
									]
								}
							},
							"response": [
								{
									"name": "ReviewProjected response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/reviews?result=<string>&action=<string>&status=<string>&ruleId=<string>&userId=<string>&assetId=<string>&benchmarkId=<string>&revisionStr=<string>&projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"reviews"
											],
											"query": [
												{
													"key": "result",
													"value": "<string>"
												},
												{
													"key": "action",
													"value": "<string>"
												},
												{
													"key": "status",
													"value": "<string>"
												},
												{
													"key": "ruleId",
													"value": "<string>"
												},
												{
													"key": "userId",
													"value": "<string>"
												},
												{
													"key": "assetId",
													"value": "<string>"
												},
												{
													"key": "benchmarkId",
													"value": "<string>"
												},
												{
													"key": "revisionStr",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "collectionId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n {\n  \"assetId\": \"<string>\",\n  \"assetName\": \"<string>\",\n  \"ruleId\": \"<string>\",\n  \"result\": \"<string>\",\n  \"resultComment\": \"<string>\",\n  \"autoResult\": \"<boolean>\",\n  \"action\": \"<string>\",\n  \"actionComment\": \"<string>\",\n  \"status\": \"<string>\",\n  \"userId\": \"<string>\",\n  \"username\": \"<string>\",\n  \"ts\": \"<string>\",\n  \"rejectText\": \"<string>\",\n  \"rejectUserId\": \"<string>\",\n  \"asset\": {\n   \"assetId\": \"<string>\",\n   \"name\": \"<string>\"\n  },\n  \"stigs\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"rule\": {\n   \"ruleId\": \"<string>\",\n   \"version\": \"<string>\",\n   \"title\": \"<string>\",\n   \"severity\": \"<string>\"\n  }\n },\n {\n  \"assetId\": \"<string>\",\n  \"assetName\": \"<string>\",\n  \"ruleId\": \"<string>\",\n  \"result\": \"<string>\",\n  \"resultComment\": \"<string>\",\n  \"autoResult\": \"<boolean>\",\n  \"action\": \"<string>\",\n  \"actionComment\": \"<string>\",\n  \"status\": \"<string>\",\n  \"userId\": \"<string>\",\n  \"username\": \"<string>\",\n  \"ts\": \"<string>\",\n  \"rejectText\": \"<string>\",\n  \"rejectUserId\": \"<string>\",\n  \"asset\": {\n   \"assetId\": \"<string>\",\n   \"name\": \"<string>\"\n  },\n  \"stigs\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"rule\": {\n   \"ruleId\": \"<string>\",\n   \"version\": \"<string>\",\n   \"title\": \"<string>\",\n   \"severity\": \"<string>\"\n  }\n }\n]"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/reviews?result=<string>&action=<string>&status=<string>&ruleId=<string>&userId=<string>&assetId=<string>&benchmarkId=<string>&revisionStr=<string>&projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"reviews"
											],
											"query": [
												{
													"key": "result",
													"value": "<string>"
												},
												{
													"key": "action",
													"value": "<string>"
												},
												{
													"key": "status",
													"value": "<string>"
												},
												{
													"key": "ruleId",
													"value": "<string>"
												},
												{
													"key": "userId",
													"value": "<string>"
												},
												{
													"key": "assetId",
													"value": "<string>"
												},
												{
													"key": "benchmarkId",
													"value": "<string>"
												},
												{
													"key": "revisionStr",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "collectionId"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Reviews accessible to the requester, userId param",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7aca563f-0f4d-4a89-90b5-0dae6c5892fe",
										"exec": [
											"let user = pm.environment.get(\"user\");\r",
											"console.log(\"user: \" + user);\r",
											"if (user == \"wf10\") {\r",
											"    pm.test(\"Status should be is 403 for user wf10\", function () {\r",
											"        pm.response.to.have.status(403);\r",
											"    });\r",
											"    return;\r",
											"}\r",
											"else {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"}\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
											"    user = \"elevated\";\r",
											"}\r",
											"\r",
											"if (pm.request.url.getQueryString().match(/result=pass/)) {\r",
											"    user = \"elevated\";\r",
											"}\r",
											"\r",
											"\r",
											"//break out asset ids, check against user valid set"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/collections/:collectionId/reviews?userId=1&projection=rule&projection=stigs&projection=asset",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":collectionId",
										"reviews"
									],
									"query": [
										{
											"key": "result",
											"value": "pass",
											"disabled": true
										},
										{
											"key": "action",
											"value": "remediate",
											"disabled": true
										},
										{
											"key": "status",
											"value": "saved",
											"disabled": true
										},
										{
											"key": "ruleId",
											"value": "{{reviews.testRule}}",
											"description": "Selects Reviews of a Rule",
											"disabled": true
										},
										{
											"key": "userId",
											"value": "1",
											"description": "A path parameter that indentifies a User"
										},
										{
											"key": "assetId",
											"value": "<string>",
											"description": "A query parameter that indentifies an Asset",
											"disabled": true
										},
										{
											"key": "benchmarkId",
											"value": "<string>",
											"description": "A query parameter that indentifies a STIG",
											"disabled": true
										},
										{
											"key": "revisionStr",
											"value": "<string>",
											"description": "Selects Reviews mapped to a Revision [ V{version_num}R{release_num} | 'latest' ]; requires benchmarkId",
											"disabled": true
										},
										{
											"key": "projection",
											"value": "rule",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "stigs",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "asset"
										}
									],
									"variable": [
										{
											"key": "collectionId",
											"value": "{{testCollection}}",
											"type": "string",
											"description": "(Required) A path parameter that indentifies a Collection"
										}
									]
								}
							},
							"response": [
								{
									"name": "ReviewProjected response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/reviews?result=<string>&action=<string>&status=<string>&ruleId=<string>&userId=<string>&assetId=<string>&benchmarkId=<string>&revisionStr=<string>&projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"reviews"
											],
											"query": [
												{
													"key": "result",
													"value": "<string>"
												},
												{
													"key": "action",
													"value": "<string>"
												},
												{
													"key": "status",
													"value": "<string>"
												},
												{
													"key": "ruleId",
													"value": "<string>"
												},
												{
													"key": "userId",
													"value": "<string>"
												},
												{
													"key": "assetId",
													"value": "<string>"
												},
												{
													"key": "benchmarkId",
													"value": "<string>"
												},
												{
													"key": "revisionStr",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "collectionId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n {\n  \"assetId\": \"<string>\",\n  \"assetName\": \"<string>\",\n  \"ruleId\": \"<string>\",\n  \"result\": \"<string>\",\n  \"resultComment\": \"<string>\",\n  \"autoResult\": \"<boolean>\",\n  \"action\": \"<string>\",\n  \"actionComment\": \"<string>\",\n  \"status\": \"<string>\",\n  \"userId\": \"<string>\",\n  \"username\": \"<string>\",\n  \"ts\": \"<string>\",\n  \"rejectText\": \"<string>\",\n  \"rejectUserId\": \"<string>\",\n  \"asset\": {\n   \"assetId\": \"<string>\",\n   \"name\": \"<string>\"\n  },\n  \"stigs\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"rule\": {\n   \"ruleId\": \"<string>\",\n   \"version\": \"<string>\",\n   \"title\": \"<string>\",\n   \"severity\": \"<string>\"\n  }\n },\n {\n  \"assetId\": \"<string>\",\n  \"assetName\": \"<string>\",\n  \"ruleId\": \"<string>\",\n  \"result\": \"<string>\",\n  \"resultComment\": \"<string>\",\n  \"autoResult\": \"<boolean>\",\n  \"action\": \"<string>\",\n  \"actionComment\": \"<string>\",\n  \"status\": \"<string>\",\n  \"userId\": \"<string>\",\n  \"username\": \"<string>\",\n  \"ts\": \"<string>\",\n  \"rejectText\": \"<string>\",\n  \"rejectUserId\": \"<string>\",\n  \"asset\": {\n   \"assetId\": \"<string>\",\n   \"name\": \"<string>\"\n  },\n  \"stigs\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"rule\": {\n   \"ruleId\": \"<string>\",\n   \"version\": \"<string>\",\n   \"title\": \"<string>\",\n   \"severity\": \"<string>\"\n  }\n }\n]"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/reviews?result=<string>&action=<string>&status=<string>&ruleId=<string>&userId=<string>&assetId=<string>&benchmarkId=<string>&revisionStr=<string>&projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"reviews"
											],
											"query": [
												{
													"key": "result",
													"value": "<string>"
												},
												{
													"key": "action",
													"value": "<string>"
												},
												{
													"key": "status",
													"value": "<string>"
												},
												{
													"key": "ruleId",
													"value": "<string>"
												},
												{
													"key": "userId",
													"value": "<string>"
												},
												{
													"key": "assetId",
													"value": "<string>"
												},
												{
													"key": "benchmarkId",
													"value": "<string>"
												},
												{
													"key": "revisionStr",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "collectionId"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Return a list of Reviews accessible to the requester - invalid collection",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3f182965-5f4f-4fd6-b5fa-79a66f9a504a",
								"exec": [
									"let user = pm.environment.get(\"user\");\r",
									"console.log(\"user: \" + user);\r",
									"if (user == \"wf10\") {\r",
									"    pm.test(\"Status should be is 403 for user wf10\", function () {\r",
									"        pm.response.to.have.status(403);\r",
									"    });\r",
									"    return;\r",
									"}\r",
									"else {\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"}\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"if (pm.request.url.getQueryString().match(/elevate=true/)) {\r",
									"    user = \"elevated\";\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/collections/:collectionId/reviews?projection=rule&projection=stigs&projection=asset",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"collections",
								":collectionId",
								"reviews"
							],
							"query": [
								{
									"key": "result",
									"value": "<string>",
									"disabled": true
								},
								{
									"key": "action",
									"value": "<string>",
									"disabled": true
								},
								{
									"key": "status",
									"value": "<string>",
									"disabled": true
								},
								{
									"key": "ruleId",
									"value": "<string>",
									"description": "Selects Reviews of a Rule",
									"disabled": true
								},
								{
									"key": "userId",
									"value": "<string>",
									"description": "A path parameter that indentifies a User",
									"disabled": true
								},
								{
									"key": "assetId",
									"value": "<string>",
									"description": "A query parameter that indentifies an Asset",
									"disabled": true
								},
								{
									"key": "benchmarkId",
									"value": "<string>",
									"description": "A query parameter that indentifies a STIG",
									"disabled": true
								},
								{
									"key": "revisionStr",
									"value": "<string>",
									"description": "Selects Reviews mapped to a Revision [ V{version_num}R{release_num} | 'latest' ]; requires benchmarkId",
									"disabled": true
								},
								{
									"key": "projection",
									"value": "rule",
									"description": "Additional properties to include in the response.\n"
								},
								{
									"key": "projection",
									"value": "stigs",
									"description": "Additional properties to include in the response.\n"
								},
								{
									"key": "projection",
									"value": "asset"
								}
							],
							"variable": [
								{
									"key": "collectionId",
									"value": "83",
									"type": "string",
									"description": "(Required) A path parameter that indentifies a Collection"
								}
							]
						}
					},
					"response": [
						{
							"name": "unexpected error",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/collections/:collectionId/reviews?result=<string>&action=<string>&status=<string>&ruleId=<string>&userId=<string>&assetId=<string>&benchmarkId=<string>&revisionStr=<string>&projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":collectionId",
										"reviews"
									],
									"query": [
										{
											"key": "result",
											"value": "<string>"
										},
										{
											"key": "action",
											"value": "<string>"
										},
										{
											"key": "status",
											"value": "<string>"
										},
										{
											"key": "ruleId",
											"value": "<string>"
										},
										{
											"key": "userId",
											"value": "<string>"
										},
										{
											"key": "assetId",
											"value": "<string>"
										},
										{
											"key": "benchmarkId",
											"value": "<string>"
										},
										{
											"key": "revisionStr",
											"value": "<string>"
										},
										{
											"key": "projection",
											"value": "<string>"
										},
										{
											"key": "projection",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "collectionId"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
						},
						{
							"name": "ReviewProjected response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/collections/:collectionId/reviews?result=<string>&action=<string>&status=<string>&ruleId=<string>&userId=<string>&assetId=<string>&benchmarkId=<string>&revisionStr=<string>&projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":collectionId",
										"reviews"
									],
									"query": [
										{
											"key": "result",
											"value": "<string>"
										},
										{
											"key": "action",
											"value": "<string>"
										},
										{
											"key": "status",
											"value": "<string>"
										},
										{
											"key": "ruleId",
											"value": "<string>"
										},
										{
											"key": "userId",
											"value": "<string>"
										},
										{
											"key": "assetId",
											"value": "<string>"
										},
										{
											"key": "benchmarkId",
											"value": "<string>"
										},
										{
											"key": "revisionStr",
											"value": "<string>"
										},
										{
											"key": "projection",
											"value": "<string>"
										},
										{
											"key": "projection",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "collectionId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"assetId\": \"<string>\",\n  \"assetName\": \"<string>\",\n  \"ruleId\": \"<string>\",\n  \"result\": \"<string>\",\n  \"resultComment\": \"<string>\",\n  \"autoResult\": \"<boolean>\",\n  \"action\": \"<string>\",\n  \"actionComment\": \"<string>\",\n  \"status\": \"<string>\",\n  \"userId\": \"<string>\",\n  \"username\": \"<string>\",\n  \"ts\": \"<string>\",\n  \"rejectText\": \"<string>\",\n  \"rejectUserId\": \"<string>\",\n  \"asset\": {\n   \"assetId\": \"<string>\",\n   \"name\": \"<string>\"\n  },\n  \"stigs\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"rule\": {\n   \"ruleId\": \"<string>\",\n   \"version\": \"<string>\",\n   \"title\": \"<string>\",\n   \"severity\": \"<string>\"\n  }\n },\n {\n  \"assetId\": \"<string>\",\n  \"assetName\": \"<string>\",\n  \"ruleId\": \"<string>\",\n  \"result\": \"<string>\",\n  \"resultComment\": \"<string>\",\n  \"autoResult\": \"<boolean>\",\n  \"action\": \"<string>\",\n  \"actionComment\": \"<string>\",\n  \"status\": \"<string>\",\n  \"userId\": \"<string>\",\n  \"username\": \"<string>\",\n  \"ts\": \"<string>\",\n  \"rejectText\": \"<string>\",\n  \"rejectUserId\": \"<string>\",\n  \"asset\": {\n   \"assetId\": \"<string>\",\n   \"name\": \"<string>\"\n  },\n  \"stigs\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"rule\": {\n   \"ruleId\": \"<string>\",\n   \"version\": \"<string>\",\n   \"title\": \"<string>\",\n   \"severity\": \"<string>\"\n  }\n }\n]"
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Users Tests",
			"item": [
				{
					"name": "{user Id}",
					"item": [
						{
							"name": "Return a User",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:userId?elevate=<boolean>&projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId"
									],
									"query": [
										{
											"key": "elevate",
											"value": "<boolean>",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)"
										},
										{
											"key": "projection",
											"value": "<string>",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "<string>",
											"description": "Additional properties to include in the response.\n"
										}
									],
									"variable": [
										{
											"id": "914b07e8-58ac-465f-9805-54ca3a24ed65",
											"key": "userId",
											"value": "<string>",
											"type": "string",
											"description": "(Required) A path parameter that indentifies a User"
										}
									]
								}
							},
							"response": [
								{
									"name": "UserProjected response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:userId?elevate=<boolean>&projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId"
											],
											"query": [
												{
													"key": "elevate",
													"value": "<boolean>"
												},
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "userId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"userId\": \"<string>\",\n \"username\": \"<string>\",\n \"display\": \"<string>\",\n \"email\": \"<string>\",\n \"metadata\": \"<object>\",\n \"privileges\": {\n  \"globalAccess\": \"<boolean>\",\n  \"canCreateCollection\": \"<boolean>\",\n  \"canAdmin\": \"<boolean>\"\n },\n \"collectionGrants\": [\n  {\n   \"collection\": {\n    \"collectionId\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   \"accessLevel\": \"<integer>\"\n  },\n  {\n   \"collection\": {\n    \"collectionId\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   \"accessLevel\": \"<integer>\"\n  }\n ]\n}"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:userId?elevate=<boolean>&projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId"
											],
											"query": [
												{
													"key": "elevate",
													"value": "<boolean>"
												},
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "userId"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Merge provided properties with a User",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"<string>\",\n    \"display\": \"<string>\",\n    \"email\": \"<string>\",\n    \"metadata\": \"<object>\",\n    \"privileges\": {\n        \"globalAccess\": \"<boolean>\",\n        \"canCreateCollection\": \"<boolean>\",\n        \"canAdmin\": \"<boolean>\"\n    },\n    \"collectionGrants\": [\n        {\n            \"collectionId\": \"<string>\",\n            \"accessLevel\": \"<integer>\"\n        },\n        {\n            \"collectionId\": \"<string>\",\n            \"accessLevel\": \"<integer>\"\n        }\n    ]\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId?elevate=<boolean>&projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId"
									],
									"query": [
										{
											"key": "elevate",
											"value": "<boolean>",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)"
										},
										{
											"key": "projection",
											"value": "<string>",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "<string>",
											"description": "Additional properties to include in the response.\n"
										}
									],
									"variable": [
										{
											"id": "9815d25a-3ac0-46cf-93b4-5e7a311c360e",
											"key": "userId",
											"value": "<string>",
											"type": "string",
											"description": "(Required) A path parameter that indentifies a User"
										}
									]
								}
							},
							"response": [
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"<string>\",\n    \"display\": \"<string>\",\n    \"email\": \"<string>\",\n    \"metadata\": \"<object>\",\n    \"privileges\": {\n        \"globalAccess\": \"<boolean>\",\n        \"canCreateCollection\": \"<boolean>\",\n        \"canAdmin\": \"<boolean>\"\n    },\n    \"collectionGrants\": [\n        {\n            \"collectionId\": \"<string>\",\n            \"accessLevel\": \"<integer>\"\n        },\n        {\n            \"collectionId\": \"<string>\",\n            \"accessLevel\": \"<integer>\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/users/:userId?elevate=<boolean>&projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId"
											],
											"query": [
												{
													"key": "elevate",
													"value": "<boolean>"
												},
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "userId"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
								},
								{
									"name": "UserProjected response",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"<string>\",\n    \"display\": \"<string>\",\n    \"email\": \"<string>\",\n    \"metadata\": \"<object>\",\n    \"privileges\": {\n        \"globalAccess\": \"<boolean>\",\n        \"canCreateCollection\": \"<boolean>\",\n        \"canAdmin\": \"<boolean>\"\n    },\n    \"collectionGrants\": [\n        {\n            \"collectionId\": \"<string>\",\n            \"accessLevel\": \"<integer>\"\n        },\n        {\n            \"collectionId\": \"<string>\",\n            \"accessLevel\": \"<integer>\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/users/:userId?elevate=<boolean>&projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId"
											],
											"query": [
												{
													"key": "elevate",
													"value": "<boolean>"
												},
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "userId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n {\n  \"userId\": \"<string>\",\n  \"username\": \"<string>\",\n  \"display\": \"<string>\",\n  \"email\": \"<string>\",\n  \"metadata\": \"<object>\",\n  \"privileges\": {\n   \"globalAccess\": \"<boolean>\",\n   \"canCreateCollection\": \"<boolean>\",\n   \"canAdmin\": \"<boolean>\"\n  },\n  \"collectionGrants\": [\n   {\n    \"collection\": {\n     \"collectionId\": \"<string>\",\n     \"name\": \"<string>\"\n    },\n    \"accessLevel\": \"<integer>\"\n   },\n   {\n    \"collection\": {\n     \"collectionId\": \"<string>\",\n     \"name\": \"<string>\"\n    },\n    \"accessLevel\": \"<integer>\"\n   }\n  ]\n },\n {\n  \"userId\": \"<string>\",\n  \"username\": \"<string>\",\n  \"display\": \"<string>\",\n  \"email\": \"<string>\",\n  \"metadata\": \"<object>\",\n  \"privileges\": {\n   \"globalAccess\": \"<boolean>\",\n   \"canCreateCollection\": \"<boolean>\",\n   \"canAdmin\": \"<boolean>\"\n  },\n  \"collectionGrants\": [\n   {\n    \"collection\": {\n     \"collectionId\": \"<string>\",\n     \"name\": \"<string>\"\n    },\n    \"accessLevel\": \"<integer>\"\n   },\n   {\n    \"collection\": {\n     \"collectionId\": \"<string>\",\n     \"name\": \"<string>\"\n    },\n    \"accessLevel\": \"<integer>\"\n   }\n  ]\n }\n]"
								}
							]
						},
						{
							"name": "Set all properties of a User",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"<string>\",\n    \"display\": \"<string>\",\n    \"email\": \"<string>\",\n    \"privileges\": {\n        \"globalAccess\": \"<boolean>\",\n        \"canCreateCollection\": \"<boolean>\",\n        \"canAdmin\": \"<boolean>\"\n    },\n    \"collectionGrants\": [\n        {\n            \"collectionId\": \"<string>\",\n            \"accessLevel\": \"<integer>\"\n        },\n        {\n            \"collectionId\": \"<string>\",\n            \"accessLevel\": \"<integer>\"\n        }\n    ],\n    \"metadata\": \"<object>\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId?elevate=<boolean>&projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId"
									],
									"query": [
										{
											"key": "elevate",
											"value": "<boolean>",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)"
										},
										{
											"key": "projection",
											"value": "<string>",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "<string>",
											"description": "Additional properties to include in the response.\n"
										}
									],
									"variable": [
										{
											"id": "aceb257d-5aa5-47cb-8cee-1ef1b45b00c9",
											"key": "userId",
											"value": "<string>",
											"type": "string",
											"description": "(Required) A path parameter that indentifies a User"
										}
									]
								}
							},
							"response": [
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"<string>\",\n    \"display\": \"<string>\",\n    \"email\": \"<string>\",\n    \"privileges\": {\n        \"globalAccess\": \"<boolean>\",\n        \"canCreateCollection\": \"<boolean>\",\n        \"canAdmin\": \"<boolean>\"\n    },\n    \"collectionGrants\": [\n        {\n            \"collectionId\": \"<string>\",\n            \"accessLevel\": \"<integer>\"\n        },\n        {\n            \"collectionId\": \"<string>\",\n            \"accessLevel\": \"<integer>\"\n        }\n    ],\n    \"metadata\": \"<object>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/users/:userId?elevate=<boolean>&projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId"
											],
											"query": [
												{
													"key": "elevate",
													"value": "<boolean>"
												},
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "userId"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
								},
								{
									"name": "UserProjected response",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"<string>\",\n    \"display\": \"<string>\",\n    \"email\": \"<string>\",\n    \"privileges\": {\n        \"globalAccess\": \"<boolean>\",\n        \"canCreateCollection\": \"<boolean>\",\n        \"canAdmin\": \"<boolean>\"\n    },\n    \"collectionGrants\": [\n        {\n            \"collectionId\": \"<string>\",\n            \"accessLevel\": \"<integer>\"\n        },\n        {\n            \"collectionId\": \"<string>\",\n            \"accessLevel\": \"<integer>\"\n        }\n    ],\n    \"metadata\": \"<object>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/users/:userId?elevate=<boolean>&projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId"
											],
											"query": [
												{
													"key": "elevate",
													"value": "<boolean>"
												},
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "userId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n {\n  \"userId\": \"<string>\",\n  \"username\": \"<string>\",\n  \"display\": \"<string>\",\n  \"email\": \"<string>\",\n  \"metadata\": \"<object>\",\n  \"privileges\": {\n   \"globalAccess\": \"<boolean>\",\n   \"canCreateCollection\": \"<boolean>\",\n   \"canAdmin\": \"<boolean>\"\n  },\n  \"collectionGrants\": [\n   {\n    \"collection\": {\n     \"collectionId\": \"<string>\",\n     \"name\": \"<string>\"\n    },\n    \"accessLevel\": \"<integer>\"\n   },\n   {\n    \"collection\": {\n     \"collectionId\": \"<string>\",\n     \"name\": \"<string>\"\n    },\n    \"accessLevel\": \"<integer>\"\n   }\n  ]\n },\n {\n  \"userId\": \"<string>\",\n  \"username\": \"<string>\",\n  \"display\": \"<string>\",\n  \"email\": \"<string>\",\n  \"metadata\": \"<object>\",\n  \"privileges\": {\n   \"globalAccess\": \"<boolean>\",\n   \"canCreateCollection\": \"<boolean>\",\n   \"canAdmin\": \"<boolean>\"\n  },\n  \"collectionGrants\": [\n   {\n    \"collection\": {\n     \"collectionId\": \"<string>\",\n     \"name\": \"<string>\"\n    },\n    \"accessLevel\": \"<integer>\"\n   },\n   {\n    \"collection\": {\n     \"collectionId\": \"<string>\",\n     \"name\": \"<string>\"\n    },\n    \"accessLevel\": \"<integer>\"\n   }\n  ]\n }\n]"
								}
							]
						},
						{
							"name": "Delete a User",
							"request": {
								"auth": {
									"type": "oauth2"
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:userId?elevate=<boolean>&projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId"
									],
									"query": [
										{
											"key": "elevate",
											"value": "<boolean>",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)"
										},
										{
											"key": "projection",
											"value": "<string>",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "<string>",
											"description": "Additional properties to include in the response.\n"
										}
									],
									"variable": [
										{
											"id": "9f99e972-2cdb-4199-8de8-e846a575a021",
											"key": "userId",
											"value": "<string>",
											"type": "string",
											"description": "(Required) A path parameter that indentifies a User"
										}
									]
								}
							},
							"response": [
								{
									"name": "UserProjected response",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:userId?elevate=<boolean>&projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId"
											],
											"query": [
												{
													"key": "elevate",
													"value": "<boolean>"
												},
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "userId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n {\n  \"userId\": \"<string>\",\n  \"username\": \"<string>\",\n  \"display\": \"<string>\",\n  \"email\": \"<string>\",\n  \"metadata\": \"<object>\",\n  \"privileges\": {\n   \"globalAccess\": \"<boolean>\",\n   \"canCreateCollection\": \"<boolean>\",\n   \"canAdmin\": \"<boolean>\"\n  },\n  \"collectionGrants\": [\n   {\n    \"collection\": {\n     \"collectionId\": \"<string>\",\n     \"name\": \"<string>\"\n    },\n    \"accessLevel\": \"<integer>\"\n   },\n   {\n    \"collection\": {\n     \"collectionId\": \"<string>\",\n     \"name\": \"<string>\"\n    },\n    \"accessLevel\": \"<integer>\"\n   }\n  ]\n },\n {\n  \"userId\": \"<string>\",\n  \"username\": \"<string>\",\n  \"display\": \"<string>\",\n  \"email\": \"<string>\",\n  \"metadata\": \"<object>\",\n  \"privileges\": {\n   \"globalAccess\": \"<boolean>\",\n   \"canCreateCollection\": \"<boolean>\",\n   \"canAdmin\": \"<boolean>\"\n  },\n  \"collectionGrants\": [\n   {\n    \"collection\": {\n     \"collectionId\": \"<string>\",\n     \"name\": \"<string>\"\n    },\n    \"accessLevel\": \"<integer>\"\n   },\n   {\n    \"collection\": {\n     \"collectionId\": \"<string>\",\n     \"name\": \"<string>\"\n    },\n    \"accessLevel\": \"<integer>\"\n   }\n  ]\n }\n]"
								},
								{
									"name": "unexpected error",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:userId?elevate=<boolean>&projection=<string>&projection=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId"
											],
											"query": [
												{
													"key": "elevate",
													"value": "<boolean>"
												},
												{
													"key": "projection",
													"value": "<string>"
												},
												{
													"key": "projection",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "userId"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Return a list of Users accessible to the requester",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users?elevate={{elevated}}&projection=privileges&projection=collectionGrants",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "elevate",
									"value": "{{elevated}}",
									"description": "Elevate the user context for this request if user is permitted (canAdmin)"
								},
								{
									"key": "username",
									"value": "<string>",
									"description": "A query parameter that filters on a username",
									"disabled": true
								},
								{
									"key": "projection",
									"value": "privileges",
									"description": "Additional properties to include in the response.\n"
								},
								{
									"key": "projection",
									"value": "collectionGrants",
									"description": "Additional properties to include in the response.\n"
								}
							]
						}
					},
					"response": [
						{
							"name": "unexpected error",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users?elevate=<boolean>&username=<string>&projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "elevate",
											"value": "<boolean>"
										},
										{
											"key": "username",
											"value": "<string>"
										},
										{
											"key": "projection",
											"value": "<string>"
										},
										{
											"key": "projection",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
						},
						{
							"name": "UserProjected response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users?elevate=<boolean>&username=<string>&projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "elevate",
											"value": "<boolean>"
										},
										{
											"key": "username",
											"value": "<string>"
										},
										{
											"key": "projection",
											"value": "<string>"
										},
										{
											"key": "projection",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"userId\": \"<string>\",\n  \"username\": \"<string>\",\n  \"display\": \"<string>\",\n  \"email\": \"<string>\",\n  \"metadata\": \"<object>\",\n  \"privileges\": {\n   \"globalAccess\": \"<boolean>\",\n   \"canCreateCollection\": \"<boolean>\",\n   \"canAdmin\": \"<boolean>\"\n  },\n  \"collectionGrants\": [\n   {\n    \"collection\": {\n     \"collectionId\": \"<string>\",\n     \"name\": \"<string>\"\n    },\n    \"accessLevel\": \"<integer>\"\n   },\n   {\n    \"collection\": {\n     \"collectionId\": \"<string>\",\n     \"name\": \"<string>\"\n    },\n    \"accessLevel\": \"<integer>\"\n   }\n  ]\n },\n {\n  \"userId\": \"<string>\",\n  \"username\": \"<string>\",\n  \"display\": \"<string>\",\n  \"email\": \"<string>\",\n  \"metadata\": \"<object>\",\n  \"privileges\": {\n   \"globalAccess\": \"<boolean>\",\n   \"canCreateCollection\": \"<boolean>\",\n   \"canAdmin\": \"<boolean>\"\n  },\n  \"collectionGrants\": [\n   {\n    \"collection\": {\n     \"collectionId\": \"<string>\",\n     \"name\": \"<string>\"\n    },\n    \"accessLevel\": \"<integer>\"\n   },\n   {\n    \"collection\": {\n     \"collectionId\": \"<string>\",\n     \"name\": \"<string>\"\n    },\n    \"accessLevel\": \"<integer>\"\n   }\n  ]\n }\n]"
						}
					]
				},
				{
					"name": "Create a User",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"<string>\",\n    \"display\": \"<string>\",\n    \"email\": \"<string>\",\n    \"privileges\": {\n        \"globalAccess\": \"<boolean>\",\n        \"canCreateCollection\": \"<boolean>\",\n        \"canAdmin\": \"<boolean>\"\n    },\n    \"collectionGrants\": [\n        {\n            \"collectionId\": \"<string>\",\n            \"accessLevel\": \"<integer>\"\n        },\n        {\n            \"collectionId\": \"<string>\",\n            \"accessLevel\": \"<integer>\"\n        }\n    ],\n    \"metadata\": \"<object>\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users?elevate=<boolean>&username=<string>&projection=<string>&projection=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "elevate",
									"value": "<boolean>",
									"description": "Elevate the user context for this request if user is permitted (canAdmin)"
								},
								{
									"key": "username",
									"value": "<string>",
									"description": "A query parameter that filters on a username"
								},
								{
									"key": "projection",
									"value": "<string>",
									"description": "Additional properties to include in the response.\n"
								},
								{
									"key": "projection",
									"value": "<string>",
									"description": "Additional properties to include in the response.\n"
								}
							]
						}
					},
					"response": [
						{
							"name": "UserProjected response",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"<string>\",\n    \"display\": \"<string>\",\n    \"email\": \"<string>\",\n    \"privileges\": {\n        \"globalAccess\": \"<boolean>\",\n        \"canCreateCollection\": \"<boolean>\",\n        \"canAdmin\": \"<boolean>\"\n    },\n    \"collectionGrants\": [\n        {\n            \"collectionId\": \"<string>\",\n            \"accessLevel\": \"<integer>\"\n        },\n        {\n            \"collectionId\": \"<string>\",\n            \"accessLevel\": \"<integer>\"\n        }\n    ],\n    \"metadata\": \"<object>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/users?elevate=<boolean>&username=<string>&projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "elevate",
											"value": "<boolean>"
										},
										{
											"key": "username",
											"value": "<string>"
										},
										{
											"key": "projection",
											"value": "<string>"
										},
										{
											"key": "projection",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"userId\": \"<string>\",\n  \"username\": \"<string>\",\n  \"display\": \"<string>\",\n  \"email\": \"<string>\",\n  \"metadata\": \"<object>\",\n  \"privileges\": {\n   \"globalAccess\": \"<boolean>\",\n   \"canCreateCollection\": \"<boolean>\",\n   \"canAdmin\": \"<boolean>\"\n  },\n  \"collectionGrants\": [\n   {\n    \"collection\": {\n     \"collectionId\": \"<string>\",\n     \"name\": \"<string>\"\n    },\n    \"accessLevel\": \"<integer>\"\n   },\n   {\n    \"collection\": {\n     \"collectionId\": \"<string>\",\n     \"name\": \"<string>\"\n    },\n    \"accessLevel\": \"<integer>\"\n   }\n  ]\n },\n {\n  \"userId\": \"<string>\",\n  \"username\": \"<string>\",\n  \"display\": \"<string>\",\n  \"email\": \"<string>\",\n  \"metadata\": \"<object>\",\n  \"privileges\": {\n   \"globalAccess\": \"<boolean>\",\n   \"canCreateCollection\": \"<boolean>\",\n   \"canAdmin\": \"<boolean>\"\n  },\n  \"collectionGrants\": [\n   {\n    \"collection\": {\n     \"collectionId\": \"<string>\",\n     \"name\": \"<string>\"\n    },\n    \"accessLevel\": \"<integer>\"\n   },\n   {\n    \"collection\": {\n     \"collectionId\": \"<string>\",\n     \"name\": \"<string>\"\n    },\n    \"accessLevel\": \"<integer>\"\n   }\n  ]\n }\n]"
						},
						{
							"name": "unexpected error",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"<string>\",\n    \"display\": \"<string>\",\n    \"email\": \"<string>\",\n    \"privileges\": {\n        \"globalAccess\": \"<boolean>\",\n        \"canCreateCollection\": \"<boolean>\",\n        \"canAdmin\": \"<boolean>\"\n    },\n    \"collectionGrants\": [\n        {\n            \"collectionId\": \"<string>\",\n            \"accessLevel\": \"<integer>\"\n        },\n        {\n            \"collectionId\": \"<string>\",\n            \"accessLevel\": \"<integer>\"\n        }\n    ],\n    \"metadata\": \"<object>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/users?elevate=<boolean>&username=<string>&projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "elevate",
											"value": "<boolean>"
										},
										{
											"key": "username",
											"value": "<string>"
										},
										{
											"key": "projection",
											"value": "<string>"
										},
										{
											"key": "projection",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "Return the requester's user information Copy",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": [
						{
							"name": "UserProjected response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"userId\": \"<string>\",\n \"username\": \"<string>\",\n \"display\": \"<string>\",\n \"email\": \"<string>\",\n \"metadata\": \"<object>\",\n \"privileges\": {\n  \"globalAccess\": \"<boolean>\",\n  \"canCreateCollection\": \"<boolean>\",\n  \"canAdmin\": \"<boolean>\"\n },\n \"collectionGrants\": [\n  {\n   \"collection\": {\n    \"collectionId\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   \"accessLevel\": \"<integer>\"\n  },\n  {\n   \"collection\": {\n    \"collectionId\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   \"accessLevel\": \"<integer>\"\n  }\n ]\n}"
						},
						{
							"name": "unexpected error",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"auth": {
		"type": "oauth2",
		"oauth2": [
			{
				"key": "accessToken",
				"value": "{{token}}",
				"type": "string"
			},
			{
				"key": "tokenType",
				"value": "bearer",
				"type": "string"
			},
			{
				"key": "addTokenTo",
				"value": "header",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "6d80a140-b6e2-4d08-b162-e4119ed97293",
				"type": "text/javascript",
				"exec": [
					"// pm.environment.set(\"curUser\", \"staff\");",
					"",
					"let user = pm.iterationData.get(\"user\");",
					"let elevate = pm.iterationData.get(\"elevate\");",
					"console.log(`user: ${user} elevate: ${elevate}`);",
					"",
					"",
					"",
					"if (user === undefined) {",
					"    user = \"admin\";",
					"    elevate = true;",
					"    pm.environment.set(\"user\", user);",
					"    pm.environment.set(\"elevated\", elevate);",
					"    let token = pm.environment.get(\"token.\" + user)",
					"    pm.environment.set(\"token\", token);",
					"    console.log(`No iteration data. Setting: User: ${user} elevated: ${elevate} Bearer: ${token}`);",
					"",
					"    return;  // Just use whatever settings are currently left in the env.",
					"}",
					"",
					"",
					"",
					"let token = pm.iterationData.get(\"token\");",
					"pm.environment.set(\"token.\"+ user, token);",
					"pm.environment.set(\"token\", token);",
					"pm.environment.set(\"user\", user);",
					"pm.environment.set(\"elevated\", elevate);",
					"console.log(`User: ${user} elevated: ${elevate} Bearer: ${token}`);",
					"",
					"pm.environment.set(\"collections.valid\", pm.iterationData.get(\"collections.valid\"));",
					"pm.environment.set(\"collections.invalid\", pm.iterationData.get(\"collections.invalid\"));",
					"pm.environment.set(\"assets.valid\", pm.iterationData.get(\"assets.valid\"));",
					"pm.environment.set(\"assets.invalid\", pm.iterationData.get(\"assets.invalid\"));",
					"pm.environment.set(\"stigs.valid\", pm.iterationData.get(\"stigs.valid\"));",
					"pm.environment.set(\"stigs.invalid\", pm.iterationData.get(\"stigs.invalid\"));",
					"pm.environment.set(\"testCollection\", pm.iterationData.get(\"testCollection\"));",
					"pm.environment.set(\"testCollectionScrap\", pm.iterationData.get(\"testCollectionScrap\"));",
					"pm.environment.set(\"testCollection.assets\", pm.iterationData.get(\"testCollection.assets\"));",
					"pm.environment.set(\"testBenchmark\", pm.iterationData.get(\"testBenchmark\"));",
					"pm.environment.set(\"testRev\", pm.iterationData.get(\"testRev\"));",
					"pm.environment.set(\"globalAccess\", pm.iterationData.get(\"globalAccess\"));",
					"pm.environment.set(\"accessLevel\", pm.iterationData.get(\"accessLevel\"));",
					"pm.environment.set(\"targetCollectionName\", pm.iterationData.get(\"targetCollectionName\"));",
					"",
					"",
					"",
					"pm.environment.set(\"assets.collectionQuery.response\", pm.iterationData.get(\"assets.collectionQuery.response\"));",
					"pm.environment.set(\"assets.benchmarkQuery.response\", pm.iterationData.get(\"assets.benchmarkQuery.response\"));",
					"pm.environment.set(\"assets.deptQuery.response\", pm.iterationData.get(\"assets.deptQuery.response\"));",
					"pm.environment.set(\"assets.collectionQuery.response\", pm.iterationData.get(\"assets.collectionQuery.response\"));",
					"pm.environment.set(\"assets.collectionQuery.response\", pm.iterationData.get(\"assets.collectionQuery.response\"));",
					"pm.environment.set(\"assets.collectionQuery.response\", pm.iterationData.get(\"assets.collectionQuery.response\"));",
					"pm.environment.set(\"assets.queryPkg\", pm.iterationData.get(\"assets.queryPkg\"));",
					"pm.environment.set(\"assets.queryBenchmark\", pm.iterationData.get(\"assets.queryBenchmark\"));",
					"pm.environment.set(\"assets.queryRev\", pm.iterationData.get(\"assets.queryRev\"));",
					"pm.environment.set(\"assets.queryDept\", pm.iterationData.get(\"assets.queryDept\"));",
					"pm.environment.set(\"assets.queryAsset\", pm.iterationData.get(\"assets.queryAsset\"));",
					"pm.environment.set(\"checklistLength\", pm.iterationData.get(\"assets.checklistLength\"));",
					"",
					"",
					"pm.environment.set(\"collectionMatchString\", pm.iterationData.get(\"collectionMatchString\"));",
					"pm.environment.set(\"assetMatchString\", pm.iterationData.get(\"assetMatchString\"));",
					"pm.environment.set(\"reviewMatchString\", pm.iterationData.get(\"reviewMatchString\"));",
					"pm.environment.set(\"reviews.testRule\", pm.iterationData.get(\"reviews.testRule\"));",
					"",
					"",
					"",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "c58e94a1-7a8a-4d62-89ca-d63805f779e9",
				"type": "text/javascript",
				"exec": [
					"// var user = pm.environment.get(\"user\");",
					"// var elevated = pm.environment.get(\"elevated\");",
					"",
					"// pm.test(`Collections Tests with user: ${user} elevated: ${elevated} `, function () {",
					"//     pm.expect(pm.environment.get(\"user\")).to.equal(user);",
					"// });",
					"",
					"",
					"let user = pm.environment.get(\"user\");",
					"let elevated = pm.environment.get(\"elevated\");",
					"",
					"pm.test(`user: ${user}, elevate variable (not always used): ${elevated}`, function () {",
					"    pm.expect(1).to.equal(1);",
					"});",
					"",
					"let env = pm.environment.get(\"env\");",
					"pm.test(`environment: ${env}`, function () {",
					"    pm.expect(env).to.equal(\"stig-manager localhost ALL\");",
					"});",
					"",
					"",
					"",
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}